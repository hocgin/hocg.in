{"meta":{"title":"Hocgin (๑`灬´๑)","subtitle":"Great minds have purpose, others have wishes.","description":"Ubuntu | Java | Android | HTML5 | CSS3","author":"Hocgin","url":"http://hocg.in"},"pages":[{"title":"404","date":"2016-12-24T09:10:26.000Z","updated":"2016-05-28T07:27:40.000Z","comments":true,"path":"404.html","permalink":"http://hocg.in/404.html","excerpt":"","keywords":null,"text":"(｡•́︿•̀｡) 找不到了 body { background-color: #ECECEC; font-family: Arial, Helvetica, sans-serif; font-size: 14px; color: #3c3c3c; padding-top: 150px; } .page404 .f404 { text-align: center; font-size: 150px; font-weight: bold; line-height: 100px; letter-spacing: 5px; color: #fff; margin-bottom: 60px; } .page404 .f404 span { cursor: pointer; text-shadow: 0px 0px 2px #686868, 0px 1px 1px #ddd, 0px 2px 1px #d6d6d6, 0px 3px 1px #ccc, 0px 4px 1px #c5c5c5, 0px 5px 1px #c1c1c1, 0px 6px 1px #bbb, 0px 7px 1px #777, 0px 8px 3px rgba(100, 100, 100, 0.4), 0px 9px 5px rgba(100, 100, 100, 0.1), 0px 10px 7px rgba(100, 100, 100, 0.15), 0px 11px 9px rgba(100, 100, 100, 0.2), 0px 12px 11px rgba(100, 100, 100, 0.25), 0px 13px 15px rgba(100, 100, 100, 0.3); -webkit-transition: all .1s linear; transition: all .1s linear; } .page404 .f404 span:hover { text-shadow: 0px 0px 2px #686868, 0px 1px 1px #fff, 0px 2px 1px #fff, 0px 3px 1px #fff, 0px 4px 1px #fff, 0px 5px 1px #fff, 0px 6px 1px #fff, 0px 7px 1px #777, 0px 8px 3px #fff, 0px 9px 5px #fff, 0px 10px 7px #fff, 0px 11px 9px #fff, 0px 12px 11px #fff, 0px 13px 15px #fff; -webkit-transition: all .1s linear; transition: all .1s linear; } .page404 .f404-des { text-align: center; color: #666; font-family: cursive; font-size: 20px; text-shadow: 0 1px 0 #fff; letter-spacing: 1px; line-height: 2em; font-weight: bold; } .go-home { text-decoration: none; color: #666; } .go-home:hover { color: white; } 404 页面跑没了!?","raw":null,"content":null},{"title":"404","date":"2016-12-24T09:10:27.000Z","updated":"2016-04-14T09:17:59.000Z","comments":true,"path":"baidu_verify_JCkKHZdfNm.html","permalink":"http://hocg.in/baidu_verify_JCkKHZdfNm.html","excerpt":"","keywords":null,"text":"JCkKHZdfNm","raw":null,"content":null},{"title":"about","date":"2016-03-26T05:44:28.000Z","updated":"2016-04-18T07:58:54.000Z","comments":true,"path":"about/index.html","permalink":"http://hocg.in/about/index.html","excerpt":"","keywords":null,"text":"需要一点点改变，改变世界 或者 改变自己The best preparation for tomorrow is doing your best today.","raw":null,"content":null},{"title":"categories","date":"2016-03-26T05:44:39.000Z","updated":"2016-03-26T08:28:44.000Z","comments":false,"path":"categories/index.html","permalink":"http://hocg.in/categories/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"tags","date":"2016-03-26T05:43:40.000Z","updated":"2016-03-26T08:28:38.000Z","comments":false,"path":"tags/index.html","permalink":"http://hocg.in/tags/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null}],"posts":[{"title":"Nginx 部署","slug":"Nginx-部署","date":"2017-02-24T01:12:22.000Z","updated":"2017-02-25T09:17:57.000Z","comments":true,"path":"2017/02/24/Nginx-部署/","link":"","permalink":"http://hocg.in/2017/02/24/Nginx-部署/","excerpt":"🎽 Nginx 是一个很强大的高性能Web和反向代理服务器","keywords":null,"text":"🎽 Nginx 是一个很强大的高性能Web和反向代理服务器 前言环境OS: Ubuntu-16 安装依赖 PCRE zlib nginx 目录结构/opt|– nginx-1.10.1|– pcre-8.38`– zlib-1.2.8 shell 以下操作均在/opt目录 123# tar -zxvf nginx-1.10.1.tar.gz# cd nginx-1.10.1# ./configure ERROR:12345checking for OS + Linux 2.6.32-042stab113.21 x86_64checking for C compiler ... not found./configure: error: C compiler cc is not found 缺失编译部件, 解决办法如下:12# apt-get install build-essential libtool# ./configure Error:1234./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using --with-pcre=&lt;path&gt; option. 缺失PCRE, 移步官网下载(顶部有链接), 我是在/opt目录中解压注: pcre 没有 2 以下操作均在/opt目录 123# tar -jxvf pcre-8.38.tar.bz2# cd pcre-8.38# ./configure &amp;&amp; make &amp;&amp; make install 回到/opt/nginx-1.10.1目录继续进行1# ./configure --with-pcre=/opt/pcre-8.38 Error:1234./configure: error: the HTTP gzip module requires the zlib library.You can either disable the module by using --without-http_gzip_moduleoption, or install the zlib library into the system, or build the zlib librarystatically from the source with nginx by using --with-zlib=&lt;path&gt; option. 原因是缺失zlib,移步官网下载(顶部有链接), 同样是在/opt目录中解压 以下操作均在/opt目录 123# tar -zxvf zlib-1.2.8.tar.gz# cd zlib-1.2.8# ./configure &amp;&amp; make &amp;&amp; make install 回到/opt/nginx-1.10.1目录继续进行 123# ./configure --with-pcre=/opt/pcre-8.38 --with-zlib=/opt/zlib-1.2.8# make# make install 至此，安装结束。可查看ls /usr/local/nginx/目录显示如下文件:/usr/local/nginx/ 基础命令 以下命令均在/usr/local/nginx目录下运行 12345678# 启动./sbin/nginx# 检查配置./sbin/nginx -t# 重新加载配置./sbin/nginx -s reload# 查看配置文件cat ./conf/nginx.conf 扩展nginx.conf配置字段详解 模块待续ing","raw":null,"content":null,"categories":[{"name":"Server","slug":"Server","permalink":"http://hocg.in/categories/Server/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://hocg.in/tags/Ubuntu/"}]},{"title":"关于Chrome 插件开发的一些知识点","slug":"关于Chrome插件开发的一些知识点","date":"2017-02-04T05:20:51.000Z","updated":"2017-02-04T06:01:35.000Z","comments":true,"path":"2017/02/04/关于Chrome插件开发的一些知识点/","link":"","permalink":"http://hocg.in/2017/02/04/关于Chrome插件开发的一些知识点/","excerpt":"身为Chrome重度患者，生活和工作处处不离，这篇并不是入门教程，而是开发中的一些小Tip的记录.","keywords":null,"text":"身为Chrome重度患者，生活和工作处处不离，这篇并不是入门教程，而是开发中的一些小Tip的记录. 我开发的Chrome 插件 天气预报 数据存储 HTML5 localStorage 存储在解析页面当前范围和网站共享localStorage Chrome API chrome.storage 存储在系统磁盘，适合少量数据 Web SQL Database 存储在系统磁盘，适合大量数据 脚本运行范围 background 安装插件后运行 content_scripts 在网页加载后引入到网站内 html内导入的脚本 运行于该html页面 Action 入口 地址栏右侧图标外 browser_action 可显示badge 右键菜单 chrome.contextMenus 可在background中创建 地址栏右侧图标内外 page_action 新版的已更改显示在外围 PageAction API 多功能框 omnibox 对地址框进行监听 overrides 如, 管理书签/历史记录/新标签页等 (一个扩展只能替换一个页面) 桌面提醒 webkitNotifications.createNotification 权限 相当一部分Chrome API 使用需要在Manifest申明权限 页面间通信 eg: popup与background，可使用Chrome API chrome.runtime i18 CSS __MSG_@@key JS chrome.i18n.getMessage(‘key’); 关于打包 &amp; 发布 扩展程序中进行打包，生成.crx(扩展程序) &amp; .pem(秘钥重要) 前往Chrome 开发者中心 认证需支付5美元用于认证 把.pem更名为key.pem并放入源码文件夹中，打包为.zip文件 上传 并编辑 (必填 (扩展描述、ICON(128x128)、扩展截图(1280x800 or 640x400)、类别、语言)) 如有遗漏或错误欢迎补充..","raw":null,"content":null,"categories":[{"name":"IDE","slug":"IDE","permalink":"http://hocg.in/categories/IDE/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"http://hocg.in/tags/HTML5/"},{"name":"Chrome","slug":"Chrome","permalink":"http://hocg.in/tags/Chrome/"}]},{"title":"关于log4j报错","slug":"关于log4j报错","date":"2017-01-16T00:09:27.000Z","updated":"2017-02-04T05:57:15.000Z","comments":true,"path":"2017/01/16/关于log4j报错/","link":"","permalink":"http://hocg.in/2017/01/16/关于log4j报错/","excerpt":"Java开发中经常遇到日志冲突或者异常, 彻底的来此追根究底.","keywords":null,"text":"Java开发中经常遇到日志冲突或者异常, 彻底的来此追根究底. 日志历史 log4j JCL + log4j SLF4J slf4j-XXX-version.jar [XXX指代log4j12, jdk14, jcl, nop 等] slf4j-api v1 log4j 早期直接实现日志打印v2 JCL + log4j 动态绑定, 面向JCL 接口实现的log4jv3 slf4j-api 提供 SLF4J接口 面向对象编程slf4j-XXX-version.jar 对接口和指定XXX种类日志的具体实现 slf4j 举例jar log4j-over-slf4j.jar 把log4j转为slf4j slf4j-log4j12.jar 以slf4j标准实现的log4j12 XXX-over-slf4j.jar 把日志重定向到slf4j eg.jcl-over-slf4j.jar 总结即.Component | | log to Apache Commons Logging V jcl-over-slf4j.jar — (redirect) —&gt; SLF4j —&gt; slf4j-log4j12-version.jar —&gt; log4j.jar —&gt; 输出日志解释:JCL实现的重定向为SLF4J日志形式, 然后SLF4J转为Log4j12输出!","raw":null,"content":null,"categories":[{"name":"Coder","slug":"Coder","permalink":"http://hocg.in/categories/Coder/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://hocg.in/tags/JAVA/"}]},{"title":"Redis 相关","slug":"Redis-相关","date":"2016-10-20T01:15:51.000Z","updated":"2017-02-04T05:47:13.000Z","comments":true,"path":"2016/10/20/Redis-相关/","link":"","permalink":"http://hocg.in/2016/10/20/Redis-相关/","excerpt":"Redis 的部署和部位设计的实践, 还有常见问题的梳理! 💪","keywords":null,"text":"Redis 的部署和部位设计的实践, 还有常见问题的梳理! 💪 前言官网 详情默认项 端口 6379 目录结构redis-3.2.4/|– redis.conf redis配置文件-- src编译后目录|-- redis-server启动bit文件`-- redis-cli终端bit文件` 安装 以下操作均在/opt1234567# 下载wget http://download.redis.io/releases/redis-3.2.4.tar.gz# 解压tar -zxvf redis-3.2.4.tar.gzcd redis-3.2.4# 编译， 生成`src`目录make 指令 以下操作均在/opt1234# 默认配置运行./redis-3.2.4/src/redis-server# 指定配置文件运行./redis-3.2.4/src/redis-server [config file] 疑问？ 如何使redis后台运行? 更改配置文件, 找到daemonize字段,更改no为yes, 重启redis 切记！要指定配置文件 如何更改redis默认6379端口? 更改配置文件, 找到port字段,更改为指定端口, 重启redis 切记！要指定配置文件 如何设置redis的验证密码? 更改配置文件, 找到requirepass字段, 设置相应的验证密码, 重启redis 切记！要指定配置文件由于增加了验证密码，因此客户端连接命令为redis-cli –a [upassword]","raw":null,"content":null,"categories":[{"name":"Server","slug":"Server","permalink":"http://hocg.in/categories/Server/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://hocg.in/tags/Tips/"},{"name":"Redis","slug":"Redis","permalink":"http://hocg.in/tags/Redis/"}]},{"title":"Ngrok使用指南","slug":"Ngrok使用指南","date":"2016-08-30T23:15:24.000Z","updated":"2017-02-04T05:39:31.000Z","comments":true,"path":"2016/08/31/Ngrok使用指南/","link":"","permalink":"http://hocg.in/2016/08/31/Ngrok使用指南/","excerpt":"Ngrok 是一款内部端口转发，对于微信类似的开发很有用的😆可参照墙内(花生壳 or nat123)","keywords":null,"text":"Ngrok 是一款内部端口转发，对于微信类似的开发很有用的😆可参照墙内(花生壳 or nat123) 概述编译环境:Go 1.4.1 强烈建议根域名: web.hocg.in,即生成的域名为*.web.hocg.in文件结构:ngrok ├── bin │ └── ngrok.cfg ├── client.sh ├── code.sh └── server.sh部署环境:服务器OS: Ubuntu-15客户端OS: Ubuntu-16 安装环境依赖及源码下载 以下命令根目录统一在/opt 12345# 环境依赖sudo apt-get install build-essential golang mercurial git# 获取 ngrok 源码git clone https://github.com/tutumcloud/ngrok.git ngrokcd ngrok 生成证书 &amp;&amp; 编译 以下命令根目录统一在/opt/ngrok code.sh文件 生成证书 &amp;&amp; 编译服务端DOMAIN 为配置的根域名, 用于签名. 1234567891011121314151617181920212223#!/bin/bashecho &quot;开始清除..&quot;rm -rf assets/client/tls/ngrokroot.crtrm -rf assets/server/tls/snakeoil.crtrm -rf assets/server/tls/snakeoil.keyrm -rf device.*rm -rf rootCA.*DOMAIN=web.hocg.inecho &quot;设置域名为[*.$DOMAIN]&quot;echo &quot;开始生成秘钥..&quot;openssl genrsa -out rootCA.key 2048openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=$DOMAIN&quot; -days 5000 -out rootCA.pemopenssl genrsa -out device.key 2048openssl req -new -key device.key -subj &quot;/CN=$DOMAIN&quot; -out device.csropenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000echo &quot;开始迁移秘钥..&quot;cp -rf rootCA.pem assets/client/tls/ngrokroot.crtcp -rf device.crt assets/server/tls/snakeoil.crtcp -rf device.key assets/server/tls/snakeoil.keyecho &quot;开始编译..&quot;make release-server 客户端 前置条件: Go需先增加对这些平台交叉编译的支持 Windowsgo的src目录 1GOOS=windows GOARCH=amd64 ./make.bash nginx目录,编译1GOOS=windows GOARCH=amd64 make release-client macOSgo的src目录 1GOOS=darwin GOARCH=amd64 ./make.bash nginx目录,编译1GOOS=darwin GOARCH=amd64 make release-client Linuxnginx目录,编译1make release-client 配置文件ngrok.cfg文件 server_addr 为配置的根域名， 4443为默认端口 12server_addr: web.hocg.in:4443trust_host_root_certs: false 运行文件server.sh文件 服务器运行DOMAIN 为配置的根域名.注释的那一句用于后台运行 1234567#!/bin/bash# $1 HTTP# $2 HTTPSkillall ngrokdDOMAIN=web.hocg.in# nohup ./bin/ngrokd -domain=&quot;$DOMAIN&quot; -httpAddr=&quot;:$1&quot; -httpsAddr=&quot;:$2&quot; &gt;/tmp/ngrok.log 2&gt;&amp;1 &amp;./bin/ngrokd -domain=&quot;$DOMAIN&quot; -httpAddr=&quot;:$1&quot; -httpsAddr=&quot;:$2&quot; client.sh文件 客户端运行, default:linux具体环境修改具体内容 1234#!/bin/bash# $1 Port# $2 domain./bin/ngrok -subdomain $2 -proto=http -config=./bin/ngrok.cfg $1 使用 若需变更域名, 需修改code.sh的DOMAIN、server.sh的DOMAIN与./bin/ngrok.cfg的server_addr 编译1sh code.sh 成功 检查ngrok/bin文件夹是否存在ngrok and ngrokd 服务端1sh server.sh 8888 9999 客户端1sh client.sh 8080 dm 检验访问:http://dm.web.hocg.in:8888 重要关于域名解析eg. *.web.hocg.in路径解析需配置*.web and web 两个A记录 关于签名最好在同一环境进行服务端和客户端的编译 小技巧 如何让服务端的ngrok后台运行 正常的nohup或&amp;是无法使ngrok后台运行的需使用screen 123456789# 安装\\# apt-get install screen# 使用screen -S [命名] [需放入后台的命令]# 使用 ctrl+A+D 让其运行在后台# 查看screen 后台进程screen -ls# 重新连接后台进程screen -r [进程id] 可能遇到的异常 Go-1.2.1语言版本不支持go version12345# github.com/gorilla/websocketsrc/github.com/gorilla/websocket/client.go:361: unknown tls.Config field &apos;GetCertificate&apos; in struct literalsrc/github.com/gorilla/websocket/client.go:370: unknown tls.Config field &apos;ClientSessionCache&apos; in struct literalsrc/github.com/gorilla/websocket/client.go:373: unknown tls.Config field &apos;CurvePreferences&apos; in struct literalmake: *** [client] Error 2 官方Go-64的安装 Go编译器找不到go-bindata123GOOS=&quot;&quot; GOARCH=&quot;&quot; go get github.com/jteeuwen/go-bindata/go-bindata/bin/sh: 1: go: not foundmake: *** [bin/go-bindata] Error 127 请注意配置好GOROOT和GOPATH GOROOT为安装GO的目录GOPATH自定义一个GO插件下载目录 执行以下shell下载插件 1go get -u github.com/jteeuwen/go-bindata/... END:)","raw":null,"content":null,"categories":[{"name":"Server","slug":"Server","permalink":"http://hocg.in/categories/Server/"}],"tags":[{"name":"Ngrok","slug":"Ngrok","permalink":"http://hocg.in/tags/Ngrok/"},{"name":"Tip","slug":"Tip","permalink":"http://hocg.in/tags/Tip/"}]},{"title":"Nexus 入门","slug":"Nexus入门","date":"2016-08-24T11:03:01.000Z","updated":"2016-10-26T09:01:49.000Z","comments":true,"path":"2016/08/24/Nexus入门/","link":"","permalink":"http://hocg.in/2016/08/24/Nexus入门/","excerpt":"适合nexus入门，不是手机，不是手机，不是手机 ．．ｏ（╯□╰）ｏ","keywords":null,"text":"适合nexus入门，不是手机，不是手机，不是手机 ．．ｏ（╯□╰）ｏ 环境 Ubuntu-14.04.1 jdk1.8.0_102 nexus-2.12.0-01|官网 域名:nexus.hocg.in 前置条件 安装完jdk并配置好环境变量 eg: java查看是否成功 安装温馨提示: 以下操作都是在/opt目录下 下载&amp;解压123456# 下载wget https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.12.0-01-bundle.tar.gz# 解压tar -zxvf nexus-2.12.0-01-bundle.tar.gz# 清理rm -rf *.gz 文件/目录详解 nexus-2.12.0-01 程序目录 sonatype-work 仓库目录(内包含仓库配置及jar包仓库) 基本操作1./nexus-2.12.0-01/bin/nexus &#123; console | start | stop | restart | status | dump &#125; 访问 http://nexus.hocg.in:8081/nexus 默认账号:admin 默认密码: admin123 如何使用Maven 中配置仓库1234567&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;Nexus&lt;/id&gt; &lt;name&gt;Nexus&lt;/name&gt; &lt;url&gt;http://nexus.hocg.in:8081/nexus/content/groups/public/&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; 问题如何修改默认8081端口12vim /opt/nexus-2.12.0-01/conf/nexus.properties# 修改application-port=8081项 如何创建用户登陆系统后，左侧Security &gt; Users中创建 如何使用构建账号修改Settings.xml文件 (Maven)1234567&lt;servers&gt; &lt;server&gt; &lt;id&gt;nexus.hocg.in&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt; &lt;/server&gt;&lt;/servers&gt; 如何修改用户密码登陆系统后，顶部点击用户名 &gt; Profile中修改 如何建立与中央仓库的索引 Note: Nexus会自动建立任务计划,一般远程仓库都比较大，构建会比较多，因此索引文件会很大，请确保磁盘大小充足. 可能出现的报错 1 WARNING - NOT RECOMMENDED TO RUN AS ROOT , 原因是提醒你是否确认用root用户运行12345678\\# ./nexus-2.12.0-01/bin/nexus restart****************************************WARNING - NOT RECOMMENDED TO RUN AS ROOT****************************************Stopping Nexus OSS...Nexus OSS was not running.Starting Nexus OSS...Started Nexus OSS. 解决:1234567891011vim ./nexus-2.12.0-01/bin/nexus# 加入系统变量vi /etc/profile# 加入export RUN_AS_USER=root# 修改RUN_AS_USER=root# 启动./nexus-2.12.0-01/bin/nexus start# 查看是否启动成功./nexus-2.12.0-01/bin/nexus status# 稍等几分钟再访问","raw":null,"content":null,"categories":[{"name":"Server","slug":"Server","permalink":"http://hocg.in/categories/Server/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://hocg.in/tags/Tips/"},{"name":"Nexus","slug":"Nexus","permalink":"http://hocg.in/tags/Nexus/"}]},{"title":"Android L 及以上版本Rom包中提取apk","slug":"Android-L-及以上版本Rom包中提取apk","date":"2016-08-07T11:19:29.000Z","updated":"2016-08-27T05:39:29.000Z","comments":true,"path":"2016/08/07/Android-L-及以上版本Rom包中提取apk/","link":"","permalink":"http://hocg.in/2016/08/07/Android-L-及以上版本Rom包中提取apk/","excerpt":"提取想要的apk， 例如CM ROM包中的含天气的时钟不错！","keywords":null,"text":"提取想要的apk， 例如CM ROM包中的含天气的时钟不错！ 以往版本 Android Rom包只需解压后，取出system包即可取出内部apk Now 解压后可以发现，文件发生了改变并且system.new.dat此文件是不支持直接解压的。 环境系统: win10工具: 下载 环境自备 操作步骤 普通方式解压ROM 运行下载工具中.bat文件Extractor.bat 根据提示选择1，并复制system.new.dat, system.transfer.list，file_contexts三个文件到bat文件所在目录 按任意键继续 完成后可以得到一个system文件夹 嘿嘿嘿.. 问题! 有可能在你安装apk的时候出现应用未安装的情况 可以尝试重新对apk进行签名 检查是否已经安装过该apk End","raw":null,"content":null,"categories":[{"name":"Mobile","slug":"Mobile","permalink":"http://hocg.in/categories/Mobile/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://hocg.in/tags/Android/"},{"name":"Tips","slug":"Tips","permalink":"http://hocg.in/tags/Tips/"}]},{"title":"模块设计之对接同步订单模块","slug":"模块设计之对接同步订单模块","date":"2016-08-02T02:47:06.000Z","updated":"2017-02-04T05:42:52.000Z","comments":true,"path":"2016/08/02/模块设计之对接同步订单模块/","link":"","permalink":"http://hocg.in/2016/08/02/模块设计之对接同步订单模块/","excerpt":"实习期间设计的对接同步订单的某块, 缅怀..设计日期(2016.6)","keywords":null,"text":"实习期间设计的对接同步订单的某块, 缅怀..设计日期(2016.6) 前言 #对接同步订单模块# 该部分是我入职后自主设计的一个模块，因为初期预计对接5家平台的订单，并考虑到后期可能对接更多平台和平台订单数量等，所以扩展性和性能方面是很值得深思的问题。 开发周期 (20day) 前期需求的多次变更，大大的浪费了开发周期. 库表设计 接口整理和整合设计(主要是对接平台的接口整合等) 代码编写 业务流程图表 商品表,存储商品信息, 主要配合方案匹配 授权表,存储用户授权信息，主要用于token管理 平台配置表,存储平台key信息 方案表,已存在，存储方案信息 v1版思路图 业务图 原先，该部分设计是不考虑对订单数据进行缓存处理的，但后期需求多次变更被迫进行数据缓存，因此再原先的基础上建立了线程池并对同步订单部分进行异步线程处理，因此增加了一张订单缓存表和事件队列表。 v2版思路图 业务图 后面又对缓存表进行了数据去重防止表数据爆炸性增长。 总结 把公共抽离出来，中间新增转化层可以很好的解决代码复用的问题. Ծ‸Ծ 多运动,保持60kg.","raw":null,"content":null,"categories":[{"name":"Coder","slug":"Coder","permalink":"http://hocg.in/categories/Coder/"}],"tags":[{"name":"设计思路","slug":"设计思路","permalink":"http://hocg.in/tags/设计思路/"},{"name":"Java","slug":"Java","permalink":"http://hocg.in/tags/Java/"}]},{"title":"模块设计之消息模块","slug":"模块设计之消息模块","date":"2016-07-30T11:25:56.000Z","updated":"2016-08-27T05:34:33.000Z","comments":true,"path":"2016/07/30/模块设计之消息模块/","link":"","permalink":"http://hocg.in/2016/07/30/模块设计之消息模块/","excerpt":"新手上路，小心撞车..","keywords":null,"text":"新手上路，小心撞车.. 前言 #消息模块# 这是我刚入职时所接触的第一个模块，也算是比较大的模块了。这个模块的业务是负责整个项目所有的消息出入口，包含短信发送，APP推送，邮件发送以及前后端人员站内消息。当时设计的时候需求架构比较简单而且时间紧迫(π__π)，没有从根本理清业务和功能后期存在的扩展。因此，这篇文章是记录当时架构的思路和需要改善的地方。 开发周期 (10day) 库表设计 接口整理和整合设计(短信&amp;友盟&amp;邮件等) 代码编写 业务流程图表 消息记录表, 主要负责消息出入口记录 事件触发表, 主要对消息进行控制，例如: 触发订单变更推送到用户/运营人员 and so on 消息状态表, 主要负责消息发送的状态，包含定时发送，撤销发送 and so on 图 类流程图 如图，此模式主要是利用工厂模式, 提供多种消息通道实例，由不同的消息通道对自身通道消息进行处理，类似于把西瓜，牛肉，白菜等送入不同的工厂进行加工，但是又由食品质量控制中心对其进行记录和检验。 优点: 后期便于扩展更多的通道模式缺点: 各个模式是靠类型区别的，不便于进行细节化处理(例如，对某部分APP推送进行定制化，进入某个Activity等细节化定制) 进一步优化类流程图 使用Route进行更细节的定制化处理更多实战，推荐 图 囧，单看图可能细分不出两者的差别，附上一段代码实例 123456789101112131415// 路由规则初始化，用于定义匹配规则NoticeRouter router = new NoticeRouter();route.rule() .noticeType(Notice.SMS) // ... 更多细节规则匹配 .handler(smsHandler) .end() .rule() .noticeType(Notice.EMail) // ... 更多细节规则匹配 .handler(emailHandler) .end()// 将通知实体通知路由处理router.route(message) 总结 充分考虑后期业务需求 (就算非必须的业务需求) 不要妄想需求是恒久不变的，需求=小三，扩展=真爱 Ծ‸Ծ 多喝水,保持良好的状态.","raw":null,"content":null,"categories":[{"name":"Coder","slug":"Coder","permalink":"http://hocg.in/categories/Coder/"}],"tags":[{"name":"设计思路","slug":"设计思路","permalink":"http://hocg.in/tags/设计思路/"},{"name":"Java","slug":"Java","permalink":"http://hocg.in/tags/Java/"}]},{"title":"Mac的使用","slug":"Mac-使用","date":"2016-07-02T02:47:06.000Z","updated":"2016-08-27T05:29:43.000Z","comments":true,"path":"2016/07/02/Mac-使用/","link":"","permalink":"http://hocg.in/2016/07/02/Mac-使用/","excerpt":"留坑，刚刚起步，梳理中ing。","keywords":null,"text":"留坑，刚刚起步，梳理中ing。 小技巧 在Dock 隐藏 iTerm2隐藏:1/usr/libexec/PlistBuddy -c &quot;Add :LSUIElement bool true&quot; /Applications/iTerm.app/Contents/Info.plist 显示:1/usr/libexec/PlistBuddy -c &quot;Delete :LSUIElement&quot; /Applications/iTerm.app/Contents/Info.plist","raw":null,"content":null,"categories":[{"name":"OS","slug":"OS","permalink":"http://hocg.in/categories/OS/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://hocg.in/tags/Tips/"},{"name":"Mac","slug":"Mac","permalink":"http://hocg.in/tags/Mac/"}]},{"title":"谈JVM，字节码","slug":"谈JVM-字节码","date":"2016-06-12T11:37:49.000Z","updated":"2016-08-27T05:35:58.000Z","comments":true,"path":"2016/06/12/谈JVM-字节码/","link":"","permalink":"http://hocg.in/2016/06/12/谈JVM-字节码/","excerpt":"谈谈JVM，最近在研究破解jar，有这方面经验的麻烦指导一下思路..","keywords":null,"text":"谈谈JVM，最近在研究破解jar，有这方面经验的麻烦指导一下思路.. 参考参考1指令整理 常用指令123# 反编译查看`类文件`所有信息javap -verbose [class] 局部变量类型 特殊字符表示 类型 描述 c char char类型 i int int类型 l long long类型 s short short类型 b byte byte类型 f float float类型 z boolean 布尔类型 a reference 引用 方法信息12345L1 LOCALVARIABLE this LMain; L0 L1 0 LOCALVARIABLE a I L0 L1 1 MAXSTACK = 0 MAXLOCALS = 2 局部变量参数 LOCALVARIABLE局部表大小 MAXLOCALS操作数栈大小 MAXSTACK 指令运算指令 算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。 加法指令:iadd,ladd,fadd,dadd 减法指令:isub,lsub,fsub,dsub 乘法指令:imul,lmul,fmul,dmul 除法指令:idiv,ldiv,fdiv,ddiv 求余指令:irem,lrem,frem,drem 取反指令:ineg,leng,fneg,dneg 位移指令:ishl,ishr,iushr,lshl,lshr,lushr 按位或指令:ior,lor 按位与指令:iand,land 按位异或指令:ixor,lxor 局部变量自增指令:iinc 比较指令:dcmpg,dcmpl,fcmpg,fcmpl,lcmp 加载和存储指令 用于局部变量表和操作数栈之间来回传输 将一个局部变量加载到操作数栈的指令包括：iload,iload_&lt;n&gt;，lload、lload_&lt;n&gt;、float、fload_&lt;n&gt;、dload、dload_&lt;n&gt;，aload、aload_&lt;n&gt;。 将一个数值从操作数栈存储到局部变量标的指令：istore,istore_&lt;n&gt;,lstore,lstore_&lt;n&gt;,fstore,fstore_&lt;n&gt;,dstore,dstore_&lt;n&gt;,astore,astore_&lt;n&gt; 将常量加载到操作数栈的指令：bipush,sipush,ldc,ldc_w,ldc2_w,aconst_null,iconst_ml,iconst_&lt;i&gt;,lconst_&lt;l&gt;,fconst_&lt;f&gt;,dconst_&lt;d&gt; 局部变量表的访问索引指令:wide 一部分以尖括号结尾的指令代表了一组指令，如iload_&lt;i&gt;，代表了iload_0,iload_1等，这几组指令都是带有一个操作数的通用指令。 运算指令 对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶 加法指令:iadd,ladd,fadd,dadd 减法指令:isub,lsub,fsub,dsub 乘法指令:imul,lmul,fmul,dmul 除法指令:idiv,ldiv,fdiv,ddiv 求余指令:irem,lrem,frem,drem 取反指令:ineg,leng,fneg,dneg 位移指令:ishl,ishr,iushr,lshl,lshr,lushr 按位或指令:ior,lor 按位与指令:iand,land 按位异或指令:ixor,lxor 局部变量自增指令:iinc 比较指令:dcmpg,dcmpl,fcmpg,fcmpl,lcmp 类型转换指令 将两种Java虚拟机数值类型相互转换 JVM支持宽化类型转换(小范围类型向大范围类型转换)： int类型到long,float,double类型 long类型到float,double类型 float到double类型 对象创建与操作 虽然类实例和数组都是对象，Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令。 创建实例的指令:new 创建数组的指令:newarray,anewarray,multianewarray 访问字段指令:getfield,putfield,getstatic,putstatic 把数组元素加载到操作数栈指令:baload,caload,saload,iaload,laload,faload,daload,aaload 将操作数栈的数值存储到数组元素中执行:bastore,castore,castore,sastore,iastore,fastore,dastore,aastore 取数组长度指令:arraylength 检查实例类型指令:instanceof,checkcast 操作数栈管理指令直接操作操作数栈的指令：pop,pop2,dup,dup2,dup_x1,dup2_x1,dup_x2,dup2_x2和swap NOTE: 压入栈顶(DUP)/弹出栈顶(POP) 控制转移指令 条件分支:ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnotnull,if_cmpeq,if_icmpne,if_icmlt,if_icmpgt等 复合条件分支:tableswitch,lookupswitch 无条件分支:goto,goto_w,jsr,jsr_w,ret 方法调用和返回指令 invokevirtual指令:调用对象的实例方法，根据对象的实际类型进行分派(虚拟机分派)。 invokeinterface指令:调用接口方法，在运行时搜索一个实现这个接口方法的对象，找出合适的方法进行调用。 invokespecial:调用需要特殊处理的实例方法，包括实例初始化方法，私有方法和父类方法 invokestatic:调用类方法(static) 方法返回指令是根据返回值的类型区分的，包括ireturn(返回值是boolean,byte,char,short和int),lreturn,freturn,drturn和areturn，另外一个return供void方法，实例初始化方法，类和接口的类初始化i方法使用。 同步Eg:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// class version 52.0 (52)// access flags 0x21public class Main &#123; // compiled from: Main.java // access flags 0x11 public final I simpleField = 100 // access flags 0x0 &lt;init&gt;()V L0 LINENUMBER 12 L0 ALOAD 0 INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V L1 LINENUMBER 10 L1 ALOAD 0 BIPUSH 100 PUTFIELD Main.simpleField : I L2 LINENUMBER 13 L2 GETSTATIC java/lang/System.out : Ljava/io/PrintStream; BIPUSH 100 INVOKEVIRTUAL java/io/PrintStream.print (I)V L3 LINENUMBER 14 L3 RETURN L4 LOCALVARIABLE this LMain; L0 L4 0 MAXSTACK = 2 MAXLOCALS = 1 // access flags 0x9 public static main([Ljava/lang/String;)V L0 LINENUMBER 16 L0 NEW Main DUP INVOKESPECIAL Main.&lt;init&gt; ()V ASTORE 1 L1 LINENUMBER 17 L1 GETSTATIC java/lang/System.out : Ljava/io/PrintStream; LDC &quot;--&gt;&quot; INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V L2 LINENUMBER 19 L2 RETURN L3 LOCALVARIABLE args [Ljava/lang/String; L0 L3 0 LOCALVARIABLE main LMain; L1 L3 1 MAXSTACK = 2 MAXLOCALS = 2 // access flags 0x21 public synchronized a(I)V throws java/lang/Exception L0 LINENUMBER 23 L0 RETURN L1 LOCALVARIABLE this LMain; L0 L1 0 LOCALVARIABLE a I L0 L1 1 MAXSTACK = 0 MAXLOCALS = 2&#125;","raw":null,"content":null,"categories":[{"name":"Coder","slug":"Coder","permalink":"http://hocg.in/categories/Coder/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://hocg.in/tags/Java/"},{"name":"JVM","slug":"JVM","permalink":"http://hocg.in/tags/JVM/"}]},{"title":"谈JVM，各种过程","slug":"谈JVM-各种过程","date":"2016-06-12T11:37:49.000Z","updated":"2016-08-27T05:35:49.000Z","comments":true,"path":"2016/06/12/谈JVM-各种过程/","link":"","permalink":"http://hocg.in/2016/06/12/谈JVM-各种过程/","excerpt":"谈谈JVM 各种过程， XMind等我整理一下，稍后贴出 囧～欢迎指教..update: 2016-08-03 14:44:12 更新了图","keywords":null,"text":"谈谈JVM 各种过程， XMind等我整理一下，稍后贴出 囧～欢迎指教..update: 2016-08-03 14:44:12 更新了图 总思路编译过程 -&gt; 运行过程[类加载器过程(类的装载过程) -&gt; 执行过程] 图 编译过程.java文件 -javac编译-&gt; .class文件 {-JIT编译(转化+优化)-&gt; 本地方法}[执行过程，当方法执行频率高] 图 运行过程类加载器 -&gt; (执行引擎 -&gt; 本地库接口)[Java 运行时数据区] -&gt; 本地方法库 图 类加载器过程[启动]类加载器(JNI) -&gt; [扩展]类加载器 -&gt; [系统]类加载器 -&gt; [自定义]类加载器 图 类装载过程加载文件到JVM内存 -&gt; (校验语言规范 -&gt; 分配结构存储类的信息 -&gt; 该类常量池中符号更改为直接引用)[Linking] -&gt; 类初始化 图 执行引擎执行过程(逐行读取指令)Thread启动 -生成-&gt; JVM栈 -执行方法-&gt; 压入栈帧(包含 局部变量数组&amp;操作数栈&amp;运行时常量池) -&gt; 逐行读取指令&amp;&amp;解释(JVM栈帧 程序计数器存放下一条指令) -&gt; {JIT(转化+优化)-&gt; 本地方法}[当方法执行频率高] -执行&amp;运算-&gt; 结果(存放 操作数栈中) -&gt; 推出栈帧 图 Java 运行时数据区(贯穿整个执行过程)共享型数据区：方法区(含运行时常量池[存放方法&amp;变量的实际地址])、堆(存放对象实例)隔离型数据区：JVM 栈、本地方法栈(JNI)、程序计数器 图","raw":null,"content":null,"categories":[{"name":"Coder","slug":"Coder","permalink":"http://hocg.in/categories/Coder/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://hocg.in/tags/Java/"},{"name":"JVM","slug":"JVM","permalink":"http://hocg.in/tags/JVM/"}]},{"title":"关于HTTPS","slug":"Https-签证","date":"2016-06-02T03:22:43.000Z","updated":"2017-02-04T05:37:54.000Z","comments":true,"path":"2016/06/02/Https-签证/","link":"","permalink":"http://hocg.in/2016/06/02/Https-签证/","excerpt":"这是一篇关于HTTPS的日常使用记录，例如:博客HTTPS化~来吧!年轻人!装逼HTTPS时代到了","keywords":null,"text":"这是一篇关于HTTPS的日常使用记录，例如:博客HTTPS化~来吧!年轻人!装逼HTTPS时代到了 关于https什么是HTTPS ? 通俗的讲：隐私安全 GitHub page 使用https主要是使用 Kloudsec 申请账号，填入待解析的域名 把DNS解析转到该网站提供的地址 验证邮箱并填入GitHub page IP 开启相关服务 PROTECTION -&gt; SSL Encryption PLUGIN STORE成品NOTE: 2016年09月04日 发现Kloudsec已经倒闭了现在使用的是Cloudflare具体使用注册时有引导教程(需把域名解析服务器改为cloudflare的). 自己搭建的blog免费的使用 Startssl成品 TOMCAT 配置https环境 keytool 教程外网回调可尝试使用nat123 自己VPS使用HTTPSLet’s Encrypt :)","raw":null,"content":null,"categories":[{"name":"Server","slug":"Server","permalink":"http://hocg.in/categories/Server/"}],"tags":[{"name":"HTTPS","slug":"HTTPS","permalink":"http://hocg.in/tags/HTTPS/"}]},{"title":"绿化NodeJS for linux版","slug":"绿化nodejs-for-linux版","date":"2016-04-25T01:38:49.000Z","updated":"2016-08-27T05:35:32.000Z","comments":true,"path":"2016/04/25/绿化nodejs-for-linux版/","link":"","permalink":"http://hocg.in/2016/04/25/绿化nodejs-for-linux版/","excerpt":"起因，为了方便hexo发布博客，所以想把NodeJS绿化在U盘上..谁叫网上只有win版的呢！自己码起来～绿化 o(╯□╰)o","keywords":null,"text":"起因，为了方便hexo发布博客，所以想把NodeJS绿化在U盘上..谁叫网上只有win版的呢！自己码起来～绿化 o(╯□╰)o 目录结构12345678Green4nodeJS├── hocgin.github.io // github博客目录├── node // nodejs基本目录│ ├── node-linux // nodejs源文件│ ├── cache // 创建一个空文件夹，即可│ ├── init-module // 创建一个空文件夹，即可│ └── userconfig // 创建一个空文件夹，即可└── init.sh // 初始化shell文件 *重要 初始化文件 主要是加载配置环境，初始化变量 init.sh 内容123456789101112131415161718#!/bin/bash# Author: hocgin@gmail.com# -------------Use--------------# source init.sh or . init.sh# ------------------------------NOW_PATH=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)NODE_NAME=&quot;node-linux&quot;NODE_HOME=$NOW_PATH&quot;/node/&quot;$NODE_NAMENODE_PATH=$NODE_HOME&quot;/bin&quot;NPM_PATH=$NODE_HOME&quot;/lib/node_modules/npm/bin&quot;sudo chmod +x -R $NPM_PATH&quot;/.&quot;export PATH=$PATH:$NODE_PATH:$NPM_PATH# &quot;/home/hocgin/.npmrc&quot;npm set userconfig $NOW_PATH&quot;/node/userconfig&quot;# &quot;/home/hocgin/.npm-init.js&quot;npm set init-module $NOW_PATH&quot;/node/init-module&quot;# &quot;/home/hocgin/.npm&quot;npm set cache $NOW_PATH&quot;/node/cache&quot; 修改 /node/node-linux/lib/node_modules/npm/bin/npm 文件12# NPM_CLI_JS=&quot;$basedir/node_modules/npm/bin/npm-cli.js&quot;NPM_CLI_JS=&quot;$basedir/npm-cli.js&quot; 完成 使用方法123456source init.sh# Or. init.shcd hocgin.github.io# 尽情hexo吧 注: 安装module时请加上 -g End","raw":null,"content":null,"categories":[{"name":"Coder","slug":"Coder","permalink":"http://hocg.in/categories/Coder/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://hocg.in/tags/Tips/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://hocg.in/tags/Ubuntu/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://hocg.in/tags/NodeJS/"}]},{"title":"使用Maven下载jar包 linux版","slug":"使用Maven下载jar包-linux版","date":"2016-04-25T01:38:49.000Z","updated":"2017-02-04T05:43:57.000Z","comments":true,"path":"2016/04/25/使用Maven下载jar包-linux版/","link":"","permalink":"http://hocg.in/2016/04/25/使用Maven下载jar包-linux版/","excerpt":"这只是学习Shell的小脚本, 练手工具罢了.. 折腾!折腾啊","keywords":null,"text":"这只是学习Shell的小脚本, 练手工具罢了.. 折腾!折腾啊 目录结构123Green4nodeJS├── down.sh // 下载shell，o(╯□╰)o其实就是一条shell└── pom.xml // 正常maven配置 文件内容down.sh 内容：1234567891011#!/bin/sh# Author: hocgin@gmail.com# -------------Use--------------# sh down.sh# ------------------------------# 运行pom.xml 下载jarNOW_PATH=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)POM_XML=$NOW_PATH&quot;/pom.xml&quot;TARGET_DIR=$NOW_PATH&quot;/target&quot;mvn -f $POM_XML dependency:copy-dependenciessudo chmod -R 777 $TARGET_DIR pom.xml 内容： 正常maven的pom.xml内容 1234567891011121314151617181920&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;!-- 项目的名称 start --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;temp.download&lt;/groupId&gt; &lt;artifactId&gt;temp-download&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!-- 项目的名称 end --&gt; &lt;dependencies&gt; &lt;!-- 要下载的jar start --&gt; &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20160212&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 要下载的jar end --&gt; &lt;/dependencies&gt;&lt;/project&gt; 完成 使用方法123456source init.sh# Or. init.shcd hocgin.github.io# 尽情hexo吧 End","raw":null,"content":null,"categories":[{"name":"Coder","slug":"Coder","permalink":"http://hocg.in/categories/Coder/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://hocg.in/tags/Tips/"},{"name":"Maven","slug":"Maven","permalink":"http://hocg.in/tags/Maven/"},{"name":"Shell","slug":"Shell","permalink":"http://hocg.in/tags/Shell/"}]},{"title":"hexo 功能扩展","slug":"hexo-功能扩展","date":"2016-03-26T05:44:28.000Z","updated":"2017-02-04T05:34:09.000Z","comments":true,"path":"2016/03/26/hexo-功能扩展/","link":"","permalink":"http://hocg.in/2016/03/26/hexo-功能扩展/","excerpt":"这是自己参照hexo进行私人订制的教程，也是实战的记录，感觉还不错，成品可参照本博客.. （如果我以后没换的话😶）","keywords":null,"text":"这是自己参照hexo进行私人订制的教程，也是实战的记录，感觉还不错，成品可参照本博客.. （如果我以后没换的话😶） 须知站点目录: /主题目录: /themes/[主题名]主题配置文件: /themes/[主题名]/_config.yml站点配置文件: /_config.yml 添加微信公众号二维码首先，打开主题目录下的 layout/_macro/post.swig然后，找到节点footer加入以下代码1234567891011121314&lt;! -- 添加微信图标 start --&gt; &#123;% if theme.wechat_subscriber.enable %&#125; &#123;% if !is_home() %&#125; &lt;div class=\"hocgin-container\"&gt; &lt;div class=\"folder\"&gt; &lt;div class=\"paper\"&gt; &lt;img width=\"100%\" src=\"&#123;&#123; theme.wechat_subscriber.qcode &#125;&#125;\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"hocgin-description\"&gt;&#123;&#123; theme.wechat_subscriber.description &#125;&#125;&lt;/div&gt; &#123;% endif %&#125; &#123;% endif %&#125;&lt;! -- 添加微信图标 end --&gt; 其次，到主题目录下的source/css创建文件夹_hocgin并在它之下创建css文件customize-hocgin.css以下是文件内容：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849.hocgin-container *, *:before, *:after &#123; box-sizing: border-box;&#125;.hocgin-container &#123; position: relative; width: 100%; height: 100%;&#125;.hocgin-container &gt; .folder &#123; width: 220px; height: 180px; left: calc(50% - 110px); top: calc(70% - 90px); position: relative;&#125;.hocgin-container &gt; .folder &gt; .paper &#123; opacity: 1; position: absolute; overflow: hidden; width: 200px; height: 200px; top: calc(50% - 111px); left: calc(50% - 100px); transition: top 0.5s, opacity 0.4s; font-family: Verdana, Tahoma, sans-serif; font-size: 0.1em; padding: 1em; color: #644812; background-color: #fde1ab; -moz-box-shadow: 10px 10px rgba(0, 0, 0, 0.2); -webkit-box-shadow: 10px 10px rgba(0, 0, 0, 0.2); box-shadow: 10px 10px rgba(0, 0, 0, 0.2); -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius: 5px;&#125;.hocgin-container &gt; .folder:hover &gt; .paper &#123; top: calc(50% - 150px);&#125;.hocgin-container &gt; .folder.opened &gt; .paper &#123; top: calc(-250px); opacity: .9;&#125;.hocgin-description &#123; text-align: center; margin-top: 4px;&#125; 保存后，找到主题目录下source/css/main.styl(注：别的主题可能不一样) 追加12// --------------------------------------------------@import \"_hocgin/customize-hocgin.css\"; 最后，修改主题配置文件 追加12345# Customize args -- Hocginwechat_subscriber: enable: true qcode: [url] description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！ 效果http://hocg.in 底部加入打赏功能首先，打开主题目录下的 layout/_macro/post.swig然后，找到节点footer加入以下代码12345678910111213141516171819 &lt;! -- 添加打赏图标 start --&gt; &#123;% if theme.pay_money.enable %&#125; &#123;% if !is_home() %&#125; &lt;div class=\"hocgin-money\"&gt;&lt;div class=\"money-reward\"&gt; 赏 &lt;div class=\"money-pay\"&gt; &lt;img width=\"100%\" src=\"&#123;&#123; theme.pay_money.weixin_qcode &#125;&#125;\"/&gt; &lt;/div&gt; &lt;div class=\"money-pay\"&gt; &lt;img width=\"100%\" src=\"&#123;&#123; theme.pay_money.alipay_qcode &#125;&#125;\"/&gt; &lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;br/&gt; &#123;% endif %&#125; &#123;% endif %&#125; &lt;! -- 添加打赏图标 end --&gt; 其次，到主题目录下的source/css创建文件夹_hocgin并在它之下创建css文件money-customize-hocgin.css以下是文件内容：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859.hocgin-money *, *:before, *:after &#123; box-sizing: border-box;&#125;.hocgin-money &gt; .money-reward &#123; font-size: 2.4rem; line-height: 4.6rem; display: block; width: 4.6rem; height: 4.6rem; margin: 0 auto; padding: 0; -webkit-user-select: none; text-align: center; vertical-align: middle; color: #fff; border: 1px solid #f1b60e; border-radius: 50%; background: #fccd60; background: -webkit-gradient(linear, left top, left bottom, color-stop(0, #fccd60), color-stop(100%, #fbae12), color-stop(100%, #2989d8), color-stop(100%, #207cca)); background: -webkit-linear-gradient(top, #fccd60 0, #fbae12 100%, #2989d8 100%, #207cca 100%); background: linear-gradient(to bottom, #fccd60 0, #fbae12 100%, #2989d8 100%, #207cca 100%); position: relative;&#125;.hocgin-money &gt; .money-reward &gt; .money-pay &#123; position: absolute; overflow: hidden; width: 200px; height: 200px; visibility: hidden; top: calc(50% - 100px); left: calc(50% - 100px); opacity: 0; transition: top 0.5s, opacity 0.4s; font-family: Verdana, Tahoma, sans-serif; font-size: 0.1em; padding: 1em; color: #644812; background-color: #fff; -moz-box-shadow: 0 1px 1px 1px #efefef; -webkit-box-shadow: 0 1px 1px 1px #efefef; box-shadow: 0 1px 1px 1px #efefef; border: 1px solid #e6e6e6;&#125;.hocgin-money &gt; .money-reward:hover &gt; .money-pay &#123; visibility: visible; opacity: 1; z-index: 10;&#125;.hocgin-money &gt; .money-reward:hover &gt; .money-pay:nth-child(1) &#123; top: calc(50% - 250px);&#125;.hocgin-money &gt; .money-reward:hover &gt; .money-pay:nth-child(2) &#123; top: calc(50% + 50px);&#125; 保存后，找到主题目录下source/css/main.styl(注：别的主题可能不一样) 追加12// --------------------------------------------------@import \"_hocgin/money-customize-hocgin.css\"; 最后，修改主题配置文件 追加12345# Customize args -- Hocginpay_money: enable: true weixin_qcode: http://7xs6lq.com1.z0.glb.clouddn.com/img/un/ali.pay.500.png alipay_qcode: http://7xs6lq.com1.z0.glb.clouddn.com/img/un/ali.pay.500.png 已知bug 因为没使用js(也不想使用)，安卓设备需要长按才能出现效果，而苹果设备无法显示效果，欢迎大家修复。┌|*´∀｀|┘ 效果http://hocg.in 防止百度转码主题目录下 \\layout\\_partials\\head.swig12&lt;meta http-equiv=”Cache-Control” content=”no-transform” /&gt;&lt;meta http-equiv=”Cache-Control” content=”no-siteapp” /&gt; 添加搜索功能 2016年06月04日 安装hexo数据生成插件 Json格式的，有利于自主编写(暂时只介绍原生支持的，如果想自己编写下面的可以不用看) hexo-generator-json-content1$ npm i -S hexo-generator-json-content NexT 原生支持，不想折腾的可以使用 hexo-generator-search1$ npm install hexo-generator-search --save 站点配置文件 新增1234# Searchsearch: path: search.xml field: post OK！ 待续ing 结合服务器，实现自动部署 多说css美化","raw":null,"content":null,"categories":[{"name":"Web","slug":"Web","permalink":"http://hocg.in/categories/Web/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://hocg.in/tags/Hexo/"},{"name":"HTML5","slug":"HTML5","permalink":"http://hocg.in/tags/HTML5/"},{"name":"CSS3","slug":"CSS3","permalink":"http://hocg.in/tags/CSS3/"}]},{"title":"安装完Ubuntu后,我该做什么","slug":"安装完Ubuntu后-我该做什么","date":"2016-03-20T06:34:20.000Z","updated":"2017-02-04T05:28:40.000Z","comments":true,"path":"2016/03/20/安装完Ubuntu后-我该做什么/","link":"","permalink":"http://hocg.in/2016/03/20/安装完Ubuntu后-我该做什么/","excerpt":"这是一篇我对Ubuntu日常使用和优化的整理，也是一篇借鉴前人的文章，还有一些可能会遇到的疑难杂病的“偏方”，希望对你有帮助:)update: 新增undistract-me终端命令完成提醒插件","keywords":null,"text":"这是一篇我对Ubuntu日常使用和优化的整理，也是一篇借鉴前人的文章，还有一些可能会遇到的疑难杂病的“偏方”，希望对你有帮助:)update: 新增undistract-me终端命令完成提醒插件 yuan获取官方列表： http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8网易163： http://mirrors.163.com/.help/ubuntu.html 移除 删除libreoffice 1sudo apt-get remove libreoffice-common 删除Amazon的链接s 1sudo apt-get remove unity-webapps-common 删掉基本不用的自带软件 12sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku landscape-client-ui-installsudo apt-get remove onboard deja-dup shang xia zuoyou 12sudo apt-get remove vim-commonsudo apt-get install vim 字体monaco苹果字体https://github.com/cstrap/monaco-font1curl -kL https://raw.github.com/cstrap/monaco-font/master/install-font-ubuntu.sh | bash consolas微软字体 Gnome3安装1.安装Gnome3桌面12345678910# 安装sudo add-apt-repository ppa:gnome3-team/gnome3sudo apt-get updatesudo apt-get install ppa-purgesudo ppa-purge ppa:gnome3-team/gnome3sudo apt-get dist-upgradesudo apt-get install gnome-themes-standard ubuntu-desktop gnome-shell# 删除sudo apt-get install ppa-purgesudo ppa-purge ppa:gnome3-team/gnome3 2.Gnome3系统下载 主题主题文件位置：~/.themes 或 /usr/share/themes 1.Paper1234# 下拉gitgit clone https://github.com/snwh/paper-gtk-theme.git# 运行安装脚本sh ./install-gtk-theme.sh 2.Numix-Circle 很赞 1234# 安装sudo apt-add-repository ppa:numix/ppasudo apt-get updatesudo apt-get install numix-icon-theme-circle 插件支持 gnome-tweak-tool Gnome3的调节软件可直接管理插件 1sudo apt-get install gnome-tweak-tool 插件下载网站: https://extensions.gnome.org/ 使用Chrome 插件 系统安装chrome-gnome-shell 1234sudo add-apt-repository ppa:ne0sight/chrome-gnome-shell# trustysudo apt-get updatesudo apt-get install chrome-gnome-shell 插件列表 名称 描述 推荐 Autohide battery 可以在电池充满的情况下隐藏电池图标 推荐 Battery status 可以显示当前电池电量以及可以使用的时间 推荐 Dash to dock 在屏幕左边显示一个快速启动条 推荐 Freon 显示当前磁盘，显卡，CPU等等温度 不推荐，推荐SysPeek Lock Keys 显示当前的 Num Lock, Caps Lock 的状态 推荐 Refesh wifi connections 在 wifi 列表上显示一个刷新图标 推荐 status title bar 讲状态条上的标题改为当前窗口的标题 推荐 Coverflow Alt-Tab 类似WIN 7切换特效 太显眼，不推荐 OpenWeather 天气预报 推荐 NetSpeed 显示网速 不推荐，推荐SysPeek system-monitor 显示当前系统信息 太显眼，不推荐 Dynamic Top Bar 在当前没有最大化窗口时使顶栏透明 推荐 Impatience Gnome Shell 动画提速 推荐 Better Volume Indicator 透过鼠标滚轮操作更便捷地调整音量 推荐 Media player indicator 显示音乐播放器的状态 推荐 Workspaces-to-dock 将工作区转变为一个可自动隐藏的停靠栏 推荐 Panel OSD 修改通知显示位置 推荐 Clipboard Indicator 剪贴板指示器 推荐 Caffeine 禁止自动挂起或锁屏 推荐 Transmission Daemon Indicator Transmission面板指示器 推荐，需要Transmission Daemon Icon Hider 显示/隐藏顶栏图标 推荐 Top Panel Workspace Scroll 在顶栏上滚动鼠标中键来快速切换工作区。在topbar按住shift+滚轮 推荐 Drop Down Terminal 终端快捷方式 推荐 Windows Blur Effects 给未激活的窗口添加模糊效果 不推荐 Modern Calc 功能齐全的计算器扩展 没找到 EasyScreenCast 录屏工具 推荐 Place status indicator 快速访问一些文件夹 推荐，没装上 Removable drive menu 显示连接到电脑的usb设备 推荐 User themes 用来启用自定义的shell主题 推荐，没装上 Workspace indicator 在顶栏显示当前示工作区的序号 推荐 touchpad-indicator 插入鼠标时自动使触摸板失效 推荐 壁纸1234567# 1.安装archiboldcurl -L -O http://archibold.io/sh/archiboldchmod +x archiboldsudo mv archibold /usr/bin# 2.执行archibold login-background [壁纸的位置] 此外还可以让桌面和锁屏界面使用动态壁纸，动态壁纸由一个xml文件构成，就像这样：12345678910111213141516171819202122232425262728293031323334&lt;background&gt; &lt;starttime&gt; &lt;year&gt;2011&lt;/year&gt; &lt;month&gt;11&lt;/month&gt; &lt;day&gt;24&lt;/day&gt; &lt;hour&gt;7&lt;/hour&gt; &lt;minute&gt;00&lt;/minute&gt; &lt;second&gt;00&lt;/second&gt; &lt;/starttime&gt; &lt;static&gt; &lt;duration&gt;3600.0&lt;/duration&gt; &lt;file&gt;picture1.jpg&lt;/file&gt; &lt;/static&gt; &lt;transition type=\"overlay\"&gt; &lt;duration&gt;18000.0&lt;/duration&gt; &lt;from&gt;picture1.jpg&lt;/from&gt; &lt;to&gt;/picture2.jpg&lt;/to&gt; &lt;/transition&gt; &lt;static&gt; &lt;duration&gt;18000.0&lt;/duration&gt; &lt;file&gt;picture2.jpg&lt;/file&gt; &lt;/static&gt; &lt;transition type=\"overlay\"&gt; &lt;duration&gt;21600.0&lt;/duration&gt; &lt;from&gt;picture2.jpg&lt;/from&gt; &lt;to&gt;picture1.jpg&lt;/to&gt; &lt;/transition&gt;&lt;/background&gt; 简单解释以下这个xml文件的含义： starttime：这个部分规定了壁纸切换起始时间，设置成过去的某个时间即可(设置成2020年就要等到2020年才会有效果)static：这个部分表示在duration规定的时间(以秒为单位)中壁纸都是file中给定的那张图片transition：这个部分表示在duration规定的时间内壁纸从from中的图片切换到to中的图片你可以添加任意多个static+transition的组合，只需要最后一个transition切换回最初的static那张图片就可以循环更换壁纸了。 那么如何启用这样的xml文件呢，单凭系统设置无法办到，我们需要使用dconf系统配置编辑器。首先打开dconf编辑器，展开org–gnome–desktop–background这一项，可以看到其中的picture-uri修这一项的默认值是file:///usr/share/backgrounds/gnome/adwaita-timed.xml，这个就是你刚装好桌面是的默认壁纸啦，将其改成你的xml文件就可以了。锁屏界面的壁纸更换方法也一样，只不过把org–gnome–desktop–background改成org–gnome–desktop–screensaver而已 软件安装指令安装 命令面板小提示 1234# 安装sudo apt updatesudo apt install python3-dev python3-pipsudo -H pip3 install thefuck 科学上网 Client-SS 123456789# 安装sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5# 安装 pipsudo pip install genpac# 下载自动翻墙列表genpac -p &quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --output=&quot;~/Documents/autoproxy.pac&quot; --gfwlist-url=&quot;https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt&quot; --user-rule-from=&quot;user-rules.txt&quot; 添加开机启动command：/usr/bin/ss-qt5 屏幕截图 Shutter 12345# 安装sudo apt-get install Shutter# 打开# 搜索 Shutter 音视频解码 ubuntu-restricted extras 12# 安装sudo apt-get install ubuntu-restricted-extras 终端命令执行完成提醒 1234567891011# 安装sudo apt-get install undistract-me# 配置vim ~/.bashrc# 新增如下两行# . /usr/share/undistract-me/long-running.bash# notify_when_long_running_commands_finish_install# 生效source ~/.bashrc# 测试sleep 11 GNOME MPV 代替VLC播放器 1234# 安装sudo add-apt-repository ppa:xuzhen666/gnome-mpvsudo apt-get updatesudo apt-get install gnome-mpv 视频播放 VLC播放器 123456# 安装sudo add-apt-repository ppa:videolan/master-dailysudo apt-get updatesudo apt-get install vlc# 使用# 搜索 vlc Grub引导 Grub Customizer可配置启动界面，启动项等 123456# 安装sudo add-apt-repository ppa:danielrichter2007/grub-customizersudo apt-get updatesudo apt-get install grub-customizer# 使用# 搜索 Grub Customizer Office WPS 12# 安装sudo apt-get install wps-office [小插件]指示器性能 SysPeek 1234# 安装sudo add-apt-repository ppa:nilarimogard/webupd8 sudo apt-get updatesudo apt-get install syspeeka Synapse 快速启动器 123sudo add-apt-repository ppa:synapse-core/testingsudo apt-get updatesudo apt-get install synapse Uget一款下载工具，配合 aria2 插件使用效果出色curl + area2 + axel 地址：参考 1234# 安装sudo add-apt-repository ppa:plushuang-tw/uget-stablesudo apt-get updatesudo apt-get install uget redshift类似 f.lux 的屏幕色温调整工具 12# 安装sudo apt-get install redshift-gtk 添加开机启动command：redshift-gtk -l 39.92:116.46 -t 5500:4500 Go For It 一款整合了待办事项与计时器的生产力应用。 1234# 安装sudo add-apt-repository ppa:mank319/go-for-itsudo apt-get updatesudo apt-get install go-for-it Catfish 一款优雅迅捷的文件搜索工具12# 安装sudo apt-get install catfish 神级命令行软件 Tmux 说明1sudo apt-get install tmux cat代码高亮12# 安装pip install pygments 配置～/.bashrc加入alias cat=&#39;pygmentize -O style=monokai -f console256 -g&#39; 软件包安装系统管理 UbuntuTweak打开：搜索 Ubuntu Tweak同步软件 坚果云打开：搜索 Nutstore百度网盘桌面客户端 BCloud便签MarkDown编辑软件 HarooPad密码管理器 keepass2搜狗输入法有道词典VMware WorkstationChrome网易音乐数据库设计软件 DBdesigner4 - 问题1 听起来不错 Deluge Bittorrent 客户端 Nutty网络监测工具。 Synaptic 新立得软件包管理器 UNetbootin启动盘制作工具 Gpick拾色器。 gpaint 微软画图 ddm 驱动管理器 Navicat o(╯□╰)o 竟然是wine的 XMind 小技巧关闭系统检测报告12sudo gedit /etc/default/apport# 修改enabled=0 开机自动开启数字键1234567sudo apt-get install numlockxsudo vim /etc/gdm/Init/Default# -----------# 在文件最后exit 0的前面添加： if [ -x /usr/bin/numlockx ]; then numlockx on fi 重启即可 插入鼠标时自动使触摸板失效安装Touchpad Indicator (触摸板开关）123sudo add-apt-repository ppa:atareao/atareao sudo apt-get update sudo apt-get install touchpad-indicator 搜索 touchpad indicator 遇到显示俩个输入法图标情况有一定原因是自启项启动了一个 黑屏95% 是和显卡驱动有关 Chrome 每次打开都要求输入密码一、删除现在的密钥环 视图-&gt;根据密码环 在密码区会有一个“登录”为名字的密钥环，右击将其删除。二、添加新的密钥环 终端输入seahorse打开管理密钥环的软件，文件-&gt;新建-&gt;密码和密钥-&gt;输入名字(这里是以”chrome”为例)。密码设置为空 添加源安装后，not fount XX一、 试着访问该链接二、如果可以手动找到该路径，那便可以修改/etc/apt/source.list.d/目录下你添加的安装源文件例如1234vim /etc/apt/sources.list.d/sogoupinyin.list# 显示内容# deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main# 可修改链接部分。 网卡驱动 Realtek RTL8723AE 无线网卡驱动第一种(闭源驱动)： 1sudo apt-get install linux-firmware-nonfree 第二种(第三方驱动，PPA安装)： 123sudo add-apt-repository ppa:hanipouspilot/rtlwifisudo apt-get updatesudo apt-get install rtlwifi-new-dkms 当遇到产品无法输入中文的时候先尝试卸载ibus，如果还是不可以试试在xxx.sh的启动脚本中添加如下： 12XMODIFIERS=&quot;@im=fcitx&quot;export XMODIFIERS 到 123# ---------------------------------------------------------------------# Run the IDE.# --------------------------------------------------------------------- 解决LC_CTYPE: cannot change locale (en_US.UTF-8) 错误12# 增加en_US.UTF-8locale-gen en_US.UTF-8 之前。通用1sudo mv /usr/bin/ibus-daemon /usr/bin/ibus-daemon.fix","raw":null,"content":null,"categories":[{"name":"OS","slug":"OS","permalink":"http://hocg.in/categories/OS/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://hocg.in/tags/Tips/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://hocg.in/tags/Ubuntu/"},{"name":"Gnome","slug":"Gnome","permalink":"http://hocg.in/tags/Gnome/"}]},{"title":"hexo 使用小记","slug":"hexo-使用","date":"2016-03-15T13:31:42.000Z","updated":"2017-01-12T02:37:02.000Z","comments":true,"path":"2016/03/15/hexo-使用/","link":"","permalink":"http://hocg.in/2016/03/15/hexo-使用/","excerpt":"这是一篇关于如何使用hexo的收集Box &gt; 不定期更新吧！ update 2017年01月12日10:33:55","keywords":null,"text":"这是一篇关于如何使用hexo的收集Box &gt; 不定期更新吧！ update 2017年01月12日10:33:55 参照 hexo 官方文档参照 next 主题参照 next 主题 for github参照 更多扩展使用 md文档头部 参数 描述 默认值 layout 布局 有哪些layout呢，请到 scaffolds 目录下查看，这些文件名称就是layout名称 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 description 添加本页描述 默认所有 photos 添加图片 hexo 基础命令1234567891011121314# 清除$ hexo clean# 上传 GitHub$ hexo deploy# 新建文章$ hexo new &quot;postName&quot;# 新建页面hexo new page &quot;pageName&quot;# 生成静态页面至public目录hexo generate# 开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo server# 将.deploy目录部署到GitHubhexo deploy .md 扩展 扩大图片宽度 1&#123;% fi image-url, alt, title %&#125; 显示 更多按钮 123以上是摘要&lt;!--more--&gt;以下是余下全文 使用标签别名 1&#123;% cq %&#125; 标签别名 &#123;% endcq %&#125; 可能遇到的问题 当你发布的.md文件中携带逗号,(已知)，在多说评论插件中将无法识别评论条数(就是文章顶部那个) 借鉴办法：替换文件命名，将逗号已_或 分隔 换电脑后, 如何迁移？123456// 为了使用hexo d来部署到git上，需要安装npm install hexo-deployer-git --save// 为了建立RSS订阅，需要安装npm install hexo-generator-feed --save// 为了建立站点地图，需要安装npm install hexo-generator-sitemap --save 可能会遇到 ‘./build/Release/DTraceProviderBindings’] code: ‘MODULE_NOT_FOUND’ 1npm install hexo --no-optional End","raw":null,"content":null,"categories":[{"name":"Other","slug":"Other","permalink":"http://hocg.in/categories/Other/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://hocg.in/tags/Hexo/"}]}]}