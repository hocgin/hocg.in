<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hocgin (๑`灬´๑)</title>
  <icon>https://www.gravatar.com/avatar/c00cd16720e00537b9bbb0f8b46e39fe</icon>
  <subtitle>Great minds have purpose, others have wishes.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hocg.in/"/>
  <updated>2018-05-11T16:10:24.604Z</updated>
  <id>https://hocg.in/</id>
  
  <author>
    <name>hocgin</name>
    <email>hocgin@gamil.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018 图片墙</title>
    <link href="https://hocg.in/2018/12/31/2018%20%E5%9B%BE%E7%89%87%E5%A2%99/"/>
    <id>https://hocg.in/2018/12/31/2018 图片墙/</id>
    <published>2018-12-31T15:59:59.000Z</published>
    <updated>2018-05-11T16:10:24.604Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="生活" scheme="https://hocg.in/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="图片墙" scheme="https://hocg.in/tags/%E5%9B%BE%E7%89%87%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitLab 来对 Spring Boot 项目进行 CI/CD</title>
    <link href="https://hocg.in/2018/06/20/%E4%BD%BF%E7%94%A8%20GitLab%20%E6%9D%A5%E5%AF%B9%20Spring%20Boot%20%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%20CI:CD/"/>
    <id>https://hocg.in/2018/06/20/使用 GitLab 来对 Spring Boot 项目进行 CI:CD/</id>
    <published>2018-06-20T14:34:20.000Z</published>
    <updated>2018-06-20T14:44:41.968Z</updated>
    
    <content type="html"><![CDATA[<p>利用 GitLab Pipelines 来进行项目的持续集成和部署。<br><a id="more"></a></p><h2 id="使用-GitLab-CI-构建-Spring-Boot-项目"><a href="#使用-GitLab-CI-构建-Spring-Boot-项目" class="headerlink" title="使用 GitLab CI 构建 Spring Boot 项目"></a>使用 GitLab CI 构建 Spring Boot 项目</h2><h3 id="搭建-GitLab-CE"><a href="#搭建-GitLab-CE" class="headerlink" title="搭建 GitLab CE"></a>搭建 GitLab CE</h3><blockquote><p>使用 Docker 方式搭建 GitLab CE</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --publish 443:443 \</span><br><span class="line">    --publish 80:80 \</span><br><span class="line">    --publish 2222:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /data/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /data/gitlab/logs:/var/log/gitlab \</span><br><span class="line">    --volume /data/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h3 id="搭建-GitLab-Runner"><a href="#搭建-GitLab-Runner" class="headerlink" title="搭建 GitLab Runner"></a>搭建 GitLab Runner</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --rm -t -d -i -p 8084:8080 \</span><br><span class="line">    -v /data/gitlab-runner:/etc/gitlab-runner \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    --add-host ad4aac43c567:172.17.0.2 \</span><br><span class="line">    --name gitlab-runner \</span><br><span class="line">    gitlab/gitlab-runner</span><br></pre></td></tr></table></figure><ul><li><ol><li>此处需注意<code>--add-host</code>请自行替换为GitLab CE Docker 容器 ID，此处是为了让 GitLab CE Docker 容器可以被 GitLab Runner 访问到, 如果使用公网 IP 可以忽略。</li></ol></li><li><ol><li>如果通过<code>/etc/hosts</code>仍然无法解决HOST问题, 请自行更改<code>/data/gitlab-runner/config.toml</code>文件，在<code>[runners.docker]</code>节点下面添加<code>extra_hosts = [&quot;ad4aac43c567:172.17.0.2&quot;]</code>。</li></ol></li></ul><h3 id="注册-Runner"><a href="#注册-Runner" class="headerlink" title="注册 Runner"></a>注册 Runner</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it gitlab-runner  gitlab-runner register -n \</span><br><span class="line">      --url http://192.168.1.13/ \</span><br><span class="line">      --registration-token pfHxurfRMBctWwkqrt1c \</span><br><span class="line">      --tag-list=docker-privileged \</span><br><span class="line">      --description "dockersock" \</span><br><span class="line">      --docker-privileged=false \</span><br><span class="line">      --docker-image "docker:latest" \</span><br><span class="line">      --docker-volumes /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">      --docker-volumes /root/m2:/root/.m2 \</span><br><span class="line">      --executor docker</span><br></pre></td></tr></table></figure><ul><li>url: GitLab CE 里面 CI 栏目查看</li><li>registration-token: GitLab CE 里面 CI 栏目查看</li><li>tag-list: 标签, 后续用于执行步骤时指定 Runner</li><li>description: 描述</li><li>docker-image: 外层使用的 Docker 镜像</li><li>executor: 执行器</li></ul><h3 id="编写-gitlab-ci-yml"><a href="#编写-gitlab-ci-yml" class="headerlink" title="编写 .gitlab-ci.yml"></a>编写 <code>.gitlab-ci.yml</code></h3><p>点击<a href="https://github.com/hocgin/GitLab-CI/blob/master/.gitlab-ci.yml" target="_blank" rel="external">.gitlab-ci.yml</a>查看</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p><a href="https://github.com/hocgin/GitLab-CI/blob/master/docker-compose.yml" target="_blank" rel="external">点击获取</a>, 记得修改HOST。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/hocgin/GitLab-CI" target="_blank" rel="external">GitLab-CI</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用 GitLab Pipelines 来进行项目的持续集成和部署。&lt;br&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://hocg.in/categories/DevOps/"/>
    
    
      <category term="DevOps" scheme="https://hocg.in/tags/DevOps/"/>
    
      <category term="GitLab" scheme="https://hocg.in/tags/GitLab/"/>
    
      <category term="CI/CD" scheme="https://hocg.in/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>日志系统ELK在Spring Boot上的初步集成</title>
    <link href="https://hocg.in/2018/01/22/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%20ELK%20%E5%9C%A8%20Spring%20Boot%20%E4%B8%8A%E7%9A%84%E5%88%9D%E6%AD%A5%E9%9B%86%E6%88%90/"/>
    <id>https://hocg.in/2018/01/22/日志系统 ELK 在 Spring Boot 上的初步集成/</id>
    <published>2018-01-22T08:53:00.000Z</published>
    <updated>2018-05-05T16:16:43.478Z</updated>
    
    <content type="html"><![CDATA[<p>日志系统 ELK 在 Spring Boot 上的初步集成 😋<br><a id="more"></a></p><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><blockquote><p>Elasticsearch + Logstash + Kibana，一个比较流行的日志系统。当然，你也可以尝试使用阿里云。如果钱多的话:)</p></blockquote><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><blockquote><p>日志搬运, 可以指定从 Redis/Log4j..处获取日志信息，然后进行过滤，再提交给 <code>Elasticsearch</code> 进行分析。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 &amp; 启动</span></span><br><span class="line">brew install logstash</span><br><span class="line"><span class="meta">#</span><span class="bash"> brew services restart logstash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./bin/logstash -f config/logstash.conf</span></span><br></pre></td></tr></table></figure><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><blockquote><p>日志存储 / 查询 / 分析</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 &amp; 启动</span></span><br><span class="line">brew install elasticsearch</span><br><span class="line">brew services restart elasticsearch</span><br></pre></td></tr></table></figure><p>如果你想直接查看、操作或者研究 <code>elasticsearch</code> 存储的内容，可以考虑使用 <code>elasticsearch-head</code> 进行操作。</p><h4 id="UI-操作界面"><a href="#UI-操作界面" class="headerlink" title="UI 操作界面"></a>UI 操作界面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line">open http://localhost:9100</span><br></pre></td></tr></table></figure><p>如果 Elasticsearch 安装了 X-Path 那么需要在配置文件中(<code>elasticsearch.yml</code>), 加入:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span> </span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">'*'</span> </span><br><span class="line"><span class="string">http.cors.allow-headers:</span> <span class="string">"Authorization"</span></span><br></pre></td></tr></table></figure></p><p>对了, 这里有一款<a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/related" target="_blank" rel="external">elasticsearch-head Chrome Plug-in</a> 推荐。</p><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><blockquote><p>UI 界面</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.elastic.co/downloads/kibana</span><br><span class="line">tar -xvf kibana.tar.gz</span><br><span class="line">./kibana/bin/kibana</span><br><span class="line">open http://localhost:5601/</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-集成"><a href="#Spring-Boot-集成" class="headerlink" title="Spring Boot 集成"></a>Spring Boot 集成</h3><ol><li><p><code>pom.xml</code> 引入 <code>logback</code> 支持。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>resources/</code> 文件夹内创建 <code>logback-spring.xml</code> 文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>dev.local:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 logstash, 创建 <code>logstash.conf</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; 4560</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        action =&gt; &quot;index&quot;</span><br><span class="line">        hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">        index =&gt; &quot;applog&quot;</span><br><span class="line">    ;    user =&gt; &quot;elastic&quot;</span><br><span class="line">    ;    password =&gt; &quot;changeme&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>启动logstash <code>./bin/logstash -f logstash.conf</code></p><ol><li>使用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestControllerTest</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            log.info(<span class="string">"Hello world form hocgin"</span>);</span><br><span class="line">            <span class="keyword">if</span> (random.nextBoolean()) &#123;</span><br><span class="line">                log.info(<span class="string">"sksdjkf "</span> + random.nextInt(<span class="number">1000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="关于-Kibana-安全配置"><a href="#关于-Kibana-安全配置" class="headerlink" title="关于 Kibana 安全配置"></a>关于 Kibana 安全配置</h2><ul><li><a href="https://www.elastic.co/guide/en/kibana/current/using-kibana-with-security.html" target="_blank" rel="external">Configuring Security in Kibana</a></li></ul><ol><li><p>安装 x-pack.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">logstash-plugin install x-pack</span><br><span class="line"></span><br><span class="line">elasticsearch-plugin install x-pack</span><br><span class="line"></span><br><span class="line">kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>config/kibana.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.username: &quot;elastic&quot; </span><br><span class="line">elasticsearch.password: &quot;changeme&quot;</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>logstash.conf</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; 4560</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        action =&gt; &quot;index&quot;</span><br><span class="line">        hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">        index =&gt; &quot;applog&quot;</span><br><span class="line">        user =&gt; &quot;elastic&quot;</span><br><span class="line">        password =&gt; &quot;changeme&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="如果忘记-ElasticSearch-密码"><a href="#如果忘记-ElasticSearch-密码" class="headerlink" title="如果忘记 ElasticSearch 密码"></a>如果忘记 ElasticSearch 密码</h3><ol><li>停止 <code>ElasticSearch</code> 服务</li><li><p>创建一个管理员用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x-pack/users useradd my_admin -p my_password -r superuser</span><br></pre></td></tr></table></figure></li><li><p>启动 <code>ElasticSearch</code> 服务</p></li><li>使用 API 修改密码<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -u my_admin -XPUT 'http://localhost:9200/_xpack/security/user/elastic/_password?pretty' -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "password" : "new_password"</span><br><span class="line">&#125;'</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ELK Docker</span></span></span><br><span class="line">- [ELK Docker](https://github.com/spujadas/elk-docker)</span><br><span class="line">简而言之:</span><br><span class="line">```shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> :5601 - Kibana</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> :9200 - Elasticsearch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> :5044 - Logstash</span></span><br><span class="line">sudo docker run -p 5601:5601 -p 9200:9200 -p 5044:5044 -it --name elk sebp/elk</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日志系统 ELK 在 Spring Boot 上的初步集成 😋&lt;br&gt;
    
    </summary>
    
      <category term="服务端" scheme="https://hocg.in/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
      <category term="ELK" scheme="https://hocg.in/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot启动过程和Bean的创建过程</title>
    <link href="https://hocg.in/2018/01/15/Spring%20Boot%20%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%92%8C%20Bean%20%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>https://hocg.in/2018/01/15/Spring Boot 启动过程和 Bean 的创建过程/</id>
    <published>2018-01-15T09:10:20.000Z</published>
    <updated>2018-05-05T17:58:24.257Z</updated>
    
    <content type="html"><![CDATA[<p>这几天分析了一下 Spring Boot 启动过程和 Bean 的创建过程，在此记录下来。<br>如果有什么不对的地方，欢迎提出🙏。<br><a id="more"></a></p><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 将 new SpringApplicationBuilder(sources...) 加入 sources 列表。</span></span><br><span class="line"><span class="comment">// ---------------推断是否是Web环境------------</span></span><br><span class="line"><span class="comment">// SpringApplication.deduceMainApplicationClass#248</span></span><br><span class="line"><span class="comment">// 主要是否包含 javax.servlet.Servlet ..</span></span><br><span class="line"><span class="comment">// ---------------Initializer------------</span></span><br><span class="line"><span class="comment">// 使用 ClassLoader</span></span><br><span class="line"><span class="comment">// 分析引入所有包的: META-INF/spring.factories 文件</span></span><br><span class="line"><span class="comment">// - spring-boot-actuator-1.5.8.RELEASE.jar</span></span><br><span class="line"><span class="comment">// - spring-data-redis-1.8.8.RELEASE.jar</span></span><br><span class="line"><span class="comment">// - ..</span></span><br><span class="line"><span class="comment">// 获得 Key 为`org.springframework.context.ApplicationContextInitializer`的所有节点(Class), 实例化并通过 @Order 进行排序。</span></span><br><span class="line"><span class="comment">// ---------------Listener------------</span></span><br><span class="line"><span class="comment">// 使用 ClassLoader</span></span><br><span class="line"><span class="comment">// 分析引入所有包的: META-INF/spring.factories 文件</span></span><br><span class="line"><span class="comment">// - spring-boot-actuator-1.5.8.RELEASE.jar</span></span><br><span class="line"><span class="comment">// - spring-data-redis-1.8.8.RELEASE.jar</span></span><br><span class="line"><span class="comment">// - ..</span></span><br><span class="line"><span class="comment">// 获得 Key 为`org.springframework.context.ApplicationListener`的所有节点(Class), 实例化并通过 @Order 进行排序。</span></span><br><span class="line"><span class="comment">// ---------------推断Main类------------</span></span><br><span class="line"><span class="comment">// SpringApplication.deduceMainApplicationClass#252</span></span><br><span class="line"><span class="comment">// 推断当前应用的入口函数(方法名为main)。</span></span><br><span class="line">    <span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">        .sources(Application.class)</span><br><span class="line">        <span class="comment">// -------判断是否热部署状态---------</span></span><br><span class="line">        <span class="comment">// ---如果设置了 parent() 进行配置-----</span></span><br><span class="line">        <span class="comment">// configureAsChildIfNecessary(args);如果配置了会加入一个 ParentContextApplicationContextInitializer</span></span><br><span class="line">        <span class="comment">// ---------初始化当前应用----------</span></span><br><span class="line">        <span class="comment">// SpringApplication.run(args)</span></span><br><span class="line">        .run(args);</span><br></pre></td></tr></table></figure><h3 id="分析-SpringApplication-run-args"><a href="#分析-SpringApplication-run-args" class="headerlink" title="分析 SpringApplication.run(args)"></a>分析 SpringApplication.run(args)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计时器, 用于记录启动时间</span></span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 设置为无输入/输出设备模式</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line"><span class="comment">// 使用 ClassLoader</span></span><br><span class="line"><span class="comment">// 分析引入所有包的: META-INF/spring.factories 文件</span></span><br><span class="line"><span class="comment">// 获得 Key 为`org.springframework.boot.SpringApplicationRunListener`的所有节点(Class), 实例化并通过 @Order 进行排序。</span></span><br><span class="line"><span class="comment">// 并封装进入 SpringApplicationRunListeners 类。</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line"><span class="comment">// 由 SpringApplicationRunListeners 控制类的启动。</span></span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 封装我们提供的 args 参数</span></span><br><span class="line">    ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">    <span class="comment">// 根据是否 Web 环境(webEnvironment) 获得环境(StandardServletEnvironment/StandardEnvironment)</span></span><br><span class="line">    <span class="comment">// - 加载默认的参数源(StandardServletEnvironment.customizePropertySources)</span></span><br><span class="line">    <span class="comment">// - 加载我们提供的启动参数(args)作为参数源。当然，前提是 addCommandLineProperties 为 true。</span></span><br><span class="line">    <span class="comment">// 通过 SpringApplicationRunListeners.environmentPrepared(..) 处理上面提供的应用环境参数。</span></span><br><span class="line">    ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">    <span class="comment">// 打印 banner。本身是由 Banner 类实现的</span></span><br><span class="line">    Banner printedBanner = printBanner(environment);</span><br><span class="line">    <span class="comment">// 实例化一个应用的当前环境, Spring Boot 提供了2种环境根据是否是web环境进行动态实例化(webEnvironment), 分别是(AnnotationConfigEmbeddedWebApplicationContext/ConfigurableWebApplicationContext)</span></span><br><span class="line">    <span class="comment">// 这是会创建两个用于扫描注解的重要对象</span></span><br><span class="line">    <span class="comment">// - AnnotatedBeanDefinitionReader  读取器, 设置环境参数，创建时注册了一系列的用于 Bean 的解析器(AnnotatedBeanDefinitionReader#65)</span></span><br><span class="line">    <span class="comment">// - ClassPathBeanDefinitionScanner 扫描器, 设置路径 &amp; 环境 &amp; 拦截器(Component.class)</span></span><br><span class="line">    context = createApplicationContext();</span><br><span class="line">    <span class="comment">// ----------创建失败解析器------------</span></span><br><span class="line">    <span class="comment">// 当初始化出现错误时进行错误分析器</span></span><br><span class="line">    <span class="comment">// 使用 ClassLoader</span></span><br><span class="line">    <span class="comment">// 分析引入所有包的: META-INF/spring.factories 文件</span></span><br><span class="line">    <span class="comment">// - spring-boot-actuator-1.5.8.RELEASE.jar</span></span><br><span class="line">    <span class="comment">// - spring-data-redis-1.8.8.RELEASE.jar</span></span><br><span class="line">    <span class="comment">// - ..</span></span><br><span class="line">    <span class="comment">// 获得 Key 为`org.springframework.boot.diagnostics.FailureAnalyzer`的所有节点(Class), 实例化并通过 @Order 进行排序。</span></span><br><span class="line">    <span class="comment">// 并加入 FailureAnalyzers 管理。</span></span><br><span class="line">    analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">    <span class="comment">// 详情见下方【SpringApplication.prepareContext(..)】</span></span><br><span class="line">    prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">    <span class="comment">// 详情见下方【分析 AbstractApplicationContext.refreshContext(context);】</span></span><br><span class="line">    refreshContext(context);</span><br><span class="line">    <span class="comment">// ApplicationRunner &amp; CommandLineRunner.run 按类型从 Bean 容器中取出，并调用 run(..)</span></span><br><span class="line">    afterRefresh(context, applicationArguments);</span><br><span class="line">    <span class="comment">// 广播通知 SpringApplicationRunListener.finished</span></span><br><span class="line">    listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 关闭计时器，记录启动时间</span></span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    <span class="comment">// 是否启动日志</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">        <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">                .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="comment">// 处理退出异常, 存储 ExitCodeEvent</span></span><br><span class="line">    <span class="comment">// 广播通知 listener(listener.finished(context, exception);)</span></span><br><span class="line">    <span class="comment">// 使用 analyzers 进行失败分析</span></span><br><span class="line">    handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-SpringApplication-prepareContext"><a href="#分析-SpringApplication-prepareContext" class="headerlink" title="分析 SpringApplication.prepareContext(..)"></a>分析 SpringApplication.prepareContext(..)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">            ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置环境参数</span></span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">// - 注册自定义 beanNameGenerator，如果有的话。</span></span><br><span class="line">        <span class="comment">// - 注册自定义 resourceLoader，如果有的话。</span></span><br><span class="line">        <span class="comment">// 其中, resourceLoader 分为两种类型</span></span><br><span class="line">        <span class="comment">//     - GenericApplicationContext(ResourceLoader)</span></span><br><span class="line">        <span class="comment">//     - DefaultResourceLoader(ClassLoader)</span></span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">        <span class="comment">// 初始化所有之前加载的 ApplicationContextInitializer 节点</span></span><br><span class="line">    applyInitializers(context);</span><br><span class="line">        <span class="comment">// 所有监听器通知进入 contextPrepared 阶段</span></span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">        <span class="comment">// 是否启动日志</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">        <span class="comment">// 交由顶级打印日志信息</span></span><br><span class="line">        logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 打印配置文件信息</span></span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">    context.getBeanFactory().registerSingleton(<span class="string">"springApplicationArguments"</span>,</span><br><span class="line">        applicationArguments);</span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">        context.getBeanFactory().registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load the sources</span></span><br><span class="line">    Set&lt;Object&gt; sources = getSources();</span><br><span class="line">    Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">        <span class="comment">// 创建 Bean 的加载器, BeanDefinitionLoader</span></span><br><span class="line">        <span class="comment">// ---------------解析器---------------</span></span><br><span class="line">        <span class="comment">// - 注解 AnnotatedBeanDefinitionReader</span></span><br><span class="line">        <span class="comment">// - xml XmlBeanDefinitionReader</span></span><br><span class="line">        <span class="comment">// - goovy GroovyBeanDefinitionReader</span></span><br><span class="line">        <span class="comment">// - 类路径 ClassPathBeanDefinitionScanner</span></span><br><span class="line">        <span class="comment">// ---------------自定义-----------------</span></span><br><span class="line">        <span class="comment">// - 加载自定义 beanNameGenerator，如果有的话。</span></span><br><span class="line">        <span class="comment">// - 加载自定义 resourceLoader，如果有的话。</span></span><br><span class="line">        <span class="comment">// - 加载自定义 environment，如果有的话。</span></span><br><span class="line">    load(context, sources.toArray(<span class="keyword">new</span> Object[sources.size()]));</span><br><span class="line">        <span class="comment">// 通知环境加载结束</span></span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-AbstractApplicationContext-refreshContext-context"><a href="#分析-AbstractApplicationContext-refreshContext-context" class="headerlink" title="分析 AbstractApplicationContext.refreshContext(context);"></a>分析 AbstractApplicationContext.refreshContext(context);</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// 设置为启动状态</span></span><br><span class="line">        <span class="comment">// 校验必须字段, 使用 ConfigurablePropertyResolver#setRequiredProperties 进行设置。</span></span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刷新当前 beanFactory 的ID, 值得一提的是默认的 BeanFactory 是 org.springframework.beans.factory.support.DefaultListableBeanFactory。</span></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------BeanFactory重点初始化(AbstractApplicationContext.prepareBeanFactory#627)---------------</span></span><br><span class="line">        <span class="comment">// - 设置 BeanClassLoader</span></span><br><span class="line">        <span class="comment">// - 设置 字符解析器(SpelExpressionParser)</span></span><br><span class="line">        <span class="comment">// - 设置 资源位置</span></span><br><span class="line">        <span class="comment">// - 添加 处理器</span></span><br><span class="line">        <span class="comment">// - 忽略 某些接口</span></span><br><span class="line">        <span class="comment">// - 注册某些解析器解决依赖关系</span></span><br><span class="line">        <span class="comment">// - 添加一个监听器</span></span><br><span class="line">        <span class="comment">// - 注册 默认的 environment Bean(3个), 如果不存在的话。</span></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// AnnotationConfigEmbeddedWebApplicationContext.postProcessBeanFactory#182</span></span><br><span class="line">            <span class="comment">// - 加入 WebApplicationContextServletContextAwareProcessor 作为 BeanPostProcessor </span></span><br><span class="line">            <span class="comment">// - beanFactory.ignoreDependencyInterface(ServletContextAware.class);</span></span><br><span class="line">            <span class="comment">// 也会读取注册的注解类 和 配置要扫描的包位置。</span></span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry)</span></span><br><span class="line">            <span class="comment">// 通过 ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry#308 扫描所有应用文件。</span></span><br><span class="line">            <span class="comment">// - 扫描预制的配置文件</span></span><br><span class="line">            <span class="comment">// - 扫描应用的所有注解配置成 Bean 字典</span></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 BeanPostProcessor.class 获取 Bean(所有 Bean 均在beanDefinitionMap 内含有), 排序后, 注册为 Bean 处理器。</span></span><br><span class="line">            <span class="comment">// 加入 BeanPostProcessorChecker.class 用于监听Bean的创建周期。</span></span><br><span class="line">            <span class="comment">// - priorityOrderedPostProcessors</span></span><br><span class="line">            <span class="comment">// - orderedPostProcessors</span></span><br><span class="line">            <span class="comment">// - nonOrderedPostProcessors</span></span><br><span class="line">            <span class="comment">// - internalPostProcessors</span></span><br><span class="line">            <span class="comment">// 加入 ApplicationListenerDetector 作为兜底 BeanPostProcessor</span></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化消息资源(MessageSource)</span></span><br><span class="line">            <span class="comment">// 一般是作为 i18 的资源文件。</span></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化应用广播器(ApplicationEventMulticaster)</span></span><br><span class="line">            <span class="comment">// 一般用于管理 ApplicationListener</span></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// EmbeddedWebApplicationContext.onRefresh#131</span></span><br><span class="line">            <span class="comment">// 创建嵌入式 Servlet 容器</span></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册 listener beans 到 ApplicationEventMulticaster。</span></span><br><span class="line">            <span class="comment">// 广播 (Set&lt;ApplicationEvent&gt; earlyEventsToProcess).multicastEvent</span></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// - 转化 BeanFactory 类型</span></span><br><span class="line">            <span class="comment">// - 提供默认的嵌入值解析器，如果需要的话。</span></span><br><span class="line">            <span class="comment">// - 装载 LoadTimeWeaverAware.class 类型的 Bean</span></span><br><span class="line">            <span class="comment">// - 停止临时的 ClassLoad</span></span><br><span class="line">            <span class="comment">// - 冻结配置</span></span><br><span class="line">            <span class="comment">// - 预先装载所有单例 Bean。</span></span><br><span class="line">            <span class="comment">//    - 初始化@Controller @RequestMapping 之类的过程, 基本上我们使用的注解都是该阶段进行设置的。</span></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ----------发布事件通知----------------</span></span><br><span class="line">            <span class="comment">// 注册 LifecycleProcessor，并发布 onRefresh() 事件。</span></span><br><span class="line">            <span class="comment">// earlyApplicationEvents.add(new ContextRefreshedEvent(this)) 加入 Context 刷新事件</span></span><br><span class="line">            <span class="comment">// 注册 LiveBean，如果有的话。..DevTool Debug 那个</span></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                        <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-Bean"><a href="#关于-Bean" class="headerlink" title="关于 Bean"></a>关于 Bean</h2><ul><li>BeanDefinitionRegistry, Bean 定义注册表，类似 Bean 的仓库。</li><li>BeanDefinition 存储 Bean 的信息。<ul><li>Bean 的 scope 种类, <ul><li>prototype, 每次获取时创建。</li><li>request, </li><li>session, </li><li>global session, </li><li>singleton(默认), 单例。</li></ul></li></ul></li><li>BeanFactory, Bean 工厂。<ul><li>用于 注册 Bean, 获得 Bean, 清除 Bean, 配置 Bean 的相关策略。</li></ul></li><li>DefaultListableBeanFactory 是 Spring 默认的 BeanFactory。<ul><li>registeredSingletons 已注册的 Bean 列表, 存储 BeanName。</li><li>singletonObjects 存储 Bean 对象, 使用 Map 结构。</li><li>earlySingletonObjects 存储由 ObjectFactory 创建的 Bean 对象。</li><li>singletonFactories 存储之前创建的 ObjectFactory 其本质是 Bean 对象。</li><li>beanDefinitionMap 扫描存储的记录，可以理解为 Bean 的总名单。</li><li>mergedBeanDefinitions</li></ul></li></ul><h3 id="获取-Bean-getBean"><a href="#获取-Bean-getBean" class="headerlink" title="获取 Bean getBean(..)"></a>获取 Bean <code>getBean(..)</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractBeanFactory.class</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> String name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析 BeanName</span></span><br><span class="line">        <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">        Object bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查缓存中是否存在该 Bean, 如果存在则实例化。</span></span><br><span class="line">        <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">        Object sharedInstance = getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                            <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Bean 不在缓存</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当正在创建的 Bean 的 Scope 为 Prototype 时，抛出异常。</span></span><br><span class="line">            <span class="comment">// 因为 Prototype 模式无法解决依赖问题。</span></span><br><span class="line">            <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">            <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">            <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果当前 BeanFactory 不包括该 BeanName 并且该 BeanFactory 有父 BeanFactory 时，尝试从父 BeanFactory 获取该 Bean。</span></span><br><span class="line">            <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">            BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">            <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">                <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">                String nameToLookup = originalBeanName(name);</span><br><span class="line">                <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">                    <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                    <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果不只依靠类型进行获取, 进行标记。</span></span><br><span class="line">            <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">                markBeanAsCreated(beanName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将解析转化为 Bean 的信息，注册并获取其依赖的 Bean。</span></span><br><span class="line">                <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">                checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">                String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">                <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                    <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        registerDependentBean(dep, beanName);</span><br><span class="line">                        getBean(dep);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 当 Bean 的 Scope 为 Singleton 时</span></span><br><span class="line">                <span class="comment">// Create bean instance.</span></span><br><span class="line">                <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                    sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                                <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                                <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                                <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                                destroySingleton(beanName);</span><br><span class="line">                                <span class="keyword">throw</span> ex;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 当 Bean 的 Scope 为 Prototype 时</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">                    <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">                    Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        beforePrototypeCreation(beanName);</span><br><span class="line">                        prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterPrototypeCreation(beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 当 Bean 的 Scope 为 其他 时</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    String scopeName = mbd.getScope();</span><br><span class="line">                    <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">                    <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Object scopedInstance = scope.get(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">                                beforePrototypeCreation(beanName);</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">finally</span> &#123;</span><br><span class="line">                                    afterPrototypeCreation(beanName);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                                <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                                ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查获得的 Bean 类型是否符合预期结果。</span></span><br><span class="line">        <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">        <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; bean != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                            ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="创建-Bean-createBean"><a href="#创建-Bean-createBean" class="headerlink" title="创建 Bean createBean(..)"></a>创建 Bean <code>createBean(..)</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractAutowireCapableBeanFactory.class</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据信息(mbd, beanName)获取 Bean 的类型</span></span><br><span class="line">        <span class="comment">// Make sure bean class is actually resolved at this point, and</span></span><br><span class="line">        <span class="comment">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class="line">        <span class="comment">// which cannot be stored in the shared merged bean definition.</span></span><br><span class="line">        Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">        <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">            mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验重载函数</span></span><br><span class="line">        <span class="comment">// Prepare method overrides.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mbdToUse.prepareMethodOverrides();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">                    beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Spring 提供的，由 BeanPostProcessor 进行处理接入点。</span></span><br><span class="line">            <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">            Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">            <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bean;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">                    <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 默认的创建 Bean 方式</span></span><br><span class="line">        Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AbstractAutowireCapableBeanFactory.class</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据 Bean 信息实例化 Bean</span></span><br><span class="line">        <span class="comment">// Instantiate the bean.</span></span><br><span class="line">        BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object bean = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedInstance() : <span class="keyword">null</span>);</span><br><span class="line">        Class&lt;?&gt; beanType = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedClass() : <span class="keyword">null</span>);</span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 MergedBeanDefinitionPostProcessor 进行处理</span></span><br><span class="line">        <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                            <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">                mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">        <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">        <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">        <span class="comment">// 单例 &amp; 允许循环引用 &amp; 正在创建</span></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用 ObjectFactory 来管理 Bean 防止循环依赖。</span></span><br><span class="line">            addSingletonFactory(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">        Object exposedObject = bean;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  对 Bean 的属性进行填充</span></span><br><span class="line">            populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">            <span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 初始化 Bean 实例</span></span><br><span class="line">                exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                        mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 存在已创建的单例, 一般情况为解决依赖的时候。</span></span><br><span class="line">            <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                    exposedObject = earlySingletonReference;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 允许循环依赖不一致 &amp; Bean 含有依赖。</span></span><br><span class="line">                <span class="comment">// 此时如果存在依赖，将会发生异常。</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                    String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                    Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(dependentBeans.length);</span><br><span class="line">                    <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                            actualDependentBeans.add(dependentBean);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                                <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                                StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                                <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                                <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                                <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册一次性 Bean</span></span><br><span class="line">        <span class="comment">// Register bean as disposable.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exposedObject;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天分析了一下 Spring Boot 启动过程和 Bean 的创建过程，在此记录下来。&lt;br&gt;如果有什么不对的地方，欢迎提出🙏。&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://hocg.in/categories/Web/"/>
    
    
      <category term="Spring Boot" scheme="https://hocg.in/tags/Spring-Boot/"/>
    
      <category term="Web" scheme="https://hocg.in/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 交叉编译 OpenWrt 上运行的 Golang 程序</title>
    <link href="https://hocg.in/2017/11/23/%E4%BD%BF%E7%94%A8%20Docker%20%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%20OpenWrt%20%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%9A%84%20Golang%20%E7%A8%8B%E5%BA%8F/"/>
    <id>https://hocg.in/2017/11/23/使用 Docker 交叉编译 OpenWrt 上运行的 Golang 程序/</id>
    <published>2017-11-23T02:17:02.000Z</published>
    <updated>2018-01-09T00:33:32.850Z</updated>
    
    <content type="html"><![CDATA[<p>>.&lt;<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>使用 <code>https://github.com/gomini/go-mips32</code> 对 Go 程序进行交叉编译.</li></ul><h2 id="使用-Docker-交叉编译-Go-程序"><a href="#使用-Docker-交叉编译-Go-程序" class="headerlink" title="使用 Docker 交叉编译 Go 程序"></a>使用 Docker 交叉编译 Go 程序</h2><ol><li><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull conoro/go-mips32:v1</span><br></pre></td></tr></table></figure></li><li><p>启动镜像并挂载本地目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 程序目录:/go/src conoro/go-mips32:v1 /bin/sh</span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="comment"># export GOOS=linux</span></span><br><span class="line"><span class="comment"># export GOARCH=mips32le</span></span><br><span class="line">go build main.go</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&gt;.&amp;lt;&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://hocg.in/categories/Docker/"/>
    
    
      <category term="OpenWrt" scheme="https://hocg.in/tags/OpenWrt/"/>
    
      <category term="Docker" scheme="https://hocg.in/tags/Docker/"/>
    
      <category term="Go" scheme="https://hocg.in/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>自编译 OpenWrt 系统</title>
    <link href="https://hocg.in/2017/11/22/%E8%87%AA%E7%BC%96%E8%AF%91%20OpenWrt%20%E7%B3%BB%E7%BB%9F/"/>
    <id>https://hocg.in/2017/11/22/自编译 OpenWrt 系统/</id>
    <published>2017-11-22T02:18:02.000Z</published>
    <updated>2018-01-04T10:30:58.409Z</updated>
    
    <content type="html"><![CDATA[<p>😌 整理、记录一下步骤..<br><a id="more"></a></p><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i.bak 's/\/us.archive.ubuntu.com\//\/cn.archive.ubuntu.com\//g' /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h2 id="关闭IPv6"><a href="#关闭IPv6" class="headerlink" title="关闭IPv6"></a>关闭IPv6</h2><p>echo 1 &gt; /proc/sys/net/ipv6/conf/<eth1>/disable_ipv6</eth1></p><h2 id="前置安装"><a href="#前置安装" class="headerlink" title="前置安装"></a>前置安装</h2><ul><li>git subversion make automake autoconf gcc g++ binutils</li></ul><h2 id="make-缺省安装"><a href="#make-缺省安装" class="headerlink" title="make, 缺省安装"></a>make, 缺省安装</h2><ul><li>libncurses5-dev</li><li>libssl-dev</li><li>gawk</li></ul><h2 id="前置-1"><a href="#前置-1" class="headerlink" title="前置"></a>前置</h2><ul><li>GitHub(git clone <a href="https://github.com/openwrt/openwrt" target="_blank" rel="external">https://github.com/openwrt/openwrt</a>) 获取 OpenWrt, 更改 openWrt 目录为当前用户所有权<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例如:</span></span><br><span class="line">chown -R hocgin:hocgin openwrt</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="编译-openwrt"><a href="#编译-openwrt" class="headerlink" title="编译(openwrt/)"></a>编译(openwrt/)</h1><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><ol><li><p>make</p></li><li><p>./script/feeds update -a</p></li><li><p>./script/feeds install -a</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4. make deconfig <span class="comment"># 使用默认的配置</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5. make menuconfig <span class="comment"># 基于终端的一种配置方式，提供了文本模式的图形用户界面，用户可以通过光标移动来浏览所支持的各种特性。</span></span><br></pre></td></tr></table></figure><blockquote><p>固件配置, 可以选择编译的软件包</p></blockquote><pre><code>## 部分选项- 架构(AR7xxx) - FLASH(Generic)- 路由器型号(WNDR3800) - 文件系统(squashfs)- 通用设置    - [-] Crytographically signed package lists    - [-] Compile with support for patented functionallty    - [-] Enable shadow password support    - [-] Crash logging    - [-] Compile the kernel with debug information    - [-] Compile the kernel SysRq support    - [-] Enable process core dump support    - [-] Enable printk timestamps    - [-] Enable Ipv6 support in packages    - [-] Compile certain packages parallelized    - [-] Enable gcc format-security- [-] Build the OpenWrt Image Builder    - [-] In- [-] Build the OpenWrt SDK- [-] Package the OpenWrt-based Toolchain</code></pre><p>其余默认。</p><ol><li><p>make kernel_config</p><blockquote><p>内核配置[开启浮点数模拟(FPU)]</p></blockquote></li><li><p>make V=s -j&lt;处理器数量&gt;</p></li><li><p>编译完成后，移出<code>bin/ar71xx/OpenWrt-ImageBuilder-ar71xx-generic.Linux-x86_64.tar.bz2</code> 文件, 并解压(tar xvf).</p></li><li><p>进入(<code>OpenWrt-ImageBuilder-ar71xx-generic.Linux-x86_64/</code>)</p></li><li><p>编译成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查基础镜像</span></span><br><span class="line">parallels@ubuntu:~/OpenWrt/OpenWrt-ImageBuilder-ar71xx-generic.Linux-x86_64$ make image PROFILE=WNDR3700</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 包含必备包`预装软件`的镜像</span></span><br><span class="line">parallels@ubuntu:~/OpenWrt/OpenWrt-ImageBuilder-ar71xx-generic.Linux-x86_64$ make image PROFILE=WNDR3700 PACKAGES="-dnsmasq dnsmasq-full ipset openssh-keygen openssh-server openssh-sftp-server kmod-fs-ext4 kmod-fs-ntfs kmod-fs-vfat kmod-usb2 kmod-usb-core kmod-usb-storage kmod-usb-storage-extras luci-app-firewall luci-app-samba luci-app-upnp luci luci-theme-material curl kmod-ipt-nat-extra libpcre"</span><br></pre></td></tr></table></figure></li><li><p>生成镜像(<code>~/OpenWrt/OpenWrt-ImageBuilder-ar71xx-generic.Linux-x86_64/bin/</code>)</p></li></ol><ul><li>openwrt-ar71xx-generic-wndr3800-squashfs-sysupgrade.bin</li><li>openwrt-ar71xx-generic-wndr3800-squashfs-factory.img</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;😌 整理、记录一下步骤..&lt;br&gt;
    
    </summary>
    
      <category term="OpenWrt" scheme="https://hocg.in/categories/OpenWrt/"/>
    
    
      <category term="OpenWrt" scheme="https://hocg.in/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>制作.ipk安装文件</title>
    <link href="https://hocg.in/2017/11/19/%E5%88%B6%E4%BD%9C.ipk/"/>
    <id>https://hocg.in/2017/11/19/制作.ipk/</id>
    <published>2017-11-19T04:30:21.000Z</published>
    <updated>2018-01-09T00:35:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>.ipk</code> 本质是<code>tar.gz</code>格式的压缩包, 按照某种规范格式(<code>类似.deb包</code>)进行 …<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><code>.ipk</code> 本质是<code>tar.gz</code>格式的压缩包, 按照某种规范格式(<code>类似.deb包</code>)进行压缩而成的。</li><li>当我们对它的内容进行操作时候所使用的用户即是它安装后所拥有的用户和权限(<code>sudo chown root:root -R .</code>)。</li><li>已经存在的文件并不能进行替换, 切记。</li></ol><h2 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── control.tar.gz <span class="comment"># 安装/卸载 脚本</span></span><br><span class="line">├── data.tar.gz <span class="comment"># 二进制/配置文件..</span></span><br><span class="line">└── debian-binary <span class="comment"># 固有文件</span></span><br></pre></td></tr></table></figure><h2 id="control-tar-gz-内容"><a href="#control-tar-gz-内容" class="headerlink" title="control.tar.gz 内容"></a>control.tar.gz 内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── control <span class="comment"># 文件介绍[包括: 依赖/版本/架构/作者..]</span></span><br><span class="line">├── postinst <span class="comment"># 安装脚本</span></span><br><span class="line">└── postrm <span class="comment"># 卸载脚本</span></span><br></pre></td></tr></table></figure><h3 id="control-此处举个栗子"><a href="#control-此处举个栗子" class="headerlink" title="control 此处举个栗子"></a><code>control</code> 此处举个栗子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Package: IPKName <span class="comment"># .ipk NAME</span></span><br><span class="line">Version: 1</span><br><span class="line">Section: net</span><br><span class="line">Priority: optional</span><br><span class="line">Architecture: ar71xx <span class="comment"># 系统架构</span></span><br><span class="line">Maintainer: hocgin &lt;hocgin@gmail.com&gt;</span><br><span class="line">Description: my first ipk</span><br></pre></td></tr></table></figure><h3 id="postinst-安装脚本"><a href="#postinst-安装脚本" class="headerlink" title="postinst 安装脚本"></a>postinst 安装脚本</h3><blockquote><p>因为前言的<code>3</code>原因, 当我们需要对已存在文件进行修改时, 只能使用写入的方式进行修改。</p></blockquote><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"installed done"</span> &gt; /tmp/ipk.log</span><br></pre></td></tr></table></figure></p><h3 id="postinst-卸载脚本"><a href="#postinst-卸载脚本" class="headerlink" title="postinst 卸载脚本"></a>postinst 卸载脚本</h3><blockquote><p>自己约的X🤣。。</p></blockquote><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">rm -rf /tmp/ipk.log</span><br></pre></td></tr></table></figure></p><h3 id="打包"><a href="#打包" class="headerlink" title="打包~"></a>打包~</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -czf control.tar.gz *</span><br></pre></td></tr></table></figure><h2 id="data-tar-gz"><a href="#data-tar-gz" class="headerlink" title="data.tar.gz"></a>data.tar.gz</h2><blockquote><p>此处完全是根据你要增加的脚本按根目录进行存放的。</p></blockquote><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── ss-redir</span><br><span class="line">│   └── ss-tunnel</span><br><span class="line">├── data.tar.gz</span><br><span class="line">├── etc</span><br><span class="line">│   ├── dnsmasq.d</span><br><span class="line">│   │   ├── address.conf</span><br><span class="line">│   │   ├── dns.conf</span><br><span class="line">│   │   ├── ipset.conf</span><br><span class="line">│   │   ├── option.conf</span><br><span class="line">│   │   └── server.conf</span><br><span class="line">│   ├── pdnsd.conf</span><br><span class="line">│   └── shadowsock.json</span><br><span class="line">├── root</span><br><span class="line">│   ├── addDnsmasq.sh</span><br><span class="line">│   └── changeService.sh</span><br><span class="line">└── usr</span><br><span class="line">    └── sbin</span><br><span class="line">        └── pdnsd</span><br></pre></td></tr></table></figure></p><h3 id="打包-1"><a href="#打包-1" class="headerlink" title="打包~"></a>打包~</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -czf data.tar.gz *</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>将三个文件放在一起进行打包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -czf mIPK.ipk *</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;.ipk&lt;/code&gt; 本质是&lt;code&gt;tar.gz&lt;/code&gt;格式的压缩包, 按照某种规范格式(&lt;code&gt;类似.deb包&lt;/code&gt;)进行 …&lt;br&gt;
    
    </summary>
    
      <category term="OpenWrt" scheme="https://hocg.in/categories/OpenWrt/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="OpenWrt" scheme="https://hocg.in/tags/OpenWrt/"/>
    
      <category term="Shell" scheme="https://hocg.in/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 中的 Spring Boot 开发模式</title>
    <link href="https://hocg.in/2017/10/20/IDEA-%E4%B8%AD%E7%9A%84-Spring-Boot-%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    <id>https://hocg.in/2017/10/20/IDEA-中的-Spring-Boot-开发模式/</id>
    <published>2017-10-20T15:28:09.000Z</published>
    <updated>2018-05-05T18:00:01.324Z</updated>
    
    <content type="html"><![CDATA[<p>🤑 完全热部署, 配置完成瞬间舒爽无比。<br><a id="more"></a></p><h2 id="java-文件和配置文件更改后进行自动重启"><a href="#java-文件和配置文件更改后进行自动重启" class="headerlink" title=".java 文件和配置文件更改后进行自动重启"></a><code>.java</code> 文件和配置文件更改后进行自动重启</h2><ol><li>更改<code>IDEA</code>中的如下设置<code>Build project automatically</code>。</li></ol><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%2022.30.09.png" alt="屏幕快照 2017-10-19 22.30.09.png"></p><ol><li>打开<code>IDEA</code>的<code>Action window</code>, 快捷键如下:</li></ol><ul><li>Linux : <code>CTRL+SHIFT+A</code></li><li>Mac OSX : <code>SHIFT+COMMAND+A</code></li><li>Windows : <code>CTRL+ALT+SHIFT+/</code><br>输入(选择) <code>Registry...</code>, 选择如下:</li></ul><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%2022.36.39.png" alt="屏幕快照 2017-10-19 22.36.39.png"></p><p>此时进行<code>.java</code> 文件和配置文件修改时, 会进行 Spring Boot 重启。</p><h2 id="当更改静态HTML进行实时刷新"><a href="#当更改静态HTML进行实时刷新" class="headerlink" title="当更改静态HTML进行实时刷新"></a>当更改静态<code>HTML</code>进行实时刷新</h2><ol><li>加入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>安装浏览器插件</li></ol><ul><li><p><a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="external">Chrome 插件</a></p></li><li><p><a href="https://addons.mozilla.org/en-US/firefox/addon/livereload/" target="_blank" rel="external">Firefox 插件</a></p></li><li><p><a href="http://download.livereload.com/2.1.0/LiveReload-2.1.0.safariextz" target="_blank" rel="external">Safari 插件</a></p></li></ul><ol><li>更改文件和静态页面(HTML)都可以进行热部署类。</li></ol><h2 id="实时刷新thymeleaf模版文件"><a href="#实时刷新thymeleaf模版文件" class="headerlink" title="实时刷新thymeleaf模版文件"></a>实时刷新<code>thymeleaf</code>模版文件</h2><p>配置文件设置取消缓存:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    thymeleaf:</span></span><br><span class="line"><span class="attr">        cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Chrome 设置取消缓存:</p><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%2022.46.23.png" alt="屏幕快照 2017-10-19 22.46.23.png"></p><p>此时几乎所有的东西(<code>.java</code>/<code>`/</code>SpringBoot 配置文件`)都可以进行热部署了。<br>包括:</p><ul><li>修改 <code>.java</code> 文件。</li><li>修改页面(<code>thymeleaf</code> <code>html</code> <code>..</code>) 文件。</li><li>修改 <code>SpringBoot 配置文件</code>。</li><li>增删静态文件(<code>css</code> <code>js</code> <code>图片</code>)。</li></ul><h2 id="关于定制化热部署"><a href="#关于定制化热部署" class="headerlink" title="关于定制化热部署"></a>关于定制化热部署</h2><p> 可查询<code>spring-boot-devtools</code>的使用, 使用以下子项进行配置。<br> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   devtools:</span></span><br></pre></td></tr></table></figure></p><h2 id="IDEA-扩展"><a href="#IDEA-扩展" class="headerlink" title="IDEA 扩展"></a>IDEA 扩展</h2><blockquote><p>pom.xml 添加以下依赖可查看更多的信息。<br>该依赖是可查看监控信息的, 更多使用移步 Google.com。</p></blockquote> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA 显示如下:</p><p> <img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%2014.18.38.png" alt="屏幕快照 2017-10-29 14.18.38.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤑 完全热部署, 配置完成瞬间舒爽无比。&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="Ubuntu" scheme="https://hocg.in/tags/Ubuntu/"/>
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="SpringBoot" scheme="https://hocg.in/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JQuery.pjax 无法再次初始化当前页面的JS</title>
    <link href="https://hocg.in/2017/10/19/JQuery.pjax%E6%97%A0%E6%B3%95%E5%86%8D%E6%AC%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84JS/"/>
    <id>https://hocg.in/2017/10/19/JQuery.pjax无法再次初始化当前页面的JS/</id>
    <published>2017-10-19T14:07:20.000Z</published>
    <updated>2017-10-22T04:16:22.962Z</updated>
    
    <content type="html"><![CDATA[<p>Pjax 很久之前用过一次, 这一次在整合后台模版，发现网上对这个坑竟然是改源码…在这详细记录一下。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当 <code>JQuery.pjax</code> 加载页面后, 再次加载该页面时，其内部的初始化 <code>JS</code> 或 <code>script inline</code> 并不能被再次执行。例如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pjax-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jQuery 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jQuery Pjax --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"jquery.pjax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ($.support.pjax) &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).pjax(<span class="string">'a[data-pjax]'</span>, <span class="string">'#pjax-container'</span>, &#123;</span></span><br><span class="line"><span class="undefined">                    maxCacheLength: 0,</span></span><br><span class="line"><span class="javascript">                    push: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                    replace: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    fragment: <span class="string">'#pjax-container'</span>,</span></span><br><span class="line"><span class="undefined">                    timeout: 8000</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"不能被再次执行"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不能被再次执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>  <span class="attr">src</span>=<span class="string">"init.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>其原因是<code>JQuery.pjax</code>对<code>js</code>进行了缓存, 可以使用<code>JQuery</code>进行加载, 当然其代价是牺牲了这部分都缓存, 不过因为是特定页面的脚本, 牺牲的缓存几乎可以忽略。例子如下:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pjax-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 能被再次执行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $.getScript(<span class="string">'/admin-lte/dist/js/pages/dashboard2.js'</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>  <span class="attr">src</span>=<span class="string">"init.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"能被再次执行"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jQuery 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jQuery Pjax --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"jquery.pjax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ($.support.pjax) &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).pjax(<span class="string">'a[data-pjax]'</span>, <span class="string">'#pjax-container'</span>, &#123;</span></span><br><span class="line"><span class="undefined">                    maxCacheLength: 0,</span></span><br><span class="line"><span class="javascript">                    push: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                    replace: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    fragment: <span class="string">'#pjax-container'</span>,</span></span><br><span class="line"><span class="undefined">                    timeout: 8000</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pjax 很久之前用过一次, 这一次在整合后台模版，发现网上对这个坑竟然是改源码…在这详细记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://hocg.in/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://hocg.in/tags/JavaScript/"/>
    
      <category term="Pjax" scheme="https://hocg.in/tags/Pjax/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf 3.0 手册</title>
    <link href="https://hocg.in/2017/10/18/Thymeleaf-3.0-%E6%89%8B%E5%86%8C/"/>
    <id>https://hocg.in/2017/10/18/Thymeleaf-3.0-手册/</id>
    <published>2017-10-18T08:40:51.000Z</published>
    <updated>2018-01-04T08:26:38.907Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 官方推崇的模版引擎，遵循 HTML5规范。<br><a id="more"></a></p><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>若要完全遵循HTML5规范，可使用 <code>data-th-*</code> 代替 <code>th:*</code>。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="th-each"><a href="#th-each" class="headerlink" title="th:each"></a>th:each</h3><blockquote><p>foreach 循环<br>语法: th:each=”obj, index:list”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:each</span>=<span class="string">"permission, i:$&#123;role.permissions&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:attr</span>=<span class="string">"data-tt-id=$&#123;permission.id&#125;, data-tt-parent-id=$&#123;permission.parent&#125;, data-tt-branch=$&#123;permission.hasChildren&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;permission.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;permission.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;permission.type&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;permission.permission&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="th-inline"><a href="#th-inline" class="headerlink" title="th:inline"></a>th:inline</h3><blockquote><p>解析内嵌语法, 一般是混合javascript<br>语法: th:inline=”javascript|text|none”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> welcome = [[$&#123;welcome&#125;]] <span class="string">'这是一个 Thymeleaf 变量'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> default_value = [[$&#123;maxCount?:<span class="number">0</span>&#125;]]</span></span><br><span class="line"><span class="javascript"><span class="comment">/*]]&gt;*/</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="th-fragment"><a href="#th-fragment" class="headerlink" title="th:fragment"></a>th:fragment</h3><blockquote><p>定义模版，语法: th:fragment=”模块名(变量)”<br>变量部分为可选, 配合 th:with 使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不保留本身的标签, 保留 th:fragment 的标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"/admin/fragments/header::header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 保留本身的标签, 保留 th:fragment 的标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"/admin/fragments/header::header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @过期, 保留本身的标签, 不保留 th:fragment 的标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"/admin/fragments/header::header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="th-with"><a href="#th-with" class="headerlink" title="th:with"></a>th:with</h3><blockquote><p>定义变量。语法: th:with=”字段1=值, 字段2=值2”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"id='UploadImage',var='image',height=1,maxCount=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="th-if"><a href="#th-if" class="headerlink" title="th:if"></a>th:if</h3><blockquote><p>就是 if ..<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;true&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    布尔值.</span></span><br><span class="line"><span class="comment">    0 = false</span></span><br><span class="line"><span class="comment">    "false"/"off"/"no" = false</span></span><br><span class="line"><span class="comment">    null = false</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="th-switch-th-case"><a href="#th-switch-th-case" class="headerlink" title="th:switch/th:case"></a>th:switch/th:case</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;val&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:case</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:case</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="th-selected"><a href="#th-selected" class="headerlink" title="th:selected"></a>th:selected</h3><blockquote><p>可用于 <option> 标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"type"</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;permission?.type==0&#125;"</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;permission?.type==1&#125;"</span>&gt;</span>数据<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></option></p></blockquote><h2 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/* 这里是 编译器显示为注释, 浏览器不可见 */--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--/*--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是 编译器显示不注释，浏览器不可见 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--*/--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--/*/</span></span><br><span class="line"><span class="comment">&lt;div th:text="$&#123;'这里是 编辑器显示为注释, 浏览器可见'&#125;"&gt;...&lt;/div&gt;</span></span><br><span class="line"><span class="comment">/*/--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="URL-表达式"><a href="#URL-表达式" class="headerlink" title="URL 表达式"></a>URL 表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/tup.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"绝对路径"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;img alt="绝对路径" src="/img/tup.png"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;../img/tup.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"相对路径"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;img alt="相对路径" src="../img/tup.png"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;../img/tup.png(size=$&#123;100&#125;)&#125;"</span> <span class="attr">alt</span>=<span class="string">"带参数的路径"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;img alt="带参数的路径" src="../img/tup.png?size=100"&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="国际化表达式"><a href="#国际化表达式" class="headerlink" title="国际化表达式"></a>国际化表达式</h3><ol><li>创建 <code>resources/messages_zh_CN.properties</code>, 其内容:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.error=错误</span><br></pre></td></tr></table></figure><ol><li>配置 <code>application.yml</code> (使用 xml 的执行转换)</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  messages:</span></span><br><span class="line"><span class="attr">    basename:</span> <span class="string">messages_zh_CN</span></span><br></pre></td></tr></table></figure><ol><li>使用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"#&#123;message.error&#125;"</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量表达式"><a href="#变量表达式" class="headerlink" title="变量表达式"></a>变量表达式</h3><blockquote><p>最基本的表达式, 类似于 EL 表达式。</p><ul><li>合 <code>org.springframework.ui.Model</code> 使用。</li><li>可以使用众多内置对象。</li><li>@访问 Spring 容器内对象</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;author.name&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量表达式-扩展-1"><a href="#变量表达式-扩展-1" class="headerlink" title="变量表达式 - 扩展 1"></a>变量表达式 - 扩展 1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:object</span>=<span class="string">"$&#123;author&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"*&#123;mail&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"*&#123;address&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    等价于</span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">        &lt;li th:text="$&#123;author.name&#125;"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">        &lt;li th:text="$&#123;author.mail&#125;"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">        &lt;li th:text="$&#123;author.address&#125;"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量表达式-扩展-2"><a href="#变量表达式-扩展-2" class="headerlink" title="变量表达式 - 扩展 2"></a>变量表达式 - 扩展 2</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;@demoService.getStr('hocgin')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="预处理表达式"><a href="#预处理表达式" class="headerlink" title="预处理表达式"></a>预处理表达式</h3><ol><li>前置设置, Controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(&#123;<span class="string">"/test.html"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model, @PathVariable String page)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"key"</span>, <span class="string">"error"</span>);</span><br><span class="line">    HashMap&lt;String, String&gt; vm = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    vm.put(<span class="string">"error"</span>, <span class="string">"来自 $&#123;&#125; 表达式"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"obj"</span>, vm);</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"test.html"</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>前置设置, <code>messages_zh_CN.properties</code> 参考<strong>国际化表达式</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.error=错误</span><br></pre></td></tr></table></figure><ol><li>test.html 编写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/img/__$&#123;1+1&#125;__&#125;"</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href="/img/2"&gt;连接&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"#&#123;message.__$&#123;key&#125;__&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div&gt;错误&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;obj.__$&#123;key&#125;__&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div&gt;来自 $&#123;&#125; 表达式&lt;/div&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Fragment-表达式"><a href="#Fragment-表达式" class="headerlink" title="Fragment 表达式"></a>Fragment 表达式</h3><blockquote><p>~{…}</p></blockquote><h2 id="表达式语法"><a href="#表达式语法" class="headerlink" title="表达式语法"></a>表达式语法</h2><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>使用 <code>+</code> 或者 <code>|..|</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'1+1=' + $&#123;1+1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1+1=2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|1+1=$&#123;1+1&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1+1=2 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><p>使用 <code>+, -, *, /, %</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"-((1+1-1)*2/2)%9"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- -1 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="与-或-非"><a href="#与-或-非" class="headerlink" title="与 或 非"></a>与 或 非</h3><p>使用 <code>and , or</code> 和 <code>! , not</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"1==1 and true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"true and false"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- false --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"true or false"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"not true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"! false"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h3><p>使用 <code>&gt;, &lt;, &gt;=, &lt;=, ==, !=</code>。<br>或者 <code>gt, lt, ge, le, eq, ne</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"((1 &gt; 2 and 2 &lt; 3) or (2 &gt;= 2 and 2 &lt;= 5)) and (1 == 1 and 1 != 2)"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"((1 gt 2 and 2 lt 3) or (2 ge 2 and 2 le 5)) and (1 eq 1 and 1 ne 2)"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单条件表达式"><a href="#简单条件表达式" class="headerlink" title="简单条件表达式"></a>简单条件表达式</h3><p>使用:<br>if-then <code>(if) ? (then)</code><br>if-then-else <code>(if) ? (then) : (else)</code><br>default <code>(value) ?: (defaultValue)</code>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"true ? 'hocgin'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hocgin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"false ? 'hocgin' : 'hocg.in'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hocg.in --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iname&#125; ?: 'hocgin'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hocgin --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解析优先级"><a href="#解析优先级" class="headerlink" title="解析优先级"></a>解析优先级</h2><table><thead><tr><th>级别</th><th>描述</th><th>th属性</th></tr></thead><tbody><tr><td>1</td><td>(Fragment inclusion)代码片段导入</td><td><code>th:insert</code>,<code>th:replace</code></td></tr><tr><td>2</td><td>(Fragment iteration)迭代</td><td><code>th:each</code></td></tr><tr><td>3</td><td>(Conditional evaluation)条件</td><td><code>th:if</code>,<code>th:unless</code>,<code>th:switch</code>,<code>th:case</code></td></tr><tr><td>4</td><td>(Local variable definition)局部变量</td><td><code>th:object</code>,<code>th:with</code></td></tr><tr><td>5</td><td>(General attribute modification)通用属性修改</td><td><code>th:attr</code>,<code>th:attrprepend</code>,<code>th:attrappend</code></td></tr><tr><td>6</td><td>(Specific attribute modification)具体属性修改</td><td><code>th:value</code>,<code>th:href</code>,<code>th:src</code> …</td></tr><tr><td>7</td><td>(Text tag body modification) 文本节点修改</td><td><code>th:text</code>,<code>th:utext</code></td></tr><tr><td>8</td><td>(Fragment specification) 代码段定义</td><td><code>th:fragment</code></td></tr><tr><td>9</td><td>(Fragment removal) 代码段删除</td><td><code>th:remove</code></td></tr></tbody></table><h2 id="基础对象"><a href="#基础对象" class="headerlink" title="基础对象"></a>基础对象</h2><h3 id="ctx-org-thymeleaf-spring4-context-SpringWebContext"><a href="#ctx-org-thymeleaf-spring4-context-SpringWebContext" class="headerlink" title="#ctx (org.thymeleaf.spring4.context.SpringWebContext)"></a><code>#ctx</code> (org.thymeleaf.spring4.context.SpringWebContext)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * org.thymeleaf.context.IContext</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">// 当前语言环境(eg. en_US)。 等价于 &#123;#locale&#125;</span></span><br><span class="line">$&#123;#ctx.locale&#125;</span><br><span class="line"><span class="comment">// org.thymeleaf.context.VariablesMap 对象, 内部存储的是可用于当前上下文(Context)的对象。等价于 &#123;#vars&#125;</span></span><br><span class="line">$&#123;#ctx.variables&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * org.thymeleaf.context.IWebContext</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">$&#123;#ctx.applicationAttributes&#125;</span><br><span class="line"><span class="comment">// 等价于 &#123;#httpServletRequest&#125;</span></span><br><span class="line">$&#123;#ctx.httpServletRequest&#125;</span><br><span class="line">$&#123;#ctx.httpServletResponse&#125;</span><br><span class="line"><span class="comment">// 等价于 &#123;#httpSession&#125;</span></span><br><span class="line">$&#123;#ctx.httpSession&#125;</span><br><span class="line">$&#123;#ctx.requestAttributes&#125;</span><br><span class="line">$&#123;#ctx.requestParameters&#125;</span><br><span class="line">$&#123;#ctx.servletContext&#125;</span><br><span class="line">$&#123;#ctx.sessionAttributes&#125;</span><br></pre></td></tr></table></figure><h3 id="param-org-apache-catalina-util-ParameterMap"><a href="#param-org-apache-catalina-util-ParameterMap" class="headerlink" title="param (org.apache.catalina.util.ParameterMap)"></a><code>param</code> (org.apache.catalina.util.ParameterMap)</h3><p>包含当前页面的请求的参数(eg. <code>http://localhost:8080/admin/test.html?name=hocgin</code>)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回对象</span></span><br><span class="line">$&#123;param.name&#125; </span><br><span class="line"><span class="comment">// 获得值: hocgin</span></span><br><span class="line">$&#123;param.name[<span class="number">0</span>]&#125; </span><br><span class="line">$&#123;param.size()&#125;</span><br><span class="line">$&#123;param.isEmpty()&#125;</span><br><span class="line">$&#123;param.containsKey(<span class="string">'name'</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="session-org-thymeleaf-context-WebSessionVariablesMap"><a href="#session-org-thymeleaf-context-WebSessionVariablesMap" class="headerlink" title="session (org.thymeleaf.context.WebSessionVariablesMap)"></a><code>session</code> (org.thymeleaf.context.WebSessionVariablesMap)</h3><p>从 Session 获取内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得值: hocgin</span></span><br><span class="line">$&#123;session.name&#125;</span><br><span class="line">$&#123;session.size()&#125;</span><br><span class="line">$&#123;session.isEmpty()&#125;</span><br><span class="line">$&#123;session.containsKey(<span class="string">'name'</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="httpServletRequest-org-apache-catalina-connector-RequestFacade"><a href="#httpServletRequest-org-apache-catalina-connector-RequestFacade" class="headerlink" title="#httpServletRequest (org.apache.catalina.connector.RequestFacade)"></a><code>#httpServletRequest</code> (org.apache.catalina.connector.RequestFacade)</h3><h3 id="themes-org-thymeleaf-spring4-expression-Themes"><a href="#themes-org-thymeleaf-spring4-expression-Themes" class="headerlink" title="#themes (org.thymeleaf.spring4.expression.Themes)"></a><code>#themes</code> (org.thymeleaf.spring4.expression.Themes)</h3><h3 id="application"><a href="#application" class="headerlink" title="application"></a><code>application</code></h3><h3 id="dates-org-thymeleaf-expression-Dates"><a href="#dates-org-thymeleaf-expression-Dates" class="headerlink" title="#dates (org.thymeleaf.expression.Dates)"></a><code>#dates</code> (org.thymeleaf.expression.Dates)</h3><h3 id="calendars-org-thymeleaf-expression-Calendars"><a href="#calendars-org-thymeleaf-expression-Calendars" class="headerlink" title="#calendars (org.thymeleaf.expression.Calendars)"></a><code>#calendars</code> (org.thymeleaf.expression.Calendars)</h3><h3 id="numbers-org-thymeleaf-expression-Numbers"><a href="#numbers-org-thymeleaf-expression-Numbers" class="headerlink" title="#numbers (org.thymeleaf.expression.Numbers)"></a><code>#numbers</code> (org.thymeleaf.expression.Numbers)</h3><h3 id="strings-org-thymeleaf-expression-Strings"><a href="#strings-org-thymeleaf-expression-Strings" class="headerlink" title="#strings (org.thymeleaf.expression.Strings)"></a><code>#strings</code> (org.thymeleaf.expression.Strings)</h3><h3 id="objects-org-thymeleaf-expression-Objects"><a href="#objects-org-thymeleaf-expression-Objects" class="headerlink" title="#objects (org.thymeleaf.expression.Objects)"></a><code>#objects</code> (org.thymeleaf.expression.Objects)</h3><h3 id="bools-org-thymeleaf-expression-Bools"><a href="#bools-org-thymeleaf-expression-Bools" class="headerlink" title="#bools (org.thymeleaf.expression.Bools)"></a><code>#bools</code> (org.thymeleaf.expression.Bools)</h3><h3 id="arrays-org-thymeleaf-expression-Arrays"><a href="#arrays-org-thymeleaf-expression-Arrays" class="headerlink" title="#arrays (org.thymeleaf.expression.Arrays)"></a><code>#arrays</code> (org.thymeleaf.expression.Arrays)</h3><h3 id="lists-org-thymeleaf-expression-Lists"><a href="#lists-org-thymeleaf-expression-Lists" class="headerlink" title="#lists (org.thymeleaf.expression.Lists)"></a><code>#lists</code> (org.thymeleaf.expression.Lists)</h3><h3 id="sets-org-thymeleaf-expression-Sets"><a href="#sets-org-thymeleaf-expression-Sets" class="headerlink" title="#sets (org.thymeleaf.expression.Sets)"></a><code>#sets</code> (org.thymeleaf.expression.Sets)</h3><h3 id="maps-org-thymeleaf-expression-Maps"><a href="#maps-org-thymeleaf-expression-Maps" class="headerlink" title="#maps (org.thymeleaf.expression.Maps)"></a><code>#maps</code> (org.thymeleaf.expression.Maps)</h3><h3 id="aggregates-org-thymeleaf-expression-Aggregates"><a href="#aggregates-org-thymeleaf-expression-Aggregates" class="headerlink" title="#aggregates (org.thymeleaf.expression.Aggregates)"></a><code>#aggregates</code> (org.thymeleaf.expression.Aggregates)</h3><h3 id="messages-org-thymeleaf-expression-Messages"><a href="#messages-org-thymeleaf-expression-Messages" class="headerlink" title="#messages (org.thymeleaf.expression.Messages)"></a><code>#messages</code> (org.thymeleaf.expression.Messages)</h3><h3 id="ids-org-thymeleaf-expression-Ids"><a href="#ids-org-thymeleaf-expression-Ids" class="headerlink" title="#ids (org.thymeleaf.expression.Ids)"></a><code>#ids</code> (org.thymeleaf.expression.Ids)</h3><p><strong>代码示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">### `#locale` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#ctx` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#ctx&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#vars` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#vars&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">### `param` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;param&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `application` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;application&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `session` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#httpSession` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#httpSession&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#httpServletRequest` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#httpServletRequest&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">### `#themes` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#themes&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#dates` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#calendars` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#calendars&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#numbers` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#numbers&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#strings` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#objects` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#objects&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#bools` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#bools&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#arrays` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#arrays&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#lists` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#lists&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#sets` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#sets&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#maps` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#maps&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#aggregates` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#aggregates&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#messages` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#messages&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">### `#ids` (<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#ids&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>在 <code>thymeleaf</code> 中使用 Spring 容器内的单例.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;@demoService.getStr('hocgin')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引入模版片段</li></ul><ol><li><p>XPath 表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"mytemplate :: [//div[@class='content']]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS 表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"mytemplate :: [div.content]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>引入公有片段(JS 或 CSS)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">css</span> <span class="attr">th:replace</span>=<span class="string">"mytemplate :: common-css"</span>&gt;</span><span class="tag">&lt;/<span class="name">css</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">js</span> <span class="attr">th:replace</span>=<span class="string">"@&#123;mytemplate&#125; :: common-css"</span>&gt;</span><span class="tag">&lt;/<span class="name">js</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可结合 路径表达式 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="thymeleaf-layout-dialect"><a href="#thymeleaf-layout-dialect" class="headerlink" title="thymeleaf-layout-dialect"></a>thymeleaf-layout-dialect</h3><blockquote><p>一般情况网站都有一个外部框架, 如 header 或者 footer, 这个扩展便是用于抽离那些重复的部分的。</p><h4 id="layout-decorator"><a href="#layout-decorator" class="headerlink" title="layout:decorator"></a>layout:decorator</h4><p>指定需使用的父级模版<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout:decorator</span>=<span class="string">"/admin/_layouts/default"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="layout-fragment"><a href="#layout-fragment" class="headerlink" title="layout:fragment"></a>layout:fragment</h4><blockquote><p>在父模版中使用定义一个标记，<br>在子模版中使用覆盖到父模版位置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>父模版内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子模版内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子模版内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="layout-title-pattern"><a href="#layout-title-pattern" class="headerlink" title="layout:title-pattern"></a>layout:title-pattern</h4><blockquote><p>用与 <title> 标签, 指定 title 的值。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 后台 - 子标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span> <span class="attr">layout:title-pattern</span>=<span class="string">"$DECORATOR_TITLE - $CONTENT_TITLE"</span>&gt;</span>后台<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure></title></p></blockquote><h2 id="黑科技"><a href="#黑科技" class="headerlink" title="黑科技"></a>黑科技</h2><ol><li>当我们想取一个对象里面的一个属性, 但这个对象可能为空时(😋)。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user?.address?.city&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 官方推崇的模版引擎，遵循 HTML5规范。&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="HTML5" scheme="https://hocg.in/tags/HTML5/"/>
    
      <category term="Thymeleaf" scheme="https://hocg.in/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Java线程池和锁-小记</title>
    <link href="https://hocg.in/2017/10/07/Java%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%20%E5%92%8C%20%E9%94%81%20%E5%B0%8F%E8%AE%B0/"/>
    <id>https://hocg.in/2017/10/07/Java 线程池 和 锁 小记/</id>
    <published>2017-10-06T17:03:29.000Z</published>
    <updated>2018-05-05T13:02:21.829Z</updated>
    
    <content type="html"><![CDATA[<p>提取想要的apk， 例如CM ROM包中的含天气的时钟不错！</p><a id="more"></a><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p>ExecutorService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrencyMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">ExecutorService executor = Executors.newWorkStealingPool();</span><br><span class="line"></span><br><span class="line">List&lt;Callable&lt;String&gt;&gt; callables = Arrays.asList(</span><br><span class="line">() -&gt; <span class="string">"task1"</span>,</span><br><span class="line">() -&gt; <span class="string">"task2"</span>,</span><br><span class="line">() -&gt; <span class="string">"task3"</span>);</span><br><span class="line"></span><br><span class="line">executor.invokeAll(callables)</span><br><span class="line">.stream()</span><br><span class="line">.map(future -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> future.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ScheduledExecutorService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrencyMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">ScheduledFuture&lt;?&gt; future = executor.schedule(() -&gt; System.out.println(<span class="string">"执行延迟任务"</span>), <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> remainingDelay = future.getDelay(TimeUnit.MILLISECONDS);</span><br><span class="line">System.out.println(String.format(<span class="string">"剩余延迟时间: %sms"</span>, remainingDelay));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>区别</strong> 两者的区别是<code>ScheduledExecutorService</code>是可延迟执行。</p><h3 id="同步-Synchronized"><a href="#同步-Synchronized" class="headerlink" title="同步(Synchronized)"></a>同步(Synchronized)</h3><ol><li>对象锁<br><strong>语法:</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==[测试一:同一对象]==</span></span><br><span class="line"><span class="comment">// 结果: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">Thread runnable1 = <span class="keyword">new</span> Thread(() -&gt; t1.exec());</span><br><span class="line">Thread runnable2 = <span class="keyword">new</span> Thread(() -&gt; t1.exec());</span><br><span class="line">runnable1.start();</span><br><span class="line">runnable2.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==[测试二:不同一对象]==</span></span><br><span class="line"><span class="comment">// 结果: 0 0 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 9 8 9</span></span><br><span class="line">Test t2 = <span class="keyword">new</span> Test();</span><br><span class="line">Thread runnable3 = <span class="keyword">new</span> Thread(() -&gt; t1.exec());</span><br><span class="line">Thread runnable4 = <span class="keyword">new</span> Thread(() -&gt; t2.exec());</span><br><span class="line">runnable3.start();</span><br><span class="line">runnable4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下两种方式等价，仅作用范围不一样。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.printf(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.printf(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>结论:</strong> 同一对象调用该方法是锁定的，不同对象不会进行锁定。  </p><ol><li>类锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// ==[测试一:同一对象]==</span></span><br><span class="line"><span class="comment">// 结果: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">Thread runnable1 = <span class="keyword">new</span> Thread(() -&gt; t1.exec());</span><br><span class="line">Thread runnable2 = <span class="keyword">new</span> Thread(() -&gt; t1.exec());</span><br><span class="line">runnable1.start();</span><br><span class="line">runnable2.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==[测试二:不同一对象]==</span></span><br><span class="line"><span class="comment">// 结果: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">Test t2 = <span class="keyword">new</span> Test();</span><br><span class="line">Thread runnable3 = <span class="keyword">new</span> Thread(() -&gt; t1.exec());</span><br><span class="line">Thread runnable4 = <span class="keyword">new</span> Thread(() -&gt; t2.exec());</span><br><span class="line">runnable3.start();</span><br><span class="line">runnable4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下两种方式等价</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.printf(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.printf(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>结论:</strong> 该方式锁的作用范围是整个类。</p><ol><li>指定锁<br><strong>语法:</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMain</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==[测试一:同一对象]==</span></span><br><span class="line"><span class="comment">// 结果: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">Thread runnable1 = <span class="keyword">new</span> Thread(() -&gt; t1.exec(lock));</span><br><span class="line">Thread runnable2 = <span class="keyword">new</span> Thread(() -&gt; t1.exec(lock));</span><br><span class="line">runnable1.start();</span><br><span class="line">runnable2.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==[测试二:不同一对象]==</span></span><br><span class="line"><span class="comment">// 结果: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">Test t2 = <span class="keyword">new</span> Test();</span><br><span class="line">Thread runnable3 = <span class="keyword">new</span> Thread(() -&gt; t1.exec(lock));</span><br><span class="line">Thread runnable4 = <span class="keyword">new</span> Thread(() -&gt; t2.exec(lock));</span><br><span class="line">runnable3.start();</span><br><span class="line">runnable4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.printf(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>结论:</strong> 该方式取决于传入的锁。<strong>当对象属性发生改变时，锁就失去了作用。</strong></p><p>对于 Java8 中，<code>ReentrantLock</code> 可实现锁的作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提取想要的apk， 例如CM ROM包中的含天气的时钟不错！&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hocg.in/categories/Java/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Java" scheme="https://hocg.in/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>解决 WebView 点击时网页不断闪耀</title>
    <link href="https://hocg.in/2017/09/28/%E8%A7%A3%E5%86%B3WebView%E7%82%B9%E5%87%BB%E6%97%B6%E7%BD%91%E9%A1%B5%E4%B8%8D%E6%96%AD%E9%97%AA%E8%80%80/"/>
    <id>https://hocg.in/2017/09/28/解决WebView点击时网页不断闪耀/</id>
    <published>2017-09-28T13:47:21.000Z</published>
    <updated>2017-09-28T14:14:54.743Z</updated>
    
    <content type="html"><![CDATA[<p>解决高版本 WebView 点击时网页不断闪耀的问题 🤗<br><a id="more"></a></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>网页渲染开启了硬件加速，如果你也出现了该问题，可以尝试关闭硬件加速。  </p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>方案一: 在xml中使用<code>android:layerType=&quot;software&quot;</code>进行关闭。<strong>推荐</strong><br>方案二: 通过 java 代码<code>webView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);</code>进行关闭。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/hocgin/BroswerKit/blob/master/app/src/main/res/layout/activity_browser.xml#L40-L53" target="_blank" rel="external">BroswerKit</a>进行标记的这段代码解决了我的闪耀问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决高版本 WebView 点击时网页不断闪耀的问题 🤗&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hocg.in/categories/Android/"/>
    
    
      <category term="Android" scheme="https://hocg.in/tags/Android/"/>
    
      <category term="问题" scheme="https://hocg.in/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>解决 ProgressBar 上下出现空白现象</title>
    <link href="https://hocg.in/2017/09/27/%E8%A7%A3%E5%86%B3ProgressBar%E9%A1%B6%E9%83%A8%E5%87%BA%E7%8E%B0%E7%A9%BA%E7%99%BD%E7%8E%B0%E8%B1%A1/"/>
    <id>https://hocg.in/2017/09/27/解决ProgressBar顶部出现空白现象/</id>
    <published>2017-09-27T02:27:22.000Z</published>
    <updated>2017-09-28T14:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>解决 ProgressBar 上下出现空白现象 🤠<br><a id="more"></a></p><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><p>一般情况我们使用如下代码来创建<code>ProgressBar</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#fff"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:max</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:indeterminate</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么将会出现如下情况:<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-28%2021.58.00.png" alt="出现空白间隔问题"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过变更<code>android:layout_marginBottom</code>和<code>android:layout_marginTop</code>在结合<code>android:background</code>设置为透明来处理这个问题:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"-7dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"-7dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"#00ffffff"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:max</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:indeterminate</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>以下是处理后的结果<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-28%2022.03.46.png" alt="解决问题后"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决 ProgressBar 上下出现空白现象 🤠&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hocg.in/categories/Android/"/>
    
    
      <category term="Android" scheme="https://hocg.in/tags/Android/"/>
    
      <category term="问题" scheme="https://hocg.in/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt 入门篇</title>
    <link href="https://hocg.in/2017/09/18/OpenWrt-%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>https://hocg.in/2017/09/18/OpenWrt-入门篇/</id>
    <published>2017-09-18T06:32:26.000Z</published>
    <updated>2017-11-11T15:11:01.049Z</updated>
    
    <content type="html"><![CDATA[<p>今天刚好重刷 OpenWrt 固件，整理整理<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.wikiwand.com/zh/OpenWrt" target="_blank" rel="external">什么是 OpenWrt?</a></p><h2 id="关于支持-OpenWrt-的路由器"><a href="#关于支持-OpenWrt-的路由器" class="headerlink" title="关于支持 OpenWrt 的路由器"></a>关于支持 OpenWrt 的路由器</h2><p>可以去 <a href="https://wiki.openwrt.org/toh/start" target="_blank" rel="external">支持 OpenWrt 的路由器列表</a> 查看支持的路由器, 了解其 <strong>CPU型号(既芯片型号)</strong> <strong>RAM容量</strong> <strong>Flash容量</strong></p><h2 id="关于-OpenWrt-固件的下载"><a href="#关于-OpenWrt-固件的下载" class="headerlink" title="关于 OpenWrt 固件的下载"></a>关于 OpenWrt 固件的下载</h2><p><a href="https://downloads.openwrt.org" target="_blank" rel="external">OpenWrt 官方下载固件地址</a><br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2012.12.12.png" alt="image"><br><strong>关于下载地址格式:</strong></p><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2012.26.38.png" alt="image"></p><p><strong>关于固件类型</strong></p><ul><li>后缀为<code>factory</code>是用于从原厂固件刷为 OpenWrt。</li><li>后缀为<code>sysupgrade</code>是用于从 OpenWrt 更新 OpenWrt。</li></ul><h2 id="原厂刷-OpenWrt-固件"><a href="#原厂刷-OpenWrt-固件" class="headerlink" title="原厂刷 OpenWrt 固件"></a>原厂刷 OpenWrt 固件</h2><blockquote><p>待补充</p></blockquote><h2 id="网页界面-OpenWrt-备份-amp-升级固件"><a href="#网页界面-OpenWrt-备份-amp-升级固件" class="headerlink" title="网页界面 OpenWrt 备份 &amp; 升级固件"></a>网页界面 OpenWrt 备份 &amp; 升级固件</h2><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2012.50.34.png" alt="image"><br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/屏幕快照%202017-09-18%2012.57.13.png" alt="image"></p><h2 id="OpenWrt-安全模式"><a href="#OpenWrt-安全模式" class="headerlink" title="OpenWrt 安全模式"></a>OpenWrt 安全模式</h2><blockquote><p>当我们无法进入网页界面，可以使用<strong>安全模式</strong>管理恢复固件<br><strong>必须使用有线电缆进行连接。</strong><br>环境: Linux or macOS</p></blockquote><p>进入OpenWrt安全模式的方法：</p><ol><li>使用网线连接电脑和路由器</li><li>设置电脑网卡<br>IP 地址:<code>192.168.1.x</code>(x为2至255)<br>子网掩码:<code>255.255.255.0</code></li><li><p>打开终端运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 注, 此处 eth0 为网卡. 可使用 ifconfig 进行查看</span><br><span class="line">sudo tcpdump -Ani eth0 port 4919 and udp</span><br></pre></td></tr></table></figure></li><li><p>断电重启</p></li><li><p>打开终端运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p>执行指令, 例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 重置系统</span><br><span class="line">firstboot</span><br><span class="line"><span class="meta">#</span> 重置密码</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure></li><li><p>重启路由器</p></li></ol><h2 id="不死-U-Boot"><a href="#不死-U-Boot" class="headerlink" title="不死 U-Boot"></a>不死 U-Boot</h2><blockquote><p>待补充</p></blockquote><h2 id="网页界面-OpenWrt-宽带拨号设置"><a href="#网页界面-OpenWrt-宽带拨号设置" class="headerlink" title="网页界面 OpenWrt 宽带拨号设置"></a>网页界面 OpenWrt 宽带拨号设置</h2><ol><li><p>进入接口设置界面</p></li><li><p>进行 WAN 口编辑<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2013.37.35.png" alt="image"></p></li><li><p>填写宽带账号 &amp; 密码<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2013.45.42.png" alt="image"></p></li><li><p>此时电脑连接 LAN 口的话，即可进行上网。</p></li></ol><h2 id="WiFi-设置"><a href="#WiFi-设置" class="headerlink" title="WiFi 设置"></a>WiFi 设置</h2><ol><li>进入 WiFi 设置界面，此处为双网卡<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2013.53.43.png" alt="image"></li><li>开启WiFi<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2014.00.00.png" alt="image"></li><li>设置WiFi<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%2014.26.04.png" alt="image"></li></ol><hr><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是WAN口？什么是LAN口？"><a href="#什么是WAN口？什么是LAN口？" class="headerlink" title="什么是WAN口？什么是LAN口？"></a>什么是WAN口？什么是LAN口？</h3><blockquote><p>路由器通常有多个LAN口，一个WAN口</p></blockquote><ul><li>WAN<blockquote><p>广域网（WAN、公网、外网）</p></blockquote></li></ul><p>设置拨号上网连接互联网</p><ul><li>LAN<blockquote><p>局域网（LAN、私网、内网)</p></blockquote></li></ul><p>连接本地计算机</p><h3 id="PPPoE"><a href="#PPPoE" class="headerlink" title="PPPoE"></a>PPPoE</h3><blockquote><p>以太网上的点对点协议中的一种, 宽带接入方式ADSL 就使用了PPPoE协议</p></blockquote><h3 id="关于-WiFi-2-4G-和-5G"><a href="#关于-WiFi-2-4G-和-5G" class="headerlink" title="关于 WiFi 2.4G 和 5G"></a>关于 WiFi 2.4G 和 5G</h3><p><code>802.11n/b/g</code> 主要工作频段为2.4GHz<br><code>802.11a/ac</code> 主要工作频段为5GHz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天刚好重刷 OpenWrt 固件，整理整理&lt;br&gt;
    
    </summary>
    
      <category term="OpenWrt" scheme="https://hocg.in/categories/OpenWrt/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="OpenWrt" scheme="https://hocg.in/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>关于 Android Studio 启动 Android 模拟器失败问题</title>
    <link href="https://hocg.in/2017/07/02/%E5%85%B3%E4%BA%8EAndroid%20Studio%20%E5%90%AF%E5%8A%A8Android%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://hocg.in/2017/07/02/关于Android Studio 启动Android模拟器失败问题/</id>
    <published>2017-07-02T13:07:00.000Z</published>
    <updated>2017-07-02T13:07:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>Android Studio 启动虚拟机一直闪退，不显示任何报错信息</p><a id="more"></a><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><ol><li>尝试用命令启动模拟器, 方便查看其错误日志<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看你创建的设备</span></span><br><span class="line">emulator -list-avds</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动命令</span></span><br><span class="line">emulator -netdelay none -netspeed full -avd New_Device_API_2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下为报错日志</span></span><br><span class="line">Hax is enabled</span><br><span class="line">Hax ram_size 0x60000000</span><br><span class="line">HAX is working and emulator runs in fast virt mode.</span><br><span class="line">Failed to sync vcpu reg</span><br><span class="line">Failed to sync vcpu reg</span><br><span class="line">Failed to sync vcpu reg</span><br><span class="line">Failed to sync vcpu reg</span><br><span class="line">Failed to sync vcpu reg</span><br><span class="line">Failed to sync HAX vcpu contextInternal error: Initial hax sync failed</span><br></pre></td></tr></table></figure></li></ol><p>vcpu无法进行同步?? What??<br>尝试进行了 Google，<a href="https://stackoverflow.com/questions/17024538/how-do-i-fix-failed-to-sync-vcpu-reg-error/17024645" target="_blank" rel="external">How do I fix “Failed to sync vcpu reg” error?</a><br>好吧, docker 之类的虚拟机引起了冲突</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>关掉用不着的虚拟机如 docker ..</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;Android Studio 启动虚拟机一直闪退，不显示任何报错信息&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hocg.in/categories/Android/"/>
    
    
      <category term="Android" scheme="https://hocg.in/tags/Android/"/>
    
      <category term="Mac" scheme="https://hocg.in/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Google 使用技巧</title>
    <link href="https://hocg.in/2017/06/18/Google-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://hocg.in/2017/06/18/Google-使用技巧/</id>
    <published>2017-06-18T03:24:06.000Z</published>
    <updated>2017-11-11T15:11:01.049Z</updated>
    
    <content type="html"><![CDATA[<p>摩擦 Google 利器。</p><a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>使用 <a href="https://www.google.com/ncr" target="_blank" rel="external">https://www.google.com/ncr</a> 模式并且是<code>英文版</code>。</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2011.44.17.png" alt="image"></p><blockquote><p><strong>完全匹配搜索</strong></p></blockquote><h3 id="减号"><a href="#减号" class="headerlink" title="减号"></a>减号</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2011.46.03.png" alt="image"></p><blockquote><p>使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要<strong>排除特定的词</strong>。</p></blockquote><h3 id="星号"><a href="#星号" class="headerlink" title="星号"></a>星号</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2011.52.27.png" alt="image"></p><blockquote><p><em>号代表任何文字，即<em>*模糊搜索</em></em></p></blockquote><h3 id="～"><a href="#～" class="headerlink" title="～"></a>～</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.40.20.png" alt="image"></p><blockquote><p>匹配 <strong>该关键词 或 该关键词的同义词</strong></p></blockquote><h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.35.15.png" alt="image"></p><blockquote><p>匹配关键词<code>hocgin</code>或者<code>hocg.in</code></p></blockquote><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.37.40.png" alt="image"></p><blockquote><p>匹配关键词<code>hocgin</code>与<code>hocg.in</code>同时存在</p></blockquote><h3 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2011.58.08.png" alt="image"></p><blockquote><p>匹配<strong>url连接中包含该词汇</strong>，例如上方匹配 <a href="https://hocg.in/hocgin">https://hocg.in/hocgin</a></p></blockquote><h3 id="allinurl"><a href="#allinurl" class="headerlink" title="allinurl"></a>allinurl</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.21.25.png" alt="image"></p><blockquote><p>等价于: <code>inurl: hocgin inurl: hocg.in</code><br>匹配<strong>url连接中既包含<code>hocgin</code>也包含<code>hocg.in</code></strong>, 例如: <a href="https://hocg.in/hocgin">https://hocg.in/hocgin</a></p></blockquote><h3 id="inanchor"><a href="#inanchor" class="headerlink" title="inanchor"></a>inanchor</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.10.13.png" alt="image"></p><blockquote><p>匹配<strong>a标签中的文字</strong>, 例如上方匹配 \<a href="https://hocg.in">hocgin\</a></p></blockquote><h3 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.12.39.png" alt="image"></p><blockquote><p>匹配<strong>title标签中的文字</strong>, \<title>hocgin\</title></p></blockquote><h3 id="allintitle"><a href="#allintitle" class="headerlink" title="allintitle"></a>allintitle</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.17.18.png" alt="image"></p><blockquote><p>等价于: <code>intitle: hocgin intitle: hocg.in</code><br>匹配<strong>标题中既包含<code>hocgin</code>也包含<code>hocg.in</code></strong>,例如: \<title>hocgin 的博客地址 hocg.in\</title></p></blockquote><h3 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.24.45.png" alt="image"></p><blockquote><p>匹配<strong>包含关键词<code>hocgin</code>的所有pdf文件</strong></p></blockquote><h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.26.38.png" alt="image"></p><blockquote><p><strong>某个域名的搜索</strong></p></blockquote><h3 id="ralated"><a href="#ralated" class="headerlink" title="ralated"></a>ralated</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.36.45.png" alt="image"></p><blockquote><p>返回 Google 人为相关的页面</p></blockquote><p><strong>混合使用示例</strong><br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.43.18.png" alt="image"><br><a href="">图片来源</a></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="查询字词的释义"><a href="#查询字词的释义" class="headerlink" title="查询字词的释义"></a>查询字词的释义</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.50.27.png" alt="image"></p><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.51.30.png" alt="image"></p><h3 id="天气查询"><a href="#天气查询" class="headerlink" title="天气查询"></a>天气查询</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.52.39.png" alt="image"></p><h3 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.57.12.png" alt="image"></p><h3 id="日出"><a href="#日出" class="headerlink" title="日出"></a>日出</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.58.31.png" alt="image"></p><h3 id="日落"><a href="#日落" class="headerlink" title="日落"></a>日落</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2012.59.30.png" alt="image"></p><h3 id="音乐人搜索"><a href="#音乐人搜索" class="headerlink" title="音乐人搜索"></a>音乐人搜索</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.02.27.png" alt="image"></p><h3 id="省会"><a href="#省会" class="headerlink" title="省会"></a>省会</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.04.05.png" alt="image"></p><h3 id="汇率"><a href="#汇率" class="headerlink" title="汇率"></a>汇率</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.08.03.png" alt="image"></p><blockquote><p>200美元换多少人民币，可以进行数学运算</p></blockquote><h3 id="设置计时器"><a href="#设置计时器" class="headerlink" title="设置计时器"></a>设置计时器</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.09.39.png" alt="image"></p><blockquote><p>Set timer XX seconds/minutes/hours，XX表示具体的数字。</p></blockquote><h3 id="两地点距离计算"><a href="#两地点距离计算" class="headerlink" title="两地点距离计算"></a>两地点距离计算</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.11.53.png" alt="image"></p><h3 id="当前位置"><a href="#当前位置" class="headerlink" title="当前位置"></a>当前位置</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.14.44.png" alt="image"></p><h3 id="显示当前电脑IP"><a href="#显示当前电脑IP" class="headerlink" title="显示当前电脑IP"></a>显示当前电脑IP</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.23.04.png" alt="image"></p><h3 id="显示国家-GDP"><a href="#显示国家-GDP" class="headerlink" title="显示国家 GDP"></a>显示国家 GDP</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.25.31.png" alt="image"></p><h3 id="绘制多元方程以及复杂的方程式"><a href="#绘制多元方程以及复杂的方程式" class="headerlink" title="绘制多元方程以及复杂的方程式"></a>绘制多元方程以及复杂的方程式</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.27.12.png" alt="image"></p><blockquote><p>graph + 方程式</p></blockquote><h3 id="搜索某个单词的由来"><a href="#搜索某个单词的由来" class="headerlink" title="搜索某个单词的由来"></a>搜索某个单词的由来</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%2013.31.02.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摩擦 Google 利器。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="https://hocg.in/categories/Other/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Google" scheme="https://hocg.in/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>字符串编码篇</title>
    <link href="https://hocg.in/2017/05/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E7%AF%87/"/>
    <id>https://hocg.in/2017/05/12/字符串编码篇/</id>
    <published>2017-05-12T13:09:03.000Z</published>
    <updated>2017-11-11T15:11:01.049Z</updated>
    
    <content type="html"><![CDATA[<p> 字符编码的来历..<br><a id="more"></a></p><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><blockquote><p>最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号</p><ul><li>占位: 1个字节</li></ul></blockquote><h2 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h2><blockquote><p>中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突</p></blockquote><h2 id="Unicode-u-16进制"><a href="#Unicode-u-16进制" class="headerlink" title="Unicode \u[16进制]"></a>Unicode <code>\u[16进制]</code></h2><blockquote><p>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p><ul><li>占位: 通常是2个字节</li></ul></blockquote><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><blockquote><p>本着节约的精神，又出现了把Unicode编码转化为“可变长编码”<br><strong>Note:</strong> UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 字符编码的来历..&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="https://hocg.in/categories/Other/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark 的使用</title>
    <link href="https://hocg.in/2017/04/20/Wireshark%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://hocg.in/2017/04/20/Wireshark的使用/</id>
    <published>2017-04-20T11:34:05.000Z</published>
    <updated>2017-11-11T15:11:01.049Z</updated>
    
    <content type="html"><![CDATA[<p> 抽空整理一下, 虽然<code>Charles</code>很好用, 但是某些情况下该软件也是不可替代的.<br><a id="more"></a><br><!-- ## 参考[WireShark](http://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html) --></p><h3 id="关于Wireshark"><a href="#关于Wireshark" class="headerlink" title="关于Wireshark"></a>关于Wireshark</h3><p>适合研究 TCP,UDP 等协议. <strong>因为限制并不能改包或模拟发包，只能分析协议</strong><br>若, 研究HTTP,HTTPS推荐使用<code>Charles</code> or <code>Fiddler</code></p><h3 id="关于抓包五颜六色的意义"><a href="#关于抓包五颜六色的意义" class="headerlink" title="关于抓包五颜六色的意义"></a>关于抓包五颜六色的意义</h3><blockquote><p>更多详情查看 View - Coloring Rules</p></blockquote><ul><li>绿色背景（黑字）<code>HTTP包</code></li><li>灰色背景（黑字）<code>TCP包</code></li><li>蓝色背景 (黑字)  <code>DNS包</code></li><li>黑色背景 (红字)  <code>TCP错误包或者校验错误包</code></li></ul><h3 id="Wireshark主窗口"><a href="#Wireshark主窗口" class="headerlink" title="Wireshark主窗口"></a>Wireshark主窗口</h3><blockquote><p>从上至下</p></blockquote><p><img src="https://cloud.githubusercontent.com/assets/16535610/21889866/01695500-d906-11e6-8ddb-c82c20967ae0.png" alt="img"></p><ul><li>菜单栏: 用于开始操作。</li><li>主工具栏: 提供快速访问菜单中经常用到的项目的功能。</li><li>过滤工具栏: 提供处理当前显示过滤得方法。</li><li>拦截的数据包列表(Packet list): 显示打开文件的每个包的摘要。点击面板中的单独条目，包的其他情况将会显示在另外两个面板中。</li><li>选中的数据包信息(Packet details): 显示您在Packet list面板中选择的包的更多详情。</li><li>选中的数据包字节码: 显示您在Packet list面板选择的包的数据，以及在Packet details面板高亮显示的字段。</li><li>状态栏: 显示当前程序状态以及捕捉数据的更多详情。</li></ul><p><strong>选中的数据包信息</strong></p><ul><li>Frame: 物理层的数据帧概况</li><li>Ethernet II: 数据链路层以太网帧头部信息</li><li>Internet Protocol Version 4: 互联网层IP包头部信息</li><li>Transmission Control Protocol:  传输层T的数据段头部信息，此处是TCP</li><li>Hypertext Transfer Protocol:  应用层的信息，此处是HTTP协议</li></ul><h3 id="过滤表达式"><a href="#过滤表达式" class="headerlink" title="过滤表达式"></a>过滤表达式</h3><ul><li><p>协议过滤</p><blockquote><p>tcp upd ..</p></blockquote></li><li><p>ip 过滤</p><blockquote><p><code>来源</code> ip.src == 192.168.1.1<br><code>目的地</code> ip.dst == 192.168.1.1</p></blockquote></li><li><p>端口</p><blockquote><p>tcp.port == 8080<br><code>仅显示来源为8080的</code> tcp.srcport == 8080</p></blockquote></li><li><p>Http模式</p><blockquote><p>http.request.method==”GET”</p></blockquote></li><li><p>逻辑运算符为 <code>and</code> <code>or</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 抽空整理一下, 虽然&lt;code&gt;Charles&lt;/code&gt;很好用, 但是某些情况下该软件也是不可替代的.&lt;br&gt;
    
    </summary>
    
      <category term="IDE" scheme="https://hocg.in/categories/IDE/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Wireshark" scheme="https://hocg.in/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>SQL的重新梳理</title>
    <link href="https://hocg.in/2017/04/07/SQL%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86/"/>
    <id>https://hocg.in/2017/04/07/SQL重新梳理/</id>
    <published>2017-04-07T01:19:09.000Z</published>
    <updated>2017-11-11T15:11:01.049Z</updated>
    
    <content type="html"><![CDATA[<p>持续积累..<br><a id="more"></a></p><h2 id="关于-SQL-执行顺序"><a href="#关于-SQL-执行顺序" class="headerlink" title="关于 SQL 执行顺序"></a>关于 SQL 执行顺序</h2><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p><a href="http://www.uol123.com/2013/01/26/sql%E8%AF%AD%E5%8F%A5%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html" target="_blank" rel="external">参考</a></p><h3 id="例句"><a href="#例句" class="headerlink" title="例句"></a>例句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_1 <span class="keyword">join</span> t_2</span><br><span class="line"><span class="keyword">on</span> t_1.id = t_2.fid</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t_1.className</span><br><span class="line"><span class="keyword">having</span> t_1.className = <span class="string">'1班'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这是一条简单/规范的基本SQL。</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>SQL三个很重要的位置<strong>on/where/having</strong><br>它们分别对应着 <strong>join/from/group</strong> 形成后的虚表进行筛选。</p></li><li><p><strong>select</strong>部分并不是一开始就执行的，而是表数据确认完毕，只差排序的时候执行的。<br>并且select中的<strong>函数/DISTINCT/TOP</strong>也是在<strong>select</strong>执行阶段执行的</p></li><li><p><strong>聚合函数</strong>需Group后才可执行, <strong>普通函数</strong>随执行步骤执行(正常执行)</p></li></ol><h3 id="具体顺序"><a href="#具体顺序" class="headerlink" title="具体顺序"></a>具体顺序</h3><ol><li>FROM FROM后面的表标识了这条语句要查询的数据源。和一些子句如，（1-J1）笛卡尔积，（1-J2）ON过滤，（1-J3）添加外部列，所要应用的对象。FROM过程之后会生成一个虚拟表VT1。<br>(1-J1)笛卡尔积 这个步骤会计算两个相关联表的笛卡尔积(CROSS JOIN) ，生成虚拟表VT1-J1。<br>(1-J2)ON过滤 这个步骤基于虚拟表VT1-J1这一个虚拟表进行过滤，过滤出所有满足ON 谓词条件的列，生成虚拟表VT1-J2。<br>(1-J3)添加外部行  如果使用了<code>外连接(外连接才会加入字段/数据)</code>，保留表中的不符合ON条件的列也会被加入到VT1-J2中，作为外部行，生成虚拟表VT1-J3。<code>此时 不符合ON的会被加入回来</code></li><li>WHERE 对VT1过程中生成的临时表进行过滤，满足where子句的列被插入到VT2表中。 <code>数据现在还没有被分组，因此现在你不能使用聚合运算-</code></li><li>GROUP BY 这个子句会把VT2中生成的表按照GROUP BY中的列进行分组。生成VT3表。<code>每一个分组必须只能返回一行(除非被过滤掉)，即每一行整体都无重复，对于没有出现GROUP BY后面的列必须使用聚合函数(如 MAX ,MIN,COUNT,AVG等)，保证每一个GROUP只返回一行</code></li><li>HAVING 这个子句对VT3表中的不同的组进行过滤，满足HAVING条件的子句被加入到VT4表中。</li><li>SELECT 这个子句对SELECT子句中的元素进行处理，生成VT5表。<br>(5-1)计算表达式 计算SELECT 子句中的表达式，生成VT5-1 <code>如果这个sql语句是一个聚合查询，在GROUP BY之后，你只能使用GROUP BY中的列，对不属于GROUP集合中的列必须使用聚合运算</code><br>(5-2)DISTINCT 寻找VT5-1中的重复列，并删掉，生成VT5-2<br>(5-3)TOP 从ORDER BY子句定义的结果中，筛选出符合条件的列。生成VT5-3表</li><li>ORDER BY 从VT5-3中的表中，根据ORDER BY 子句的条件对结果进行排序，生成VC6表。<code>唯一一个可以使用SELECT子句创建的别名的地方</code></li></ol><blockquote><p><strong>聚合函数</strong>是对一组值执行计算并返回单一的值的函数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.customerid, <span class="keyword">COUNT</span>(O.orderid) <span class="keyword">AS</span> numorders</span><br><span class="line"><span class="keyword">FROM</span> dbo.Customers <span class="keyword">AS</span> C</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dbo.Orders <span class="keyword">AS</span> O</span><br><span class="line">    <span class="keyword">ON</span> C.customerid = O.customerid</span><br><span class="line"><span class="keyword">WHERE</span> C.city = <span class="string">'Madrid'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> C.customerid</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(O.orderid)</span><br></pre></td></tr></table></figure><h2 id="关于-表-Joins"><a href="#关于-表-Joins" class="headerlink" title="关于 表 Joins"></a>关于 表 Joins</h2><blockquote><p> Joins 子句用于结合两个或多个数据库中表的记录, 也就是说是<strong>通过某种联系建立表之间的关联, 并形成一张新表</strong></p></blockquote><h3 id="SQL-定义了三种主要类型的连接"><a href="#SQL-定义了三种主要类型的连接" class="headerlink" title="SQL 定义了三种主要类型的连接"></a>SQL 定义了三种主要类型的连接</h3><ul><li><p>交叉连接 ( <strong>CROSS JOIN</strong> ), 又称 <strong>笛卡尔积</strong></p><blockquote><p>会形成庞大的表, 因此慎用。<br><strong>假设:</strong> 表t1(5行数据, 3列), 表t2(4行数据, 2列)<br><strong>SQL:</strong> select <em> from t1 cross join t2<br><strong>结果:</strong> 数据数量为20行数据(5 </em> 4), 5列</p></blockquote></li><li><p>内连接 ( <strong>INNER JOIN</strong> ), 通常可省略 <code>inner</code></p><blockquote><p>通过 <code>on</code> 或 <code>where</code> 建立表之间的联系或者说<strong>表形成的条件</strong><br><strong>假设:</strong> 表t1(5行数据, 3列), 表t2(4行数据, 2列)<br><strong>SQL:</strong> select <em> from t1 inner join t2 on t1.sid = t2.sid<br><em>*结果:</em></em> 查询操作列出与连接条件匹配的数据行, 5列</p></blockquote></li><li><p>外连接 ( <strong>OUTER JOIN</strong> )</p><blockquote><p>外连接为内连接的扩展, 主要区别在于哪边为基准, 使用 <code>on</code> 进行数据关联<br>外连接分为: <code>左外连接</code>、<code>右外连接</code>、<code>全外连接</code><br>部分SQL语言并不包含全部种类, 例如<br>SQLite 之包含 <strong>左外连接</strong></p><ul><li>左外连接 ( <strong>LEFT JOIN</strong> )<br><strong>假设:</strong> 表t1(5行数据, 3列), 表t2(4行数据, 2列)<br><strong>SQL:</strong> select <em> from t1 left join t2 on t1.sid = t2.sid<br><em>*结果:</em></em> 以左表为基准, 将数据按条件进行连接, 左表行全部显示, 若右表没有满足条件的行则显示为NULL, 5列</li></ul></blockquote><ul><li><p>右外连接 ( <strong>RIGHT JOIN</strong> )</p><blockquote><p><strong>假设:</strong> 表t1(5行数据, 3列), 表t2(4行数据, 2列)<br><strong>SQL:</strong> select <em> from t1 right join t2 on t1.sid = t2.sid<br><em>*结果:</em></em> 以右表为基准, 将数据按条件进行连接, 右表行全部显示, 若左表没有满足条件的行则显示为NULL, 5列</p></blockquote></li><li><p>全外连接 ( <strong>FULL JOIN</strong> )</p><blockquote><p><strong>假设:</strong> 表t1(5行数据, 3列), 表t2(4行数据, 2列)<br><strong>SQL:</strong> select <em> from t1 full join t2 on t1.sid = t2.sid<br><em>*结果:</em></em> 完整的显示两表的数据, 将数据按条件进行连接, 当没有被关联的表中没有存在满足条件的行时, 则显示为NULL, 5列</p></blockquote></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续积累..&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="SQL" scheme="https://hocg.in/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js项目 部件简介 (未完待续)</title>
    <link href="https://hocg.in/2017/03/31/Vue.js%E9%A1%B9%E7%9B%AE-%E9%83%A8%E4%BB%B6%E7%AE%80%E4%BB%8B/"/>
    <id>https://hocg.in/2017/03/31/Vue.js项目-部件简介/</id>
    <published>2017-03-31T07:32:36.000Z</published>
    <updated>2017-03-31T13:15:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>🦋 目前国内前端MVVM最火的框架.. 前段时间写了一个<a href="https://github.com/hocgin/iPage" target="_blank" rel="external">About页面</a>, 这几天顺带整理一下知识点.<br><a id="more"></a></p><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><blockquote><p>Vue.js是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的.<br>类似的有<code>Angular.js</code>.</p></blockquote><ul><li>可以建立DOM和数据之间的绑定</li><li>可以按功能/组件抽离HTML代码</li></ul><p><strong>相关</strong><br><a href="http://hocg.in/2017/03/26/Vue.js-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5">Vue 项目实践 - 持续更新</a></p><h2 id="功能部分"><a href="#功能部分" class="headerlink" title="功能部分"></a>功能部分</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li>数值默认双向绑定</li><li>支持 条件语法特性/功能函数/生命周期</li><li>动态设定<code>style</code>/<code>class</code></li><li>捆绑<code>event</code></li><li>渲染生命周期<h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3></li><li>单页面组件</li><li>自定义指令</li><li>单元测试</li><li>插件</li></ul><h2 id="单文件组件-vue"><a href="#单文件组件-vue" class="headerlink" title="单文件组件.vue"></a>单文件组件<code>.vue</code></h2><p><strong>定义:</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'Title'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>使用:</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Title</span>&gt;</span><span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Title <span class="keyword">from</span> <span class="string">'./components/Title'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Title</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><blockquote><p>扩展 Vue<br>按字面意思来看为<code>Vue 路由</code><br>其实质也就是用于<strong>单页应用</strong>管理页面跳转, 负责路径解析.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/Hello'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'Hello'</span>,</span><br><span class="line">      component: Hello</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><blockquote><p>扩展 Vue<br>当开发大型项目时, 为防止 Vue 太过臃肿, 使用 Vuex 管理数据状态.</p></blockquote><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><blockquote><p>一款模块加载器兼打包工具<br>使用模块的理念来处理 JS/CSS/图片等资源文件</p></blockquote><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装</span><br><span class="line">npm install webpack --save-dev</span><br><span class="line"><span class="meta">#</span> 执行</span><br><span class="line">webpack</span><br><span class="line">   --display-error-details # 输出详细错误</span><br><span class="line">   --watch # 实时监听并自动打包</span><br><span class="line">   --config &lt;file&gt; # 指定配置文件打包</span><br><span class="line">   -p # 压缩打包</span><br><span class="line">   -d # 生成map映射文件</span><br></pre></td></tr></table></figure><h2 id="配置-webpack-config-js"><a href="#配置-webpack-config-js" class="headerlink" title="配置(webpack.config.js)"></a>配置(webpack.config.js)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  plugins: [],</span><br><span class="line">  <span class="comment">// 页面入口</span></span><br><span class="line">  entry: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 入口文件输出位置, 即处理后的文件存放位置</span></span><br><span class="line">  output: &#123;&#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 文件处理加载器</span></span><br><span class="line">    rules: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 额外处理</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 自动扩展文件后缀, require时可以进行省略</span></span><br><span class="line">    extensions: [],</span><br><span class="line">    <span class="comment">// 模块定义别名, require时可以进行路径省略, 直接使用别名</span></span><br><span class="line">    alias: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入口文件-main-js"><a href="#入口文件-main-js" class="headerlink" title="入口文件(main.js)"></a>入口文件(main.js)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span></span><br><span class="line"><span class="comment">// 引入js, 加载器会自动进行处理</span></span><br><span class="line"><span class="keyword">import</span> holderjs <span class="keyword">from</span> <span class="string">'holderjs'</span></span><br><span class="line"><span class="comment">// 引入 css/scss, 加载器会自动进行处理</span></span><br><span class="line"><span class="keyword">import</span> appScss <span class="keyword">from</span> <span class="string">'./assets/app.scss'</span></span><br><span class="line"><span class="keyword">import</span> fontAwesomeCss <span class="keyword">from</span> <span class="string">'./assets/font-awesome-4.7.0/css/font-awesome.css'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>未完待续ing</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🦋 目前国内前端MVVM最火的框架.. 前段时间写了一个&lt;a href=&quot;https://github.com/hocgin/iPage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About页面&lt;/a&gt;, 这几天顺带整理一下知识点.&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="JavaScript" scheme="https://hocg.in/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="https://hocg.in/tags/HTML5/"/>
    
      <category term="前端" scheme="https://hocg.in/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目实践 - 持续更新</title>
    <link href="https://hocg.in/2017/03/26/Vue.js-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    <id>https://hocg.in/2017/03/26/Vue.js-项目实践/</id>
    <published>2017-03-26T07:40:08.000Z</published>
    <updated>2017-06-01T13:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>🐌 目前国内前端MVVM最火的框架.. 项目实践记录一些流程<br><a id="more"></a></p><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><ul><li>vue<ul><li>vue-router <code>给vue使用的路由</code></li><li>vuex <code>一个专为 Vue.js 应用程序开发的状态管理模式</code></li></ul></li><li>webpack</li></ul><h1 id="快速搭建项目"><a href="#快速搭建项目" class="headerlink" title="快速搭建项目"></a>快速搭建项目</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 构建项目</span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init webpack &lt;project-name&gt;</span><br><span class="line"><span class="meta">#</span> 试行</span><br><span class="line">cd iPage</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装 vuex</span><br><span class="line">npm install vuex -S</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装 sass 开发支持</span><br><span class="line">npm install --save-dev sass-loader</span><br><span class="line">npm install --save-dev node-sass</span><br><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install --save-dev style-loader</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 编译生成静态文件</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.  </span><br><span class="line">├── README.md  </span><br><span class="line">├── build  </span><br><span class="line">├── config   </span><br><span class="line">├── index.html  </span><br><span class="line">├── node_modules  </span><br><span class="line">├── package.json  </span><br><span class="line">├── src // 源码</span><br><span class="line">|    ├── App.vue    // 父组件  </span><br><span class="line">|    ├── assets     // 静态文件  </span><br><span class="line">|    ├── components // 公共组件  </span><br><span class="line">|    ├── main.js    // webpack打包入口文件  </span><br><span class="line">|    └── router  </span><br><span class="line">|          └── index.js // 页面路由  </span><br><span class="line">├── static  </span><br><span class="line">└── test</span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🐌 目前国内前端MVVM最火的框架.. 项目实践记录一些流程&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="JavaScript" scheme="https://hocg.in/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="https://hocg.in/tags/HTML5/"/>
    
      <category term="前端" scheme="https://hocg.in/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于 Objective-C 的小笔记</title>
    <link href="https://hocg.in/2017/03/20/%E5%85%B3%E4%BA%8E%20Objective-C%20%E7%9A%84%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <id>https://hocg.in/2017/03/20/关于 Objective-C 的小笔记/</id>
    <published>2017-03-20T00:07:00.000Z</published>
    <updated>2017-07-02T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前学 <code>swift3</code> 顺带整理的小笔记<br><a id="more"></a></p><h1 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><table><thead><tr><th>文件后缀</th><th>文件类型</th></tr></thead><tbody><tr><td><code>*.h</code></td><td><strong>头文件</strong>。头文件包含类，类型，函数和常数的声明。</td></tr><tr><td><code>*.m</code></td><td><strong>源代码文件</strong>。这是典型的源代码文件扩展名，可以包含 Objective-C 和 C 代码</td></tr><tr><td><code>*.mm</code></td><td><strong>源代码文件</strong>。带有这种扩展名的源代码文件，除了可以包含Objective-C和C代码以外还可以包含C++代码。仅在你的Objective-C代码中确实需要使用C++类或者特性的时候才用这种扩展名。</td></tr></tbody></table><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><table><thead><tr><th>关键词</th><th>说明</th></tr></thead><tbody><tr><td>#import</td><td>引入文件, 并确保相同的文件只会被包含一次</td></tr><tr><td>NSString* say = @”Hello World”</td><td>创建NSString对象</td></tr><tr><td>@interface/@implementation</td><td>objective-c 一个类是由:定义和实现来构成的, @interface 用于定义, @implementation用于实现细节.</td></tr><tr><td>@property与@synthesize</td><td>@property用于在@interface声明getter与setter函数, @synthesize用于在@implementation实现getter与setter函数, <br><strong>二者是搭配口味</strong><br><strong>高版本(Xcode4.5)可省略@synthesize</strong></td></tr></tbody></table><h2 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h2><h3 id=""><a href="#" class="headerlink" title=""></a><foundation foundation.h=""></foundation></h3><ul><li>它包括 NSArray，NSDictionary中的NSSet等扩展数据类型的列表。</li><li>它由一组丰富的操作文件的函数，字符串，等等。</li><li>URL处理它提供的功能，如日期格式，数据处理，错误处理等实用工具</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="语法速读"><a href="#语法速读" class="headerlink" title="语法速读"></a>语法速读</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/* 预处理(导包) */</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">/* 定义接口(继承:NSObject) */</span><br><span class="line">@interface SampleClass:NSObject</span><br><span class="line">- (void)sampleMethod;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">/* 实现接口(SampleClass) */</span><br><span class="line">@implementation SampleClass</span><br><span class="line"></span><br><span class="line">- (void)sampleMethod&#123;</span><br><span class="line">   NSLog(@&quot;Hello, World!</span><br><span class="line">&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 主函数 */</span><br><span class="line">int main() &#123;</span><br><span class="line">   /* my first program in Objective-C */</span><br><span class="line">   SampleClass *sampleClass = [[SampleClass alloc]init];</span><br><span class="line"></span><br><span class="line">   /* - 调用函数</span><br><span class="line">   C: sampleClass.sampleMethod(args);</span><br><span class="line">   OC: [对象 函数名: 参数]</span><br><span class="line">    */</span><br><span class="line">   [sampleClass sampleMethod: args];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的语法"><a href="#类的语法" class="headerlink" title="类的语法"></a>类的语法</h3><blockquote><p>类分为: <strong>类的定义(.h)</strong> 和 <strong>类的实现(.m)</strong><br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/类的定义语法.jpg" alt="image"></p><h4 id="定义-h"><a href="#定义-h" class="headerlink" title="定义 ( *.h )"></a>定义 ( *.h )</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@interface MyObject : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    // 此处变量默认为受保护(protected)</span><br><span class="line">    int memberVar1; // 实体变量</span><br><span class="line">    id  memberVar2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(return_type) class_method; // &quot;+&quot; 表示 类方法</span><br><span class="line"></span><br><span class="line">-(return_type) instance_method1; // &quot;-&quot; 表示 实例方法</span><br><span class="line">-(return_type) instance_method2: (int) p1;</span><br><span class="line">// 这里的调用方式为: [obj instance_method3: 1 andPar: 2];</span><br><span class="line">// andPar 相当于外部的另外一个别名</span><br><span class="line">-(return_type) instance_method3: (int) p1 andPar: (int) p2;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></blockquote><h4 id="实现-m"><a href="#实现-m" class="headerlink" title="实现 ( *.m )"></a>实现 ( *.m )</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@implementation MyObject</span><br><span class="line">&#123;</span><br><span class="line">  // 此处变量为私有(private)</span><br><span class="line">  int memberVar3; //私有实体变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(return_type) class_method &#123;</span><br><span class="line">    .... //method implementation</span><br><span class="line">&#125;</span><br><span class="line">-(return_type) instance_method1 &#123;</span><br><span class="line">     ....</span><br><span class="line">&#125;</span><br><span class="line">-(return_type) instance_method2: (int) p1 &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">-(return_type) instance_method3: (int) p1 andPar: (int) p2 &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 注: alloc 与 init 都属于 NSObject 里的函数</span><br><span class="line">MyObject * my = [[MyObject alloc] init];</span><br><span class="line">// 无参构建, 也可采用以下方式 (Objective-C 2.0)</span><br><span class="line">MyObject * my = [MyObject new];</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note:</strong> { } 需如文这样标识, 才可表达出准确的语义, 读者自行领悟.</p></blockquote><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><blockquote><p>函数分为: <strong>类函数</strong> 和 <strong>对象函数</strong><br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/函数的定义语法.jpg" alt="image"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 如上</span><br><span class="line">// 定义语法: 范围标识 (返回值)函数名:外部形参别名:(参数类型) 形参名 外部形参别名:(参数类型) 形参名</span><br><span class="line">// 注: 第一个 外部形参别名 可省略</span><br><span class="line">- (void)insertObject:(id)anObject atIndex:(NSUInteger) index</span><br><span class="line">+ (void)insertObject:(id)anObject atIndex:(NSUInteger) index</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">// 对象调用 [对象 函数名: 参数1 外部形参别名: 参数2]</span><br><span class="line">[obj insertObject: arg1 atIndex: arg2]</span><br><span class="line">// 类调用 [类名 函数名: 参数1 外部形参别名: 参数2]</span><br><span class="line">[Object insertObject: arg1 atIndex: arg2]</span><br><span class="line"></span><br><span class="line">// 注:) 类调用 和 对象调用 的形式是一样的</span><br></pre></td></tr></table></figure><h3 id="属性语法"><a href="#属性语法" class="headerlink" title="属性语法"></a>属性语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">/*</span><br><span class="line">相当于 @public 至 @private 之间的属性被暴露出去</span><br><span class="line">可通过实例直接访问, 例如: obj-&gt;name</span><br><span class="line">*/</span><br><span class="line">@public</span><br><span class="line">  NSString *name;</span><br><span class="line">@private</span><br><span class="line">  int age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">  参考: http://justcoding.iteye.com/blog/1444548</span><br><span class="line">  使用范围: @interface, @protocol, @category</span><br><span class="line">  可声明特性:</span><br><span class="line">          读写属性：   （readwrite/readonly）</span><br><span class="line">          setter语意：（assign/retain/copy）</span><br><span class="line">          原子性：    （atomicity/nonatomic）</span><br><span class="line">  使用效果(声明一个setter与getter方法):</span><br><span class="line">    - (NSString*)name;  </span><br><span class="line">    - (void)setName: (NSString*)newName;</span><br><span class="line"> */</span><br><span class="line">@property(copy) NSString *name;</span><br><span class="line">@property(readonly) int age;</span><br><span class="line"></span><br><span class="line">-(id)initWithAge:(int)age;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line">/*</span><br><span class="line">  使用范围: @implementation</span><br><span class="line">  使用效果(自动实现一个setter与getter方法):</span><br><span class="line">    - (NSString*)name &#123;</span><br><span class="line">      return name;</span><br><span class="line">    &#125;  </span><br><span class="line">    - (void)setName: (NSString*)newName &#123;</span><br><span class="line">      name = newName;</span><br><span class="line">    &#125;</span><br><span class="line"> */</span><br><span class="line">@synthesize name;</span><br><span class="line">/* @dynamic 仅仅是告诉编译器这两个方法在运行期会有的，无需产生警告 */</span><br><span class="line">@dynamic age;</span><br><span class="line"></span><br><span class="line">-(id)initWithAge:(int)initAge</span><br><span class="line">&#123;</span><br><span class="line">    age = initAge; // 注意：直接赋给成员变量，而非属性</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(int)age</span><br><span class="line">&#123;</span><br><span class="line">    return 29; // 注意：并非返回真正的年龄</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="类或协议的属性可以被动态的读取"><a href="#类或协议的属性可以被动态的读取" class="headerlink" title="类或协议的属性可以被动态的读取"></a>类或协议的属性可以被动态的读取</h4><blockquote><p>类似反射机制 , 略过..</p></blockquote><h3 id="快速枚举"><a href="#快速枚举" class="headerlink" title="快速枚举"></a>快速枚举</h3><blockquote><p>一种省内存的循环遍历 , 略过..</p></blockquote><h3 id="协议语法"><a href="#协议语法" class="headerlink" title="协议语法"></a>协议语法</h3><blockquote><p>类似 Java 中的接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*定义协议*/</span><br><span class="line">@protocol Locking</span><br><span class="line">- (void)lock;</span><br><span class="line">- (void)unlock;</span><br><span class="line">@end</span><br><span class="line">/*</span><br><span class="line">类的@interface 宣称使用 协议</span><br><span class="line">*/</span><br><span class="line">@interface SomeClass : SomeSuperClass &lt;Locking&gt;</span><br><span class="line">@end</span><br><span class="line">/*</span><br><span class="line">类的@implementation 实现 协议 细节</span><br><span class="line">*/</span><br><span class="line">@implementation SomeClass</span><br><span class="line">- (void)lock &#123;</span><br><span class="line">  // 实现lock方法...</span><br><span class="line">&#125;</span><br><span class="line">- (void)unlock &#123;</span><br><span class="line">  // 实现unlock方法...</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><blockquote><p>id 相当于 Java 中的 Object, 即 任意对象</p></blockquote><h3 id="类别-Category-语法"><a href="#类别-Category-语法" class="headerlink" title="类别 (Category) 语法"></a>类别 (Category) 语法</h3><blockquote><p>分类不仅可以增加类的方法，也可以代替原有的<strong>函数</strong>, <strong>并不能新增变量</strong><br>动态增加和替换函数, 强得一匹</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line">  说明: 定义扩展 Integer类 接口, 新增/覆盖 函数 showstars 与 showint</span><br><span class="line">  语法:</span><br><span class="line">    #import &quot;待扩展类接口文件.h&quot;</span><br><span class="line">    @interface 待扩展类(扩展类)</span><br><span class="line">      // 函数定义</span><br><span class="line">    @end</span><br><span class="line">*/</span><br><span class="line">#import &quot;Integer.h&quot;</span><br><span class="line">@interface Integer(Display)</span><br><span class="line">- (id) showstars;</span><br><span class="line">- (id) showint;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">  说明: 实现扩展 Integer类 接口, 新增/覆盖 函数 showstars 与 showint</span><br><span class="line">  语法:</span><br><span class="line">    #import &quot;扩展类接口文件.h&quot;</span><br><span class="line">    @implementation 待扩展类(扩展类)</span><br><span class="line">      // 函数实现</span><br><span class="line">    @end</span><br><span class="line">*/</span><br><span class="line">#import &quot;Display.h&quot;</span><br><span class="line">@implementation Integer(Display)</span><br><span class="line">- (id) showstars &#123;</span><br><span class="line">  ..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id) showint &#123;</span><br><span class="line">    ..</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><strong>NOTE:</strong> 使用时需#import 待扩展类与扩展类的接口文件<strong>(.h)</strong></p><h2 id="划重点"><a href="#划重点" class="headerlink" title="划重点"></a>划重点</h2><ul><li><code>NSString*</code>/<code>NSObject*</code>等 表示对象</li><li><code>self</code> 某种程度相当于 <code>this</code></li><li>nil 基本上等同于 NULL</li><li>调用属性 self-&gt;name</li><li>一般(.h 存放<strong>@interface文件</strong>, .m 存放<strong>@implementation文件</strong>). 进行#import时, 只需#import .h文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前学 &lt;code&gt;swift3&lt;/code&gt; 顺带整理的小笔记&lt;br&gt;
    
    </summary>
    
      <category term="Mac" scheme="https://hocg.in/categories/Mac/"/>
    
    
      <category term="语法" scheme="https://hocg.in/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="Objective-C" scheme="https://hocg.in/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>PHP Laravel 快速入门</title>
    <link href="https://hocg.in/2017/03/01/PHP-laravel-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://hocg.in/2017/03/01/PHP-laravel-快速入门/</id>
    <published>2017-03-01T06:59:38.000Z</published>
    <updated>2017-03-08T07:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP 框架 Laravel 搭建开始, 慢慢更新~ 😜😜😜😜<br><a id="more"></a></p><h1 id="Quit-Start"><a href="#Quit-Start" class="headerlink" title="Quit Start"></a>Quit Start</h1><p>一. 安装<code>composer</code>, 用于管理依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 全局安装 macOS</span><br><span class="line">brew update</span><br><span class="line">brew tap josegonzalez/homebrew-php</span><br><span class="line">brew tap homebrew/versions</span><br><span class="line">brew install php55-intl</span><br><span class="line">brew install josegonzalez/php/composer</span><br></pre></td></tr></table></figure><p>二. 下载<code>laravel</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require "laravel/installer"</span><br></pre></td></tr></table></figure><p>三. 创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel/laravel --prefer-dist</span><br></pre></td></tr></table></figure><p>四. 关于如何使用<code>PhpStorm</code>  </p><blockquote><p>默认已经配置好PHP开发环境了!</p></blockquote><p>4.0.1 相关插件</p><ul><li>Laravel Plugin</li><li><strong>[Optional]</strong> PHP Annotations Plugin</li><li><strong>[Optional]</strong> Symfony2 Plugin</li></ul><p>4.1 配置<code>Composer</code></p><ul><li>右键项目根节点 -&gt; Composer -&gt; init composer, 配置<code>PHP解释器</code>和<code>Composer路径</code></li></ul><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/874D3259-AB37-4EA4-BAAC-CA17674334C8.png" alt="image"></p><ul><li>右键项目根节点 -&gt; Composer -&gt; add dependency, 添加<code>barryvdh/laravel-ide-helper</code></li></ul><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/2F36AE2A-A1A7-40D0-8668-26EB0038BBCE.png" alt="image"><br>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require barryvdh/laravel-ide-helper</span><br></pre></td></tr></table></figure><p>4.2 编辑<code>config/app.php</code>文件, 在<code>providers</code>节点下面添加<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/4761A0E6-27E9-4544-B379-DE897A42E24E.png" alt="image"></p><p>4.3 扩展命令工具</p><ul><li>Preferences -&gt; Tools -&gt; Command Line Tool Support</li></ul><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/A84F6129-8F9E-4BC3-BAAA-D32FEFB7F1D5.png" alt="image"></p><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/3C942985-0082-4675-BA3F-1FCC3A83CD2B.png" alt="image"></p><p><strong>使用</strong>: Tools -&gt; Run Command(⌘ + ⇧ + X)</p><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/363F317B-FED9-40AE-A30A-84216A3A2721.png" alt="image"></p><p>4.4 配置 php-xdebug<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 检查是否安装php-xdebug</span><br><span class="line">php -m</span><br></pre></td></tr></table></figure></p><p>安装后，修改下php.ini把xdebug.so前的注释’;’去掉</p><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/5157CD6B-FD07-4F82-9DE6-9E8BEA21D504.png" alt="image"></p><p>五. 配置启动<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/A1D8FA94-D5A1-46A6-AE09-B638BC4C5FCE.png" alt="image"></p><p>六. 配置Debug</p><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/03337E90-7562-498F-A595-98FEA679EDDE.png" alt="image"><br>并且在根目录加入<code>debug.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xdebug.remote_enable = On</span><br><span class="line">xdebug.remote_autostart = On</span><br><span class="line">upload_max_filesize = 1000M</span><br><span class="line">post_max_size = 1005M</span><br><span class="line">max_execution_time = 120</span><br><span class="line"></span><br><span class="line">;xdebug.profiler_enable = On</span><br><span class="line">;xdebug.profiler_enable_trigger = Off</span><br><span class="line">;xdebug.profiler_output_dir = ./xdebug</span><br><span class="line">;xdebug.profiler_aggregate = On</span><br><span class="line">;xdebug.profiler_append = On</span><br><span class="line">;xdebug.profiler_output_name = &quot;cachegrind.out.%R.%u.%p&quot;</span><br></pre></td></tr></table></figure><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="https://github.com/koomai/phpstorm-laravel-live-templates#requests--input" target="_blank" rel="external">Laravel Live Templates for PhpStorm</a><br><a href="https://laracasts.com/series/how-to-be-awesome-in-phpstorm/episodes/15" target="_blank" rel="external">Laravel 插件视频</a></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><p>继承<br><code>@extends</code></p></li><li><p>存在替换<br><code>@yield(&#39;content&#39;)</code><br><code>@section</code><br><code>@endsection</code></p></li><li><p>增加<br><code>@stack(&quot;appendCSS&quot;)</code><br><code>@push(&#39;appendCSS&#39;)</code><br><code>@endpush</code></p></li><li><p>注入<br><code>@inject(&quot;xx&quot;, &quot;xx[Name]&quot;)</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP 框架 Laravel 搭建开始, 慢慢更新~ 😜😜😜😜&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="Mac" scheme="https://hocg.in/tags/Mac/"/>
    
      <category term="PHP" scheme="https://hocg.in/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 部署</title>
    <link href="https://hocg.in/2017/02/24/Nginx-%E9%83%A8%E7%BD%B2/"/>
    <id>https://hocg.in/2017/02/24/Nginx-部署/</id>
    <published>2017-02-24T01:12:22.000Z</published>
    <updated>2017-02-25T09:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>🎽  <a href="http://baike.baidu.com/link?url=6LDqhy3I7UWDkwOT6TS_s-d4Jsv9AVcA_yedSmd618s1BjJl-0NQ-roxjDF7jHazXWlTwbIHTv03_gWIWeRPUq" target="_blank" rel="external">Nginx</a> 是一个很强大的高性能Web和反向代理服务器<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>OS: Ubuntu-16</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li><a href="http://www.pcre.org/" target="_blank" rel="external">PCRE</a></li><li><a href="http://zlib.net" target="_blank" rel="external">zlib</a></li><li><a href="nginx.org/en/download.html">nginx</a></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>/opt<br>|– nginx-1.10.1<br>|– pcre-8.38<br>`– zlib-1.2.8</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><blockquote><p>以下操作均在<code>/opt</code>目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -zxvf nginx-1.10.1.tar.gz</span><br><span class="line"><span class="meta">#</span> cd nginx-1.10.1</span><br><span class="line"><span class="meta">#</span> ./configure</span><br></pre></td></tr></table></figure><p>ERROR:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">checking for OS</span><br><span class="line"> + Linux 2.6.32-042stab113.21 x86_64</span><br><span class="line">checking for C compiler ... not found</span><br><span class="line"></span><br><span class="line">./configure: error: C compiler cc is not found</span><br></pre></td></tr></table></figure></p><p>缺失编译部件, 解决办法如下:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> apt-get install build-essential libtool</span><br><span class="line"><span class="meta">#</span> ./configure</span><br></pre></td></tr></table></figure></p><p>Error:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure></p><p>缺失<code>PCRE</code>, 移步官网下载(<code>顶部有链接</code>), 我是在<code>/opt</code>目录中解压<br><strong>注</strong>: pcre 没有 <code>2</code></p><blockquote><p>以下操作均在<code>/opt</code>目录  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -jxvf pcre-8.38.tar.bz2</span><br><span class="line"><span class="meta">#</span> cd pcre-8.38</span><br><span class="line"><span class="meta">#</span> ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>回到<code>/opt/nginx-1.10.1</code>目录继续进行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ./configure --with-pcre=/opt/pcre-8.38</span><br></pre></td></tr></table></figure></p><p>Error:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class="line">You can either disable the module by using --without-http_gzip_module</span><br><span class="line">option, or install the zlib library into the system, or build the zlib library</span><br><span class="line">statically from the source with nginx by using --with-zlib=&lt;path&gt; option.</span><br></pre></td></tr></table></figure></p><p>原因是缺失<code>zlib</code>,移步官网下载(<code>顶部有链接</code>), 同样是在<code>/opt</code>目录中解压</p><blockquote><p>以下操作均在<code>/opt</code>目录  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -zxvf zlib-1.2.8.tar.gz</span><br><span class="line"><span class="meta">#</span> cd zlib-1.2.8</span><br><span class="line"><span class="meta">#</span> ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>回到<code>/opt/nginx-1.10.1</code>目录继续进行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ./configure --with-pcre=/opt/pcre-8.38 --with-zlib=/opt/zlib-1.2.8</span><br><span class="line"><span class="meta">#</span> make</span><br><span class="line"><span class="meta">#</span> make install</span><br></pre></td></tr></table></figure><p>至此，安装结束。可查看<code>ls /usr/local/nginx/</code>目录<br>显示如下文件:<br>/usr/local/nginx/<br><img src="http://7xs6lq.com1.z0.glb.clouddn.com/E3B25E4D-8D26-4E4D-BBA2-F77F7B089FA5.png" alt="image"></p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><blockquote><p>以下命令均在<code>/usr/local/nginx</code>目录下运行  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动</span><br><span class="line">./sbin/nginx</span><br><span class="line"><span class="meta">#</span> 检查配置</span><br><span class="line">./sbin/nginx -t</span><br><span class="line"><span class="meta">#</span> 重新加载配置</span><br><span class="line">./sbin/nginx -s reload</span><br><span class="line"><span class="meta">#</span> 查看配置文件</span><br><span class="line">cat ./conf/nginx.conf</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a><code>nginx.conf</code>配置</h3><p><a href="http://blog.csdn.net/tjcyjd/article/details/50695922" target="_blank" rel="external">字段详解</a></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><strong>待续ing</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🎽  &lt;a href=&quot;http://baike.baidu.com/link?url=6LDqhy3I7UWDkwOT6TS_s-d4Jsv9AVcA_yedSmd618s1BjJl-0NQ-roxjDF7jHazXWlTwbIHTv03_gWIWeRPUq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx&lt;/a&gt; 是一个很强大的高性能Web和反向代理服务器&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="Ubuntu" scheme="https://hocg.in/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>关于Chrome 插件开发的一些知识点</title>
    <link href="https://hocg.in/2017/02/04/%E5%85%B3%E4%BA%8EChrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://hocg.in/2017/02/04/关于Chrome插件开发的一些知识点/</id>
    <published>2017-02-04T05:20:51.000Z</published>
    <updated>2017-11-10T12:48:33.137Z</updated>
    
    <content type="html"><![CDATA[<p>身为Chrome重度患者，生活和工作处处不离，这篇并不是入门教程，而是开发中的一些小Tip的记录.<br><a id="more"></a></p><h1 id="我开发的Chrome-插件"><a href="#我开发的Chrome-插件" class="headerlink" title="我开发的Chrome 插件"></a>我开发的Chrome 插件</h1><ul><li><a href="https://github.com/hocgin/Weather-For-Chrome-Plugin" target="_blank" rel="external">天气预报</a></li></ul><h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><ul><li>HTML5 <code>localStorage</code> <strong>存储在解析页面当前范围和网站共享localStorage</strong></li><li>Chrome API <code>chrome.storage</code> <strong>存储在系统磁盘，适合少量数据</strong></li><li>Web SQL Database <strong>存储在系统磁盘，适合大量数据</strong></li></ul><h1 id="脚本运行范围"><a href="#脚本运行范围" class="headerlink" title="脚本运行范围"></a>脚本运行范围</h1><ul><li>background <strong>浏览器打开后运行, 会一直存在于后台, 因此开发时更改后必须<code>⌘+R</code>重新加载</strong></li><li>content_scripts <strong>在网页加载后运行</strong></li><li>html内导入的脚本 <strong>运行于该html页面, 例如: option页面和popup页面</strong></li></ul><p><strong>Note:</strong></p><blockquote><p>popup.js 于background.js 是可以进行共通的.<br>使用<code>var BG = chrome.extension.getBackgroundPage();</code> BG便是<code>background.js</code>的<code>window</code>对象</p></blockquote><h1 id="Action-入口"><a href="#Action-入口" class="headerlink" title="Action 入口"></a>Action 入口</h1><ul><li>地址栏右侧图标外 <code>browser_action</code> <strong>可显示badge</strong></li><li>右键菜单 <code>chrome.contextMenus</code> <strong>可在<code>background</code>中创建</strong></li><li>地址栏右侧图标<del>内</del>外 <code>page_action</code> <strong>新版的已更改显示在外围 <a href="https://developer.chrome.com/extensions/pageAction" target="_blank" rel="external">PageAction API</a></strong></li><li>多功能框 <code>omnibox</code> <strong>对地址框进行监听</strong></li><li>overrides <strong>如, <code>管理书签</code>/<code>历史记录</code>/<code>新标签页</code>等 (一个扩展只能替换一个页面)</strong></li><li>桌面提醒 <code>webkitNotifications.createNotification</code></li></ul><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><blockquote><p>相当一部分Chrome API 使用需要在<code>Manifest</code>申明权限</p></blockquote><h1 id="页面间通信"><a href="#页面间通信" class="headerlink" title="页面间通信"></a>页面间通信</h1><ul><li>popup 与 background 通信</li></ul><ol><li>使用上面提到的<code>共通</code>的特性。</li><li>使用 <code>chrome.extension.onMessage.addListener</code>进行通信监听 与 使用<code>chrome.extension.sendMessage</code>进行触发</li></ol><ul><li>option 与 (popup 或者 background) 通信</li></ul><ol><li>使用 <code>chrome.extension.onMessage.addListener</code>进行通信监听 与 使用<code>chrome.extension.sendMessage</code>进行触发</li></ol><ul><li>(popup 或者 background) 与 option 通信</li></ul><ol><li>使用 <code>chrome.extension.onMessage.addListener</code>进行通信监听, 触发方式比较麻烦, 查看以下例子:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs.query(&#123;<span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">tabs</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!!tabs</span><br><span class="line">                &amp;&amp; tabs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                chrome.tabs.sendMessage(tabs[<span class="number">0</span>].id, &#123;</span><br><span class="line">                  <span class="comment">//message..</span></span><br><span class="line">                  &#125;, callback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="i18"><a href="#i18" class="headerlink" title="i18"></a>i18</h1><ul><li><code>CSS</code> __MSG_@@key</li><li><code>JS</code> chrome.i18n.getMessage(‘key’);</li></ul><h1 id="关于打包-amp-发布"><a href="#关于打包-amp-发布" class="headerlink" title="关于打包 &amp; 发布"></a>关于打包 &amp; 发布</h1><ol><li><code>扩展程序</code>中进行打包，生成<code>.crx</code>(扩展程序) &amp; <code>.pem</code>(秘钥<strong>重要</strong>)</li><li>前往<a href="https://chrome.google.com/webstore/developer/dashboard/" target="_blank" rel="external">Chrome 开发者中心</a> 认证<code>需支付5美元用于认证</code></li><li>把<code>.pem</code>更名为<code>key.pem</code>并放入<code>源码文件夹</code>中，打包为<code>.zip</code>文件</li><li>上传 并编辑 (<strong>必填 (扩展描述、ICON(128x128)、扩展截图(1280x800 or 640x400)、类别、语言)</strong>)</li></ol><hr><blockquote><p>如有遗漏或错误欢迎补充..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;身为Chrome重度患者，生活和工作处处不离，这篇并不是入门教程，而是开发中的一些小Tip的记录.&lt;br&gt;
    
    </summary>
    
      <category term="IDE" scheme="https://hocg.in/categories/IDE/"/>
    
    
      <category term="HTML5" scheme="https://hocg.in/tags/HTML5/"/>
    
      <category term="Chrome" scheme="https://hocg.in/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>关于log4j报错</title>
    <link href="https://hocg.in/2017/01/16/%E5%85%B3%E4%BA%8Elog4j%E6%8A%A5%E9%94%99/"/>
    <id>https://hocg.in/2017/01/16/关于log4j报错/</id>
    <published>2017-01-16T00:09:27.000Z</published>
    <updated>2017-02-04T05:57:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>  Java开发中经常遇到日志<code>冲突</code>或者<code>异常</code>, 彻底的来此追根究底.<br><a id="more"></a></p><h2 id="日志历史"><a href="#日志历史" class="headerlink" title="日志历史"></a>日志历史</h2><ul><li>log4j</li><li>JCL + log4j</li><li>SLF4J <code>slf4j-XXX-version.jar</code> [XXX指代log4j12, jdk14, jcl, nop 等]</li><li>slf4j-api<blockquote><p>v1 <code>log4j</code> 早期直接实现日志打印<br>v2 <code>JCL + log4j</code> 动态绑定, 面向<code>JCL 接口</code>实现的<code>log4j</code><br>v3 <code>slf4j-api</code> 提供 <code>SLF4J接口</code> <strong>面向对象编程</strong><br><code>slf4j-XXX-version.jar</code> 对接口和指定<code>XXX</code>种类日志的具体实现</p></blockquote></li></ul><h2 id="slf4j-举例jar"><a href="#slf4j-举例jar" class="headerlink" title="slf4j 举例jar"></a>slf4j 举例jar</h2><ul><li>log4j-over-slf4j.jar 把<code>log4j</code>转为<code>slf4j</code></li><li>slf4j-log4j12.jar 以slf4j标准实现的log4j12</li><li><code>XXX-over-slf4j.jar</code> 把日志重定向到<code>slf4j</code> eg.<code>jcl-over-slf4j.jar</code></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>即.<br>Component<br>   |<br>   | log to Apache Commons Logging<br>   V<br> jcl-over-slf4j.jar — (redirect) —&gt; SLF4j —&gt; slf4j-log4j12-version.jar —&gt; log4j.jar —&gt; 输出日志<br><strong>解释:</strong><br>JCL实现的重定向为SLF4J日志形式, 然后SLF4J转为Log4j12输出!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Java开发中经常遇到日志&lt;code&gt;冲突&lt;/code&gt;或者&lt;code&gt;异常&lt;/code&gt;, 彻底的来此追根究底.&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="JAVA" scheme="https://hocg.in/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Redis 相关</title>
    <link href="https://hocg.in/2016/10/20/Redis-%E7%9B%B8%E5%85%B3/"/>
    <id>https://hocg.in/2016/10/20/Redis-相关/</id>
    <published>2016-10-20T01:11:48.000Z</published>
    <updated>2017-08-24T09:48:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>  Redis 的部署和部位设计的实践, 还有常见问题的梳理! 💪<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://redis.io/download" target="_blank" rel="external">官网</a></p><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><h3 id="默认项"><a href="#默认项" class="headerlink" title="默认项"></a>默认项</h3><ul><li>端口 <code>6379</code></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>redis-3.2.4/<br>|– redis.conf <code>redis配置文件</code><br><code>-- src</code>编译后目录<code>|-- redis-server</code>启动bit文件<code>`-- redis-cli</code>终端bit文件`</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>以下操作均在<code>/opt</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载</span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.4.tar.gz</span><br><span class="line"><span class="meta">#</span> 解压</span><br><span class="line">tar -zxvf redis-3.2.4.tar.gz</span><br><span class="line">cd redis-3.2.4</span><br><span class="line"><span class="meta">#</span> 编译， 生成`src`目录</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><blockquote><p>以下操作均在<code>/opt</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 默认配置运行</span><br><span class="line">./redis-3.2.4/src/redis-server</span><br><span class="line"><span class="meta">#</span> 指定配置文件运行</span><br><span class="line">./redis-3.2.4/src/redis-server [config file]</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h2><ul><li><p>如何使<code>redis</code>后台运行?</p><blockquote><p>更改配置文件, 找到<code>daemonize</code>字段,更改<code>no</code>为<code>yes</code>, 重启<code>redis</code> <strong>切记！要指定配置文件</strong></p></blockquote></li><li><p>如何更改<code>redis</code>默认<code>6379</code>端口?</p><blockquote><p>更改配置文件, 找到<code>port</code>字段,更改为指定端口, 重启<code>redis</code> <strong>切记！要指定配置文件</strong></p></blockquote></li><li><p>如何设置<code>redis</code>的验证密码?</p><blockquote><p>更改配置文件, 找到<code>requirepass</code>字段, 设置相应的验证密码, 重启<code>redis</code> <strong>切记！要指定配置文件</strong><br>由于增加了验证密码，因此客户端连接命令为<code>redis-cli –a [upassword]</code></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Redis 的部署和部位设计的实践, 还有常见问题的梳理! 💪&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Redis" scheme="https://hocg.in/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下的 Oh My ZSH!</title>
    <link href="https://hocg.in/2016/09/30/Ubuntu%E4%B8%8B%E7%9A%84OhMyZSH!/"/>
    <id>https://hocg.in/2016/09/30/Ubuntu下的OhMyZSH!/</id>
    <published>2016-09-30T08:18:09.000Z</published>
    <updated>2017-09-22T12:48:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>号称终极shell :)<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是zsh？"><a href="#什么是zsh？" class="headerlink" title="什么是zsh？"></a>什么是zsh？</h3><p>shell的一种,<code>cat /etc/shells</code>查看当前系统支持的shell</p><h3 id="相关Link"><a href="#相关Link" class="headerlink" title="相关Link"></a>相关Link</h3><p><a href="http://www.zhihu.com/question/21418449" target="_blank" rel="external">为什么说 zsh 是 shell 中的极品？</a></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>OS: Ubuntu 16.04 x86_64</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li><p>~/.zshrc <code>文件zsh配置文件</code></p><blockquote><ol><li>可用来更改<code>Theme</code></li><li>加载<code>Plugin</code></li></ol></blockquote></li><li><p>~/.oh-my-zsh <code>oh-my-zsh目录</code></p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装zsh</span><br><span class="line"><span class="meta">$</span> sudo apt-get install zsh</span><br><span class="line"><span class="meta">#</span> 安装oh-my-zsh</span><br><span class="line"><span class="meta">$</span> sudo apt-get install wget git</span><br><span class="line"><span class="meta">$</span> wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"><span class="meta">#</span> 替换zsh为系统shell</span><br><span class="line"><span class="meta">$</span> chsh -s /bin/zsh</span><br><span class="line"><span class="meta">#</span> 退出&amp;重新登入</span><br><span class="line"><span class="meta">$</span> exit</span><br><span class="line"><span class="meta">#</span> 查看是否成功</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><a href="">zsh.config</a></p><p><strong>注意</strong></p><ul><li>需更改<code>.oh-my-zsh</code>的目录</li></ul><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><ul><li><code>git</code>;处于git项目下出现提示</li><li><p><code>autojump</code>; 目录自动提示, 需要<a href="git clone git://github.com/joelthelion/autojump.git">Linux 额外安装</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ~/.bashrc 追加</span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure></li><li><p><code>git</code>;处于git项目下出现提示</p></li><li><p><code>zsh-syntax-highlighting</code>;高亮可用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone git://github.com/jimmijj/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span><br><span class="line">plugins=(zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure></li><li><p><code>colored-man-pages</code>; 帮助文档高亮</p></li><li><code>colorize</code>;更多代码高亮</li><li><code>copydir</code>; 整个目录拷贝</li><li><code>command-not-found</code>;命令行智能提示</li><li><code>history</code>;查看输入历史</li><li><code>z</code>; <code>autojump</code>同类</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>ys</li></ul><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li>转换路径时可以省去cd命令，直接输入路径即可</li><li><code>d</code> 可以查看访问过的路径，然后输入数字就可以直接切换</li><li>输入不完整的路径/文件/命令，按下tab键可以出现提示，再按tab则可以实现路径补全</li><li>普通命令使用两次tab可进入选择模式， ctrl+f/b/n/p 可以向前后左右切换</li><li>kill + tab <code>强强强</code></li><li>alias -s xx=’xxx’ 快捷配置</li></ul><h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><blockquote><p>cat 代码高亮<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install Pygments</span><br><span class="line"><span class="meta">#</span> 增加以下alias</span><br><span class="line"><span class="meta">#</span> alias ccat='pygmentize -g'</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p><a href="https://github.com/hocgin/Gather/tree/master/oh-my-zsh" target="_blank" rel="external">Oh My ZSH!</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;号称终极shell :)&lt;br&gt;
    
    </summary>
    
      <category term="IDE" scheme="https://hocg.in/categories/IDE/"/>
    
    
      <category term="Ubuntu" scheme="https://hocg.in/tags/Ubuntu/"/>
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Oh My ZSH" scheme="https://hocg.in/tags/Oh-My-ZSH/"/>
    
  </entry>
  
  <entry>
    <title>Glup 自动化构建工具</title>
    <link href="https://hocg.in/2016/09/20/Glup-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <id>https://hocg.in/2016/09/20/Glup-自动化构建工具/</id>
    <published>2016-09-20T00:10:29.000Z</published>
    <updated>2017-09-22T12:55:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gulp.js 是一个自动化构建工具 😜<br><a id="more"></a></p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://github.com/hocgin/Gulp-Scaffold" target="_blank" rel="external">Glup 整合</a></p><h2 id="Glup"><a href="#Glup" class="headerlink" title="Glup"></a>Glup</h2><blockquote><p>Glup用自动化构建工具增强你的工作流程！</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install gulp -g</span><br><span class="line"><span class="meta">$</span> npm install gulp --save-dev</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li>编译Sass (gulp-ruby-sass)</li><li>Autoprefixer (gulp-autoprefixer)</li><li>缩小化(minify)CSS (gulp-minify-css)</li><li>JSHint (gulp-jshint)</li><li>拼接 (gulp-concat)</li><li>丑化(Uglify) (gulp-uglify)</li><li>图片压缩 (gulp-imagemin)</li><li>即时重整(LiveReload) (gulp-livereload)</li><li>清理档案 (gulp-clean)</li><li>图片快取，只有更改过得图片会进行压缩 (gulp-cache)</li><li>更动通知 (gulp-notify)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-clean gulp-notify gulp-rename gulp-livereload gulp-cache --save-dev</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gulp.js 是一个自动化构建工具 😜&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="NodeJS" scheme="https://hocg.in/tags/NodeJS/"/>
    
      <category term="Ubuntu" scheme="https://hocg.in/tags/Ubuntu/"/>
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>Ngrok使用指南</title>
    <link href="https://hocg.in/2016/08/31/Ngrok%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://hocg.in/2016/08/31/Ngrok使用指南/</id>
    <published>2016-08-30T23:15:24.000Z</published>
    <updated>2017-02-04T05:39:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ngrok 是一款内部端口转发，对于微信类似的开发很有用的😆<br>可参照墙内(花生壳 or nat123)<br><a id="more"></a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>编译环境:</strong><br><a href="https://storage.googleapis.com/golang/go1.4.1.linux-amd64.tar.gz" target="_blank" rel="external">Go 1.4.1 强烈建议</a><br>根域名: <code>web.hocg.in</code>,即生成的域名为<code>*.web.hocg.in</code><br>文件结构:<br>ngrok<br>  ├── bin<br>  │   └── ngrok.cfg<br>  ├── client.sh<br>  ├── code.sh<br>  └── server.sh<br><strong>部署环境:</strong><br>服务器OS: Ubuntu-15<br>客户端OS: Ubuntu-16</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="环境依赖及源码下载"><a href="#环境依赖及源码下载" class="headerlink" title="环境依赖及源码下载"></a>环境依赖及源码下载</h3><blockquote><p>以下命令根目录统一在<code>/opt</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 环境依赖</span><br><span class="line">sudo apt-get install build-essential golang mercurial git</span><br><span class="line"><span class="meta">#</span> 获取 ngrok 源码</span><br><span class="line">git clone https://github.com/tutumcloud/ngrok.git ngrok</span><br><span class="line">cd ngrok</span><br></pre></td></tr></table></figure><h3 id="生成证书-amp-amp-编译"><a href="#生成证书-amp-amp-编译" class="headerlink" title="生成证书 &amp;&amp; 编译"></a>生成证书 &amp;&amp; 编译</h3><blockquote><p>以下命令根目录统一在<code>/opt/ngrok</code></p></blockquote><p><code>code.sh</code>文件</p><blockquote><p>生成证书 &amp;&amp; 编译服务端<br><code>DOMAIN</code> 为配置的<code>根域名</code>, 用于签名.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo "开始清除.."</span><br><span class="line">rm -rf assets/client/tls/ngrokroot.crt</span><br><span class="line">rm -rf assets/server/tls/snakeoil.crt</span><br><span class="line">rm -rf assets/server/tls/snakeoil.key</span><br><span class="line">rm -rf device.*</span><br><span class="line">rm -rf rootCA.*</span><br><span class="line">DOMAIN=web.hocg.in</span><br><span class="line">echo "设置域名为[*.$DOMAIN]"</span><br><span class="line">echo "开始生成秘钥.."</span><br><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj "/CN=$DOMAIN" -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out device.key 2048</span><br><span class="line">openssl req -new -key device.key -subj "/CN=$DOMAIN" -out device.csr</span><br><span class="line">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br><span class="line"></span><br><span class="line">echo "开始迁移秘钥.."</span><br><span class="line">cp -rf rootCA.pem assets/client/tls/ngrokroot.crt</span><br><span class="line">cp -rf device.crt assets/server/tls/snakeoil.crt</span><br><span class="line">cp -rf device.key assets/server/tls/snakeoil.key</span><br><span class="line"></span><br><span class="line">echo "开始编译.."</span><br><span class="line">make release-server</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><blockquote><p>前置条件: Go需先增加对这些平台交叉编译的支持</p></blockquote><ul><li>Windows<br>go的<code>src</code>目录  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=windows GOARCH=amd64 ./make.bash</span><br></pre></td></tr></table></figure></li></ul><p><code>nginx</code>目录,编译<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=windows GOARCH=amd64 make release-client</span><br></pre></td></tr></table></figure></p><ul><li>macOS<br>go的<code>src</code>目录  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=darwin GOARCH=amd64 ./make.bash</span><br></pre></td></tr></table></figure></li></ul><p><code>nginx</code>目录,编译<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=darwin GOARCH=amd64 make release-client</span><br></pre></td></tr></table></figure></p><ul><li>Linux<br><code>nginx</code>目录,编译<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make release-client</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>ngrok.cfg</code>文件</p><blockquote><p><code>server_addr</code> 为配置的<code>根域名</code>， <code>4443</code>为默认端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_addr: web.hocg.in:4443</span><br><span class="line">trust_host_root_certs: false</span><br></pre></td></tr></table></figure><h3 id="运行文件"><a href="#运行文件" class="headerlink" title="运行文件"></a>运行文件</h3><p><code>server.sh</code>文件</p><blockquote><p>服务器运行<br><code>DOMAIN</code> 为配置的<code>根域名</code>.<br>注释的那一句用于后台运行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span> $1 HTTP</span><br><span class="line"><span class="meta">#</span> $2 HTTPS</span><br><span class="line">killall ngrokd</span><br><span class="line">DOMAIN=web.hocg.in</span><br><span class="line"><span class="meta">#</span> nohup ./bin/ngrokd -domain="$DOMAIN" -httpAddr=":$1" -httpsAddr=":$2" &gt;/tmp/ngrok.log 2&gt;&amp;1 &amp;</span><br><span class="line">./bin/ngrokd -domain="$DOMAIN" -httpAddr=":$1" -httpsAddr=":$2"</span><br></pre></td></tr></table></figure><p><code>client.sh</code>文件</p><blockquote><p>客户端运行, default:linux<br>具体环境修改具体内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span> $1 Port</span><br><span class="line"><span class="meta">#</span> $2 domain</span><br><span class="line">./bin/ngrok -subdomain $2 -proto=http -config=./bin/ngrok.cfg $1</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>若需变更域名, 需修改<code>code.sh</code>的<code>DOMAIN</code>、<code>server.sh</code>的<code>DOMAIN</code>与<code>./bin/ngrok.cfg</code>的<code>server_addr</code></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh code.sh</span><br></pre></td></tr></table></figure><p><strong>成功</strong> 检查<code>ngrok/bin</code>文件夹是否存在<code>ngrok</code> and <code>ngrokd</code></p></blockquote><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh server.sh 8888 9999</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh client.sh 8080 dm</span><br></pre></td></tr></table></figure><h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><p>访问:<code>http://dm.web.hocg.in:8888</code><br><img src="https://hocg.in/i/Ngrok使用指南.png" alt="image"></p><h2 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h2><h3 id="关于域名解析"><a href="#关于域名解析" class="headerlink" title="关于域名解析"></a>关于域名解析</h3><p>eg. <code>*.web.hocg.in</code><br>路径解析需配置<code>*.web</code> and <code>web</code> 两个A记录</p><h3 id="关于签名"><a href="#关于签名" class="headerlink" title="关于签名"></a>关于签名</h3><p>最好在同一环境进行<code>服务端</code>和<code>客户端</code>的编译</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li>如何让服务端的<code>ngrok</code>后台运行<blockquote><p>正常的<code>nohup</code>或<code>&amp;</code>是无法使<code>ngrok</code>后台运行的<br>需使用<code>screen</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装</span><br><span class="line">\# apt-get install screen</span><br><span class="line"><span class="meta">#</span> 使用</span><br><span class="line">screen -S [命名] [需放入后台的命令]</span><br><span class="line"><span class="meta">#</span> 使用 ctrl+A+D 让其运行在后台</span><br><span class="line"><span class="meta">#</span> 查看screen 后台进程</span><br><span class="line">screen -ls</span><br><span class="line"><span class="meta">#</span> 重新连接后台进程</span><br><span class="line">screen -r [进程id]</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="可能遇到的异常"><a href="#可能遇到的异常" class="headerlink" title="可能遇到的异常"></a>可能遇到的异常</h2><ul><li>Go-1.2.1语言版本不支持<code>go version</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> github.com/gorilla/websocket</span><br><span class="line">src/github.com/gorilla/websocket/client.go:361: unknown tls.Config field 'GetCertificate' in struct literal</span><br><span class="line">src/github.com/gorilla/websocket/client.go:370: unknown tls.Config field 'ClientSessionCache' in struct literal</span><br><span class="line">src/github.com/gorilla/websocket/client.go:373: unknown tls.Config field 'CurvePreferences' in struct literal</span><br><span class="line">make: *** [client] Error 2</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://golang.org/doc/install?download=go1.7.linux-amd64.tar.gz" target="_blank" rel="external">官方Go-64的安装</a></p><ul><li>Go编译器找不到<code>go-bindata</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GOOS="" GOARCH="" go get github.com/jteeuwen/go-bindata/go-bindata</span><br><span class="line">/bin/sh: 1: go: not found</span><br><span class="line">make: *** [bin/go-bindata] Error 127</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>请注意配置好<code>GOROOT</code>和<code>GOPATH</code></p><blockquote><p><code>GOROOT</code>为安装GO的目录<br><code>GOPATH</code>自定义一个GO插件下载目录</p></blockquote></li><li><p>执行以下shell下载插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/jteeuwen/go-bindata/...</span><br></pre></td></tr></table></figure></li></ol><p>END:)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ngrok 是一款内部端口转发，对于微信类似的开发很有用的😆&lt;br&gt;可参照墙内(花生壳 or nat123)&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="Ngrok" scheme="https://hocg.in/tags/Ngrok/"/>
    
      <category term="Tip" scheme="https://hocg.in/tags/Tip/"/>
    
  </entry>
  
  <entry>
    <title>Nexus 入门</title>
    <link href="https://hocg.in/2016/08/24/Nexus%E5%85%A5%E9%97%A8/"/>
    <id>https://hocg.in/2016/08/24/Nexus入门/</id>
    <published>2016-08-24T11:03:01.000Z</published>
    <updated>2016-10-26T09:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>适合<code>nexus</code>入门，不是手机，不是手机，不是手机　．．ｏ（╯□╰）ｏ<br><a id="more"></a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Ubuntu-14.04.1</li><li>jdk1.8.0_102</li><li><a href="https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.12.0-01-bundle.tar.gz" target="_blank" rel="external">nexus-2.12.0-01</a>|<a href="http://www.sonatype.org/nexus/" target="_blank" rel="external">官网</a></li><li>域名:<code>nexus.hocg.in</code></li></ul><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>安装完jdk并配置好环境变量 <code>eg: java查看是否成功</code></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>温馨提示:</strong> 以下操作都是在<code>/opt</code>目录下</p><h3 id="下载-amp-解压"><a href="#下载-amp-解压" class="headerlink" title="下载&amp;解压"></a>下载&amp;解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载</span><br><span class="line">wget https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.12.0-01-bundle.tar.gz</span><br><span class="line"><span class="meta">#</span> 解压</span><br><span class="line">tar -zxvf nexus-2.12.0-01-bundle.tar.gz</span><br><span class="line"><span class="meta">#</span> 清理</span><br><span class="line">rm -rf *.gz</span><br></pre></td></tr></table></figure><h3 id="文件-目录详解"><a href="#文件-目录详解" class="headerlink" title="文件/目录详解"></a>文件/目录详解</h3><ul><li><code>nexus-2.12.0-01</code> 程序目录</li><li><code>sonatype-work</code> 仓库目录(内包含仓库配置及jar包仓库)</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nexus-2.12.0-01/bin/nexus &#123; console | start | stop | restart | status | dump &#125;</span><br></pre></td></tr></table></figure><p><code>访问 http://nexus.hocg.in:8081/nexus</code></p><blockquote><p>默认账号:admin 默认密码: admin123</p></blockquote><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="Maven-中配置仓库"><a href="#Maven-中配置仓库" class="headerlink" title="Maven 中配置仓库"></a>Maven 中配置仓库</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>Nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://nexus.hocg.in:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="如何修改默认8081端口"><a href="#如何修改默认8081端口" class="headerlink" title="如何修改默认8081端口"></a>如何修改默认<code>8081</code>端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/nexus-2.12.0-01/conf/nexus.properties</span><br><span class="line"><span class="meta">#</span> 修改application-port=8081项</span><br></pre></td></tr></table></figure><h3 id="如何创建用户"><a href="#如何创建用户" class="headerlink" title="如何创建用户"></a>如何创建用户</h3><p>登陆系统后，左侧<code>Security &gt; Users</code>中创建</p><h3 id="如何使用构建账号"><a href="#如何使用构建账号" class="headerlink" title="如何使用构建账号"></a>如何使用<code>构建账号</code></h3><p>修改<code>Settings.xml</code>文件 (<strong>Maven</strong>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;servers&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">&lt;id&gt;nexus.hocg.in&lt;/id&gt;</span><br><span class="line">&lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">&lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">&lt;/server&gt;</span><br><span class="line">&lt;/servers&gt;</span><br></pre></td></tr></table></figure></p><h3 id="如何修改用户密码"><a href="#如何修改用户密码" class="headerlink" title="如何修改用户密码"></a>如何修改用户密码</h3><p>登陆系统后，顶部<code>点击用户名 &gt; Profile</code>中修改</p><h3 id="如何建立与中央仓库的索引"><a href="#如何建立与中央仓库的索引" class="headerlink" title="如何建立与中央仓库的索引"></a>如何建立与中央仓库的索引</h3><p><img src="https://hocg.in/i/如何建立与中央仓库的索引.png" alt="image"></p><blockquote><p><strong>Note:</strong> Nexus会自动建立任务计划,一般远程仓库都比较大，构建会比较多，因此索引文件会很大，请确保磁盘大小充足.</p></blockquote><h2 id="可能出现的报错"><a href="#可能出现的报错" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h2><ul><li><strong>1</strong> WARNING - NOT RECOMMENDED TO RUN AS ROOT , 原因是提醒你是否确认用<code>root</code>用户运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\# ./nexus-2.12.0-01/bin/nexus restart</span><br><span class="line">****************************************</span><br><span class="line">WARNING - NOT RECOMMENDED TO RUN AS ROOT</span><br><span class="line">****************************************</span><br><span class="line">Stopping Nexus OSS...</span><br><span class="line">Nexus OSS was not running.</span><br><span class="line">Starting Nexus OSS...</span><br><span class="line">Started Nexus OSS.</span><br></pre></td></tr></table></figure></li></ul><p>解决:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim ./nexus-2.12.0-01/bin/nexus</span><br><span class="line"><span class="meta">#</span> 加入系统变量</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span> 加入export RUN_AS_USER=root</span><br><span class="line"><span class="meta">#</span> 修改</span><br><span class="line">RUN_AS_USER=root</span><br><span class="line"><span class="meta">#</span> 启动</span><br><span class="line">./nexus-2.12.0-01/bin/nexus start</span><br><span class="line"><span class="meta">#</span> 查看是否启动成功</span><br><span class="line">./nexus-2.12.0-01/bin/nexus status</span><br><span class="line"><span class="meta">#</span> 稍等几分钟再访问</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适合&lt;code&gt;nexus&lt;/code&gt;入门，不是手机，不是手机，不是手机　．．ｏ（╯□╰）ｏ&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Nexus" scheme="https://hocg.in/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Android L 及以上版本Rom包中提取apk</title>
    <link href="https://hocg.in/2016/08/07/Android-L-%E5%8F%8A%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%ACRom%E5%8C%85%E4%B8%AD%E6%8F%90%E5%8F%96apk/"/>
    <id>https://hocg.in/2016/08/07/Android-L-及以上版本Rom包中提取apk/</id>
    <published>2016-08-07T11:19:29.000Z</published>
    <updated>2018-05-05T17:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>提取想要的apk， 例如CM ROM包中的含天气的时钟不错！</p><a id="more"></a><h2 id="以往版本"><a href="#以往版本" class="headerlink" title="以往版本"></a>以往版本</h2><blockquote><p>Android Rom包只需解压后，取出system包即可取出内部apk</p></blockquote><h2 id="Now"><a href="#Now" class="headerlink" title="Now"></a>Now</h2><blockquote><p>解压后可以发现，文件发生了改变并且<code>system.new.dat</code>此文件是不支持直接解压的。</p></blockquote><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>系统: win10<br>工具: <a href="http://7xs6lq.com1.z0.glb.clouddn.com/Extractor%20and%20Repacker%204.0.rar" target="_blank" rel="external">下载</a></p><blockquote><p>环境自备</p></blockquote><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li>普通方式解压ROM</li><li>运行下载工具中.bat文件<code>Extractor.bat</code></li><li>根据提示选择<code>1</code>，并复制<code>system.new.dat</code>, <code>system.transfer.list</code>，<code>file_contexts</code>三个文件到bat文件所在目录</li><li>按任意键继续</li><li>完成后可以得到一个<code>system</code>文件夹</li><li>嘿嘿嘿..</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题!"></a>问题!</h3><ol><li>有可能在你安装apk的时候出现<code>应用未安装</code>的情况<ul><li>可以尝试重新对apk进行签名</li><li>检查是否已经安装过该apk</li></ul></li></ol><p>End</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提取想要的apk， 例如CM ROM包中的含天气的时钟不错！&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hocg.in/categories/Android/"/>
    
    
      <category term="Android" scheme="https://hocg.in/tags/Android/"/>
    
      <category term="手机" scheme="https://hocg.in/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>模块设计之对接同步订单模块</title>
    <link href="https://hocg.in/2016/08/02/%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%AF%B9%E6%8E%A5%E5%90%8C%E6%AD%A5%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/"/>
    <id>https://hocg.in/2016/08/02/模块设计之对接同步订单模块/</id>
    <published>2016-08-02T02:47:06.000Z</published>
    <updated>2018-05-05T07:43:59.744Z</updated>
    
    <content type="html"><![CDATA[<p>实习期间设计的对接同步订单的某块, 缅怀..<br>设计日期(2016.6)<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong>#对接同步订单模块#</strong> 该部分是我入职后自主设计的一个模块，因为初期预计对接5家平台的订单，并考虑到后期可能对接更多平台和平台订单数量等，所以扩展性和性能方面是很值得深思的问题。</p></blockquote><h2 id="开发周期-20day"><a href="#开发周期-20day" class="headerlink" title="开发周期 (20day)"></a>开发周期 (20day)</h2><blockquote><p>前期需求的多次变更，大大的浪费了开发周期.</p></blockquote><ul><li>库表设计</li><li>接口整理和整合设计(主要是对接平台的接口整合等)</li><li>代码编写</li></ul><h2 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h2><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ul><li>商品表,<strong>存储商品信息, 主要配合方案匹配</strong></li><li>授权表,<strong>存储用户授权信息，主要用于token管理</strong></li><li>平台配置表,<strong>存储平台key信息</strong></li><li>方案表,<strong>已存在，存储方案信息</strong></li></ul><h3 id="v1版"><a href="#v1版" class="headerlink" title="v1版"></a>v1版</h3><h4 id="思路图"><a href="#思路图" class="headerlink" title="思路图"></a>思路图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/总体思路-v1-op.png" alt="总体思路-v1-op.png"></p><h4 id="业务图"><a href="#业务图" class="headerlink" title="业务图"></a>业务图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/业务-v1-op.png" alt="总体思路-v1-now.png"></p><p>原先，该部分设计是不考虑对订单数据进行缓存处理的，但后期需求多次变更被迫进行数据缓存，因此再原先的基础上建立了线程池并对同步订单部分进行异步线程处理，因此增加了一张订单缓存表和事件队列表。</p><hr><h3 id="v2版"><a href="#v2版" class="headerlink" title="v2版"></a>v2版</h3><h4 id="思路图-1"><a href="#思路图-1" class="headerlink" title="思路图"></a>思路图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/总体思路-v2-now.png" alt="总体思路-v2-op.png"></p><h4 id="业务图-1"><a href="#业务图-1" class="headerlink" title="业务图"></a>业务图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/业务-v2-now.png" alt="总体思路-v2-now.png"></p><blockquote><p>后面又对缓存表进行了数据去重防止表数据爆炸性增长。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>把公共抽离出来，中间新增转化层可以很好的解决代码复用的问题.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习期间设计的对接同步订单的某块, 缅怀..&lt;br&gt;设计日期(2016.6)&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="Java" scheme="https://hocg.in/tags/Java/"/>
    
      <category term="设计思路" scheme="https://hocg.in/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>模块设计之消息模块</title>
    <link href="https://hocg.in/2016/07/30/%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9D%97/"/>
    <id>https://hocg.in/2016/07/30/模块设计之消息模块/</id>
    <published>2016-07-30T11:25:56.000Z</published>
    <updated>2018-05-05T07:44:06.607Z</updated>
    
    <content type="html"><![CDATA[<p>  新手上路，小心撞车..<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong>#消息模块#</strong> 这是我刚入职时所接触的第一个模块，也算是比较大的模块了。这个模块的业务是负责整个项目所有的消息出入口，包含短信发送，APP推送，邮件发送以及前后端人员站内消息。当时设计的时候需求架构比较简单而且时间紧迫(π__π)，没有从根本理清业务和功能后期存在的扩展。因此，这篇文章是记录当时架构的思路和需要改善的地方。</p></blockquote><h2 id="开发周期-10day"><a href="#开发周期-10day" class="headerlink" title="开发周期 (10day)"></a>开发周期 (10day)</h2><ul><li>库表设计</li><li>接口整理和整合设计(短信&amp;友盟&amp;邮件等)</li><li>代码编写</li></ul><h2 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h2><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ul><li>消息记录表, <strong>主要负责消息出入口记录</strong></li><li>事件触发表, <strong>主要对消息进行控制，例如: 触发订单变更推送到用户/运营人员 and so on</strong></li><li>消息状态表, <strong>主要负责消息发送的状态，包含定时发送，撤销发送 and so on</strong></li></ul><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/业务-now.png" alt="当前业务流程图"></p><h2 id="类流程图"><a href="#类流程图" class="headerlink" title="类流程图"></a>类流程图</h2><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/类-now.png" alt="当前类流程图"></p><p>如图，此模式主要是利用工厂模式, 提供多种消息通道实例，由不同的消息通道对自身通道消息进行处理，类似于把西瓜，牛肉，白菜等送入不同的工厂进行加工，但是又由食品质量控制中心对其进行记录和检验。</p><p><strong>优点</strong>: 后期便于扩展更多的通道模式<br><strong>缺点</strong>: 各个模式是靠类型区别的，不便于进行细节化处理(例如，对某部分APP推送进行定制化，进入某个Activity等细节化定制)</p><h2 id="进一步优化类流程图"><a href="#进一步优化类流程图" class="headerlink" title="进一步优化类流程图"></a>进一步优化类流程图</h2><blockquote><p>使用Route进行更细节的定制化处理<br>更多实战，<a href="https://github.com/chanjarster/weixin-java-tools" target="_blank" rel="external">推荐</a></p></blockquote><h3 id="图-1"><a href="#图-1" class="headerlink" title="图"></a>图</h3><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/类-op.png" alt="当前类流程图"></p><blockquote><p>囧，单看图可能细分不出两者的差别，附上一段代码实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由规则初始化，用于定义匹配规则</span></span><br><span class="line">NoticeRouter router = <span class="keyword">new</span> NoticeRouter();</span><br><span class="line">route.rule()</span><br><span class="line">    .noticeType(Notice.SMS)</span><br><span class="line">    <span class="comment">// ... 更多细节规则匹配</span></span><br><span class="line">    .handler(smsHandler)</span><br><span class="line">    .end()</span><br><span class="line">    .rule()</span><br><span class="line">    .noticeType(Notice.EMail)</span><br><span class="line">    <span class="comment">// ... 更多细节规则匹配</span></span><br><span class="line">    .handler(emailHandler)</span><br><span class="line">    .end()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将通知实体通知路由处理</span></span><br><span class="line">router.route(message)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>充分考虑后期业务需求 (就算非必须的业务需求)<blockquote><p>不要妄想需求是恒久不变的，需求=小三，扩展=真爱</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  新手上路，小心撞车..&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="Java" scheme="https://hocg.in/tags/Java/"/>
    
      <category term="设计思路" scheme="https://hocg.in/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Mac的使用</title>
    <link href="https://hocg.in/2016/07/02/Mac-%E4%BD%BF%E7%94%A8/"/>
    <id>https://hocg.in/2016/07/02/Mac-使用/</id>
    <published>2016-07-02T02:47:06.000Z</published>
    <updated>2016-08-27T05:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>  留坑，刚刚起步，梳理中ing。<br><a id="more"></a></p><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li>在Dock 隐藏 iTerm2<br>隐藏:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy -c "Add :LSUIElement bool true" /Applications/iTerm.app/Contents/Info.plist</span><br></pre></td></tr></table></figure></li></ul><p>显示:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy -c "Delete :LSUIElement" /Applications/iTerm.app/Contents/Info.plist</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  留坑，刚刚起步，梳理中ing。&lt;br&gt;
    
    </summary>
    
      <category term="OS" scheme="https://hocg.in/categories/OS/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Mac" scheme="https://hocg.in/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>谈JVM，各种过程</title>
    <link href="https://hocg.in/2016/06/12/%E8%B0%88JVM-%E5%90%84%E7%A7%8D%E8%BF%87%E7%A8%8B/"/>
    <id>https://hocg.in/2016/06/12/谈JVM-各种过程/</id>
    <published>2016-06-12T11:37:49.000Z</published>
    <updated>2016-08-27T05:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>谈谈JVM 各种过程， XMind等我整理一下，稍后贴出 囧～<br>欢迎指教..<br><strong>update:</strong> 2016-08-03 14:44:12 更新了图<br><a id="more"></a></p><h3 id="总思路"><a href="#总思路" class="headerlink" title="总思路"></a>总思路</h3><p>编译过程 -&gt; 运行过程[类加载器过程(类的装载过程) -&gt; 执行过程]</p><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/总思路-v1.png" alt="总思路-v1.png"></p><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>.java文件 -javac编译-&gt; .class文件       {-JIT编译(转化+优化)-&gt; 本地方法}[执行过程，当方法执行频率高]</p><h4 id="图-1"><a href="#图-1" class="headerlink" title="图"></a>图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/编译过程.png" alt="编译过程.png"></p><hr><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><p>类加载器 -&gt; (执行引擎 -&gt; 本地库接口)[Java 运行时数据区] -&gt; 本地方法库</p><h4 id="图-2"><a href="#图-2" class="headerlink" title="图"></a>图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/运行过程.png" alt="运行过程.png"></p><hr><h3 id="类加载器过程"><a href="#类加载器过程" class="headerlink" title="类加载器过程"></a><strong>类加载器</strong>过程</h3><p>[启动]类加载器(JNI) -&gt; [扩展]类加载器 -&gt; [系统]类加载器 -&gt; [自定义]类加载器</p><h4 id="图-3"><a href="#图-3" class="headerlink" title="图"></a>图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/类加载器过程.png" alt="类加载器过程.png"></p><hr><h3 id="类装载过程"><a href="#类装载过程" class="headerlink" title="类装载过程"></a><strong>类</strong>装载过程</h3><p>加载文件到JVM内存 -&gt; (校验语言规范 -&gt; 分配结构存储类的信息 -&gt; 该类常量池中符号更改为直接引用)[Linking] -&gt; 类初始化</p><h4 id="图-4"><a href="#图-4" class="headerlink" title="图"></a>图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/类装载过程.png" alt="类装载过程.png"></p><hr><h3 id="执行引擎执行过程-逐行读取指令"><a href="#执行引擎执行过程-逐行读取指令" class="headerlink" title="执行引擎执行过程(逐行读取指令)"></a><strong>执行引擎</strong>执行过程(逐行读取指令)</h3><p>Thread启动 -生成-&gt; JVM栈 -执行方法-&gt; 压入栈帧(包含 局部变量数组&amp;操作数栈&amp;运行时常量池) -&gt; 逐行读取指令&amp;&amp;解释(JVM栈帧 程序计数器存放下一条指令) -&gt; {JIT(转化+优化)-&gt; 本地方法}[当方法执行频率高] -执行&amp;运算-&gt; 结果(存放 操作数栈中) -&gt; 推出栈帧</p><h4 id="图-5"><a href="#图-5" class="headerlink" title="图"></a>图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/执行引擎执行过程.png" alt="执行引擎执行过程.png"></p><hr><h3 id="Java-运行时数据区-贯穿整个执行过程"><a href="#Java-运行时数据区-贯穿整个执行过程" class="headerlink" title="Java 运行时数据区(贯穿整个执行过程)"></a>Java 运行时数据区(贯穿整个执行过程)</h3><p>共享型数据区：方法区(含运行时常量池[存放方法&amp;变量的实际<strong>地址</strong>])、堆(存放对象实例)<br>隔离型数据区：JVM 栈、本地方法栈(JNI)、程序计数器</p><h4 id="图-6"><a href="#图-6" class="headerlink" title="图"></a>图</h4><p><img src="http://7xs6lq.com1.z0.glb.clouddn.com/运行时数据图.png" alt="运行时数据图.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谈谈JVM 各种过程， XMind等我整理一下，稍后贴出 囧～&lt;br&gt;欢迎指教..&lt;br&gt;&lt;strong&gt;update:&lt;/strong&gt; 2016-08-03 14:44:12 更新了图&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="Java" scheme="https://hocg.in/tags/Java/"/>
    
      <category term="JVM" scheme="https://hocg.in/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>谈JVM，字节码</title>
    <link href="https://hocg.in/2016/06/12/%E8%B0%88JVM-%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>https://hocg.in/2016/06/12/谈JVM-字节码/</id>
    <published>2016-06-12T11:37:49.000Z</published>
    <updated>2016-08-27T05:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>谈谈JVM，最近在研究破解jar，有这方面经验的麻烦指导一下思路..<br><a id="more"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.yangyong.me/java-class%E6%96%87%E4%BB%B6%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4-%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bclass%E6%96%87%E4%BB%B6/#viewclass" target="_blank" rel="external">参考1</a><br><a href="http://blog.csdn.net/sprayabc/article/details/8576605" target="_blank" rel="external">指令整理</a></p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反编译查看`类文件`所有信息</span></span><br><span class="line">javap -verbose [class]</span><br></pre></td></tr></table></figure><h2 id="局部变量类型"><a href="#局部变量类型" class="headerlink" title="局部变量类型"></a>局部变量类型</h2><table><thead><tr><th>特殊字符表示</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>c</td><td>char</td><td>char类型</td></tr><tr><td>i</td><td>int</td><td>int类型</td></tr><tr><td>l</td><td>long</td><td>long类型</td></tr><tr><td>s</td><td>short</td><td>short类型</td></tr><tr><td>b</td><td>byte</td><td>byte类型</td></tr><tr><td>f</td><td>float</td><td>float类型</td></tr><tr><td>z</td><td>boolean</td><td>布尔类型</td></tr><tr><td>a</td><td>reference</td><td>引用</td></tr></tbody></table><h2 id="方法信息"><a href="#方法信息" class="headerlink" title="方法信息"></a>方法信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L1</span><br><span class="line">    LOCALVARIABLE this LMain; L0 L1 0</span><br><span class="line">    LOCALVARIABLE a I L0 L1 1</span><br><span class="line">    MAXSTACK = 0</span><br><span class="line">    MAXLOCALS = 2</span><br></pre></td></tr></table></figure><p>局部变量参数 LOCALVARIABLE<br>局部表大小 MAXLOCALS<br>操作数栈大小 MAXSTACK</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><blockquote><p>算术指令用于对两个<code>操作数栈</code>上的值进行某种特定运算，并把结果重新存入到<code>操作栈</code>顶。</p></blockquote><ul><li>加法指令:iadd,ladd,fadd,dadd</li><li>减法指令:isub,lsub,fsub,dsub</li><li>乘法指令:imul,lmul,fmul,dmul</li><li>除法指令:idiv,ldiv,fdiv,ddiv</li><li>求余指令:irem,lrem,frem,drem</li><li>取反指令:ineg,leng,fneg,dneg</li><li>位移指令:ishl,ishr,iushr,lshl,lshr,lushr</li><li>按位或指令:ior,lor</li><li>按位与指令:iand,land</li><li>按位异或指令:ixor,lxor</li><li>局部变量自增指令:iinc</li><li>比较指令:dcmpg,dcmpl,fcmpg,fcmpl,lcmp</li></ul><h3 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h3><blockquote><p>用于<code>局部变量表</code>和<code>操作数栈</code>之间来回传输</p></blockquote><ul><li>将一个局部变量加载到操作数栈的指令包括：iload,iload_&lt;n&gt;，lload、lload_&lt;n&gt;、float、fload_&lt;n&gt;、dload、dload_&lt;n&gt;，aload、aload_&lt;n&gt;。</li><li>将一个数值从操作数栈存储到局部变量标的指令：istore,istore_&lt;n&gt;,lstore,lstore_&lt;n&gt;,fstore,fstore_&lt;n&gt;,dstore,dstore_&lt;n&gt;,astore,astore_&lt;n&gt;</li><li>将常量加载到操作数栈的指令：bipush,sipush,ldc,ldc_w,ldc2_w,aconst_null,iconst_ml,iconst_&lt;i&gt;,lconst_&lt;l&gt;,fconst_&lt;f&gt;,dconst_&lt;d&gt;</li><li>局部变量表的访问索引指令:wide<br>  一部分以尖括号结尾的指令代表了一组指令，如iload_&lt;i&gt;，代表了iload_0,iload_1等，这几组指令都是带有一个操作数的通用指令。</li></ul><h3 id="运算指令-1"><a href="#运算指令-1" class="headerlink" title="运算指令"></a>运算指令</h3><blockquote><p>对两个<code>操作数栈</code>上的值进行某种特定运算，并把结果重新存入到<code>操作栈</code>顶</p></blockquote><ul><li>加法指令:iadd,ladd,fadd,dadd</li><li>减法指令:isub,lsub,fsub,dsub</li><li>乘法指令:imul,lmul,fmul,dmul</li><li>除法指令:idiv,ldiv,fdiv,ddiv</li><li>求余指令:irem,lrem,frem,drem</li><li>取反指令:ineg,leng,fneg,dneg</li><li>位移指令:ishl,ishr,iushr,lshl,lshr,lushr</li><li>按位或指令:ior,lor</li><li>按位与指令:iand,land</li><li>按位异或指令:ixor,lxor</li><li>局部变量自增指令:iinc</li><li>比较指令:dcmpg,dcmpl,fcmpg,fcmpl,lcmp</li></ul><h3 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h3><blockquote><p>将两种Java虚拟机数值类型相互转换</p></blockquote><p>JVM支持宽化类型转换(小范围类型向大范围类型转换)：</p><ul><li>int类型到long,float,double类型</li><li>long类型到float,double类型</li><li>float到double类型</li></ul><h3 id="对象创建与操作"><a href="#对象创建与操作" class="headerlink" title="对象创建与操作"></a>对象创建与操作</h3><blockquote><p>虽然类实例和数组都是对象，Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令。</p></blockquote><ul><li>创建实例的指令:new</li><li>创建数组的指令:newarray,anewarray,multianewarray</li><li>访问字段指令:getfield,putfield,getstatic,putstatic</li><li>把数组元素加载到操作数栈指令:baload,caload,saload,iaload,laload,faload,daload,aaload</li><li>将操作数栈的数值存储到数组元素中执行:bastore,castore,castore,sastore,iastore,fastore,dastore,aastore</li><li>取数组长度指令:arraylength</li><li>检查实例类型指令:instanceof,checkcast</li></ul><h3 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h3><p>直接操作操作数栈的指令：pop,pop2,dup,dup2,dup_x1,dup2_x1,dup_x2,dup2_x2和swap</p><blockquote><p>NOTE: 压入栈顶(DUP)/弹出栈顶(POP)</p></blockquote><h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><ul><li>条件分支:ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnotnull,if_cmpeq,if_icmpne,if_icmlt,if_icmpgt等</li><li>复合条件分支:tableswitch,lookupswitch</li><li>无条件分支:goto,goto_w,jsr,jsr_w,ret</li></ul><h3 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h3><ul><li>invokevirtual指令:调用对象的实例方法，根据对象的实际类型进行分派(虚拟机分派)。</li><li>invokeinterface指令:调用接口方法，在运行时搜索一个实现这个接口方法的对象，找出合适的方法进行调用。</li><li>invokespecial:调用需要特殊处理的实例方法，包括实例初始化方法，私有方法和父类方法</li><li>invokestatic:调用类方法(static)</li><li>方法返回指令是根据返回值的类型区分的，包括ireturn(返回值是boolean,byte,char,short和int),lreturn,freturn,drturn和areturn，另外一个return供void方法，实例初始化方法，类和接口的类初始化i方法使用。</li></ul><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><h2 id="Eg"><a href="#Eg" class="headerlink" title="Eg:"></a>Eg:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// class version 52.0 (52)</span><br><span class="line">// access flags 0x21</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">  // compiled from: Main.java</span><br><span class="line"></span><br><span class="line">  // access flags 0x11</span><br><span class="line">  public final I simpleField = 100</span><br><span class="line"></span><br><span class="line">  // access flags 0x0</span><br><span class="line">  &lt;init&gt;()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 12 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 10 L1</span><br><span class="line">    ALOAD 0</span><br><span class="line">    BIPUSH 100</span><br><span class="line">    PUTFIELD Main.simpleField : I</span><br><span class="line">   L2</span><br><span class="line">    LINENUMBER 13 L2</span><br><span class="line">    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;</span><br><span class="line">    BIPUSH 100</span><br><span class="line">    INVOKEVIRTUAL java/io/PrintStream.print (I)V</span><br><span class="line">   L3</span><br><span class="line">    LINENUMBER 14 L3</span><br><span class="line">    RETURN</span><br><span class="line">   L4</span><br><span class="line">    LOCALVARIABLE this LMain; L0 L4 0</span><br><span class="line">    MAXSTACK = 2</span><br><span class="line">    MAXLOCALS = 1</span><br><span class="line"></span><br><span class="line">  // access flags 0x9</span><br><span class="line">  public static main([Ljava/lang/String;)V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 16 L0</span><br><span class="line">    NEW Main</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL Main.&lt;init&gt; ()V</span><br><span class="line">    ASTORE 1</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 17 L1</span><br><span class="line">    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;</span><br><span class="line">    LDC &quot;--&gt;&quot;</span><br><span class="line">    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V</span><br><span class="line">   L2</span><br><span class="line">    LINENUMBER 19 L2</span><br><span class="line">    RETURN</span><br><span class="line">   L3</span><br><span class="line">    LOCALVARIABLE args [Ljava/lang/String; L0 L3 0</span><br><span class="line">    LOCALVARIABLE main LMain; L1 L3 1</span><br><span class="line">    MAXSTACK = 2</span><br><span class="line">    MAXLOCALS = 2</span><br><span class="line"></span><br><span class="line">  // access flags 0x21</span><br><span class="line">  public synchronized a(I)V throws java/lang/Exception </span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 23 L0</span><br><span class="line">    RETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this LMain; L0 L1 0</span><br><span class="line">    LOCALVARIABLE a I L0 L1 1</span><br><span class="line">    MAXSTACK = 0</span><br><span class="line">    MAXLOCALS = 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谈谈JVM，最近在研究破解jar，有这方面经验的麻烦指导一下思路..&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="Java" scheme="https://hocg.in/tags/Java/"/>
    
      <category term="JVM" scheme="https://hocg.in/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>关于HTTPS</title>
    <link href="https://hocg.in/2016/06/02/Https-%E7%AD%BE%E8%AF%81/"/>
    <id>https://hocg.in/2016/06/02/Https-签证/</id>
    <published>2016-06-02T03:22:43.000Z</published>
    <updated>2017-02-04T05:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇关于<code>HTTPS</code>的日常使用记录，例如:博客HTTPS化~<br>来吧!年轻人!<del>装逼</del>HTTPS时代到了<br><a id="more"></a></p><h3 id="关于https"><a href="#关于https" class="headerlink" title="关于https"></a>关于https</h3><p><a href="https://en.wikipedia.org/wiki/HTTPS" target="_blank" rel="external">什么是HTTPS ?</a></p><blockquote><p>通俗的讲：隐私安全</p></blockquote><h3 id="GitHub-page-使用https"><a href="#GitHub-page-使用https" class="headerlink" title="GitHub page 使用https"></a>GitHub page 使用https</h3><p>主要是使用 <a href="https://kloudsec.com/github-pages/new" target="_blank" rel="external">Kloudsec</a></p><ol><li>申请账号，填入待解析的域名</li><li>把<code>DNS解析</code>转到该网站提供的地址</li><li>验证邮箱并填入<code>GitHub page IP</code></li><li>开启相关服务</li></ol><ul><li><code>PROTECTION</code> -&gt; <code>SSL Encryption</code></li><li><code>PLUGIN STORE</code><br><a href="https://hocg.in/">成品</a><br><strong>NOTE: 2016年09月04日 发现<code>Kloudsec</code>已经倒闭了</strong><br>现在使用的是<a href="https://www.cloudflare.com" target="_blank" rel="external">Cloudflare</a><br>具体使用注册时有引导教程(<code>需把域名解析服务器改为cloudflare的</code>).</li></ul><h3 id="自己搭建的blog"><a href="#自己搭建的blog" class="headerlink" title="自己搭建的blog"></a>自己搭建的blog</h3><p>免费的使用 <a href="https://www.startssl.com/" target="_blank" rel="external">Startssl</a><br><a href="https://blog.lutty.me/" target="_blank" rel="external">成品</a></p><h3 id="TOMCAT-配置https环境"><a href="#TOMCAT-配置https环境" class="headerlink" title="TOMCAT 配置https环境"></a>TOMCAT 配置https环境</h3><p><a href="http://blog.csdn.net/small____fish/article/details/8214938" target="_blank" rel="external"> keytool 教程</a><br>外网回调可尝试使用<a href="http://www.nat123.com" target="_blank" rel="external">nat123</a></p><h3 id="自己VPS使用HTTPS"><a href="#自己VPS使用HTTPS" class="headerlink" title="自己VPS使用HTTPS"></a>自己VPS使用<code>HTTPS</code></h3><p><a href="https://laravel-china.org/topics/2766" target="_blank" rel="external">Let’s Encrypt</a></p><p>:)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇关于&lt;code&gt;HTTPS&lt;/code&gt;的日常使用记录，例如:博客HTTPS化~&lt;br&gt;来吧!年轻人!&lt;del&gt;装逼&lt;/del&gt;HTTPS时代到了&lt;br&gt;
    
    </summary>
    
      <category term="Server" scheme="https://hocg.in/categories/Server/"/>
    
    
      <category term="HTTPS" scheme="https://hocg.in/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新特性</title>
    <link href="https://hocg.in/2016/05/10/ES6-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://hocg.in/2016/05/10/ES6-新特性/</id>
    <published>2016-05-10T02:28:29.000Z</published>
    <updated>2017-09-22T12:53:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>NodeJS 的构建工具层出不穷，因此了解一下陈旧事物的进展。<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>es6: ecmscript6</p><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><ul><li>let 块级作用域, <code>注: es5中var声明的上全局范围的</code></li><li>const 常量</li><li>class 类</li><li>extends 继承</li><li>super 指代父类的实例</li><li><p>arrow functions 语法糖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法: (参数) =&gt; &#123;执行代码&#125;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; <span class="comment">//ES5</span></span><br><span class="line">(i) =&gt; &#123; i + <span class="number">1</span> &#125; <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure></li><li><p>template string 模版字符  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法: `$&#123;变量&#125;`</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="keyword">const</span> name = <span class="string">'hocgin'</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`this is template strnig</span></span><br><span class="line"><span class="string"> &lt;b&gt;<span class="subst">$&#123;name&#125;</span>&lt;/b&gt;</span></span><br><span class="line"><span class="string"> `</span>);</span><br></pre></td></tr></table></figure></li><li><p>destructuring   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;cat, dog&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = &#123;<span class="attr">type</span>: <span class="string">'animal'</span>, <span class="attr">many</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; type, many&#125; = dog</span><br><span class="line"><span class="built_in">console</span>.log(type, many)   <span class="comment">//animal 2</span></span><br></pre></td></tr></table></figure></li><li><p>default 默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法:</span></span><br><span class="line"><span class="comment"> * function &lt;method name&gt;(param = &lt;default value&gt;) &#123;</span></span><br><span class="line"><span class="comment"> *    ...</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(type)</span><br><span class="line"> &#125;</span><br><span class="line"> animal();</span><br></pre></td></tr></table></figure></li><li><p>rest 可变参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法:</span></span><br><span class="line"><span class="comment"> * function &lt;method name&gt;(...params) &#123;</span></span><br><span class="line"><span class="comment"> *    ...</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">animals</span>(<span class="params">...types</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(types)</span><br><span class="line"> &#125;</span><br><span class="line"> animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>);</span><br></pre></td></tr></table></figure></li><li><p>import export 模块设计</p><blockquote><p>es6 把一个文件当作一个模块, 一个模块可<code>export</code>多个变量, 因此不同的<code>export</code><br>可对应不同的<code>import</code></p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="keyword">export</span> animal</span><br><span class="line"><span class="comment">// 导入模块 - 变量为 animal</span></span><br><span class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></span><br><span class="line"><span class="comment">//--------------------</span></span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="keyword">export</span> &#123;dog, cat&#125;</span><br><span class="line"><span class="comment">// 导入模块 - 变量为 [dog, cat]</span></span><br><span class="line"><span class="keyword">import</span> &#123;dog, cat&#125; <span class="keyword">from</span> <span class="string">'./content'</span></span><br><span class="line"><span class="comment">//--------------------</span></span><br><span class="line"><span class="keyword">export</span> &#123;dog, cat&#125;</span><br><span class="line"><span class="comment">// 全部导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">module</span> animal form <span class="string">'./content'</span></span><br><span class="line"><span class="comment">//--------------------</span></span><br><span class="line"><span class="comment">// 默认导出, 一个模块只能使用 export default 一次</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'dog dog'</span></span><br><span class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NodeJS 的构建工具层出不穷，因此了解一下陈旧事物的进展。&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="NodeJS" scheme="https://hocg.in/tags/NodeJS/"/>
    
      <category term="Ubuntu" scheme="https://hocg.in/tags/Ubuntu/"/>
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>绿化NodeJS for linux版</title>
    <link href="https://hocg.in/2016/04/25/%E7%BB%BF%E5%8C%96nodejs-for-linux%E7%89%88/"/>
    <id>https://hocg.in/2016/04/25/绿化nodejs-for-linux版/</id>
    <published>2016-04-25T01:38:49.000Z</published>
    <updated>2016-08-27T05:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>起因，为了方便hexo发布博客，所以想把NodeJS绿化在U盘上..<br>谁叫网上只有win版的呢！自己码起来～<br>绿化 o(╯□╰)o<br><a id="more"></a></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Green4nodeJS</span><br><span class="line">├── hocgin.github.io // github博客目录</span><br><span class="line">├── node // nodejs基本目录</span><br><span class="line">│   ├── node-linux // nodejs源文件</span><br><span class="line">│   ├── cache // 创建一个空文件夹，即可</span><br><span class="line">│   ├── init-module // 创建一个空文件夹，即可</span><br><span class="line">│   └── userconfig // 创建一个空文件夹，即可</span><br><span class="line">└── init.sh // 初始化shell文件 *重要</span><br></pre></td></tr></table></figure><h2 id="初始化文件"><a href="#初始化文件" class="headerlink" title="初始化文件"></a>初始化文件</h2><blockquote><p>主要是加载配置环境，初始化变量</p></blockquote><p><code>init.sh</code> 内容<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Author: hocgin@gmail.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------Use--------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> init.sh or . init.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ------------------------------</span></span><br><span class="line">NOW_PATH=$(cd "$(dirname "$0")"; pwd)</span><br><span class="line">NODE_NAME="node-linux"</span><br><span class="line">NODE_HOME=$NOW_PATH"/node/"$NODE_NAME</span><br><span class="line">NODE_PATH=$NODE_HOME"/bin"</span><br><span class="line">NPM_PATH=$NODE_HOME"/lib/node_modules/npm/bin"</span><br><span class="line">sudo chmod +x -R $NPM_PATH"/."</span><br><span class="line">export PATH=$PATH:$NODE_PATH:$NPM_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"/home/hocgin/.npmrc"</span></span></span><br><span class="line">npm set userconfig $NOW_PATH"/node/userconfig"</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"/home/hocgin/.npm-init.js"</span></span></span><br><span class="line">npm set init-module $NOW_PATH"/node/init-module"</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"/home/hocgin/.npm"</span></span></span><br><span class="line">npm set cache  $NOW_PATH"/node/cache"</span><br></pre></td></tr></table></figure></p><p>修改 <code>/node/node-linux/lib/node_modules/npm/bin/npm</code> 文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> NPM_CLI_JS=<span class="string">"<span class="variable">$basedir</span>/node_modules/npm/bin/npm-cli.js"</span></span></span><br><span class="line">NPM_CLI_JS="$basedir/npm-cli.js"</span><br></pre></td></tr></table></figure></p><p>完成</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source init.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> Or</span></span><br><span class="line">. init.sh</span><br><span class="line"></span><br><span class="line">cd hocgin.github.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 尽情hexo吧</span></span><br></pre></td></tr></table></figure><p><code>注: 安装module时请加上 -g</code></p><p>End</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因，为了方便hexo发布博客，所以想把NodeJS绿化在U盘上..&lt;br&gt;谁叫网上只有win版的呢！自己码起来～&lt;br&gt;绿化 o(╯□╰)o&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="NodeJS" scheme="https://hocg.in/tags/NodeJS/"/>
    
      <category term="Ubuntu" scheme="https://hocg.in/tags/Ubuntu/"/>
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>使用Maven下载jar包 linux版</title>
    <link href="https://hocg.in/2016/04/25/%E4%BD%BF%E7%94%A8Maven%E4%B8%8B%E8%BD%BDjar%E5%8C%85-linux%E7%89%88/"/>
    <id>https://hocg.in/2016/04/25/使用Maven下载jar包-linux版/</id>
    <published>2016-04-25T01:38:49.000Z</published>
    <updated>2017-02-04T05:43:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这只是学习Shell的小脚本, 练手工具罢了.. 折腾!折腾啊<br><a id="more"></a></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Green4nodeJS</span><br><span class="line">├── down.sh // 下载shell，o(╯□╰)o其实就是一条shell</span><br><span class="line">└── pom.xml // 正常maven配置</span><br></pre></td></tr></table></figure><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><p><code>down.sh</code> 内容：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Author: hocgin@gmail.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------Use--------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sh down.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行pom.xml 下载jar</span></span><br><span class="line">NOW_PATH=$(cd "$(dirname "$0")"; pwd)</span><br><span class="line">POM_XML=$NOW_PATH"/pom.xml"</span><br><span class="line">TARGET_DIR=$NOW_PATH"/target"</span><br><span class="line">mvn -f $POM_XML dependency:copy-dependencies</span><br><span class="line">sudo chmod -R 777 $TARGET_DIR</span><br></pre></td></tr></table></figure></p><p><code>pom.xml</code> 内容：</p><blockquote><p>正常maven的pom.xml内容</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 项目的名称 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>temp.download<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>temp-download<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的名称 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 要下载的jar start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>20160212<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 要下载的jar end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source init.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> Or</span></span><br><span class="line">. init.sh</span><br><span class="line"></span><br><span class="line">cd hocgin.github.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 尽情hexo吧</span></span><br></pre></td></tr></table></figure><p>End</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这只是学习Shell的小脚本, 练手工具罢了.. 折腾!折腾啊&lt;br&gt;
    
    </summary>
    
      <category term="Coder" scheme="https://hocg.in/categories/Coder/"/>
    
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Maven" scheme="https://hocg.in/tags/Maven/"/>
    
      <category term="Shell" scheme="https://hocg.in/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>hexo 功能扩展</title>
    <link href="https://hocg.in/2016/03/26/hexo-%E5%8A%9F%E8%83%BD%E6%89%A9%E5%B1%95/"/>
    <id>https://hocg.in/2016/03/26/hexo-功能扩展/</id>
    <published>2016-03-26T05:44:28.000Z</published>
    <updated>2017-02-04T05:34:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是自己参照hexo进行私人订制的教程，也是实战的记录，感觉还不错，成品可参照本博客.. （如果我以后没换的话😶）<br><a id="more"></a></p><h2 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h2><p><code>站点目录</code>: /<br><code>主题目录</code>: /themes/[主题名]<br><code>主题配置文件</code>: /themes/[主题名]/_config.yml<br><code>站点配置文件</code>: /_config.yml  </p><h2 id="添加微信公众号二维码"><a href="#添加微信公众号二维码" class="headerlink" title="添加微信公众号二维码"></a>添加微信公众号二维码</h2><p>首先，打开<code>主题目录</code>下的 <code>layout/_macro/post.swig</code><br>然后，找到节点<code>footer</code>加入以下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span> 添加微信图标 <span class="attr">start</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">      &#123;% if theme.wechat_subscriber.enable %&#125;</span><br><span class="line">        &#123;% if !is_home() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hocgin-container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"folder"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"paper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.wechat_subscriber.qcode &#125;&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hocgin-description"</span>&gt;</span>&#123;&#123; theme.wechat_subscriber.description &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span> 添加微信图标 <span class="attr">end</span> <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其次，到<code>主题目录</code>下的<code>source/css</code>创建文件夹<code>_hocgin</code>并在它之下创建css文件<code>customize-hocgin.css</code>以下是文件内容：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hocgin-container</span> *, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hocgin-container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hocgin-container</span> &gt; <span class="selector-class">.folder</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 110px);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(70% - 90px);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hocgin-container</span> &gt; <span class="selector-class">.folder</span> &gt; <span class="selector-class">.paper</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 111px);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 100px);</span><br><span class="line">  <span class="attribute">transition</span>: top <span class="number">0.5s</span>, opacity <span class="number">0.4s</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Verdana, Tahoma, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.1em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#644812</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fde1ab</span>;</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2);</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2);</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hocgin-container</span> &gt; <span class="selector-class">.folder</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.paper</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 150px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hocgin-container</span> &gt; <span class="selector-class">.folder</span><span class="selector-class">.opened</span> &gt; <span class="selector-class">.paper</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(-250px);</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hocgin-description</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存后，找到<code>主题目录</code>下<code>source/css/main.styl</code><strong>(注：别的主题可能不一样)</strong> 追加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// --------------------------------------------------</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_hocgin/customize-hocgin.css"</span>;</span><br></pre></td></tr></table></figure></p><p>最后，修改<code>主题配置文件</code> 追加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Customize args -- Hocgin</span><br><span class="line">wechat_subscriber:</span><br><span class="line">  enable: true</span><br><span class="line">  qcode: [url]</span><br><span class="line">  description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！</span><br></pre></td></tr></table></figure></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><a href="http://hocg.in">http://hocg.in</a></p><hr><h2 id="底部加入打赏功能"><a href="#底部加入打赏功能" class="headerlink" title="底部加入打赏功能"></a>底部加入打赏功能</h2><p>首先，打开<code>主题目录</code>下的 <code>layout/_macro/post.swig</code><br>然后，找到节点<code>footer</code>加入以下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span> 添加打赏图标 <span class="attr">start</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">    &#123;% if theme.pay_money.enable %&#125;</span><br><span class="line">      &#123;% if !is_home() %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hocgin-money"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"money-reward"</span>&gt;</span></span><br><span class="line">    赏</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"money-pay"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.pay_money.weixin_qcode &#125;&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"money-pay"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.pay_money.alipay_qcode &#125;&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span> 添加打赏图标 <span class="attr">end</span> <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其次，到<code>主题目录</code>下的<code>source/css</code>创建文件夹<code>_hocgin</code>并在它之下创建css文件<code>money-customize-hocgin.css</code>以下是文件内容：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hocgin-money</span> *, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hocgin-money</span> &gt; <span class="selector-class">.money-reward</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.4rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">4.6rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">4.6rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4.6rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f1b60e</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fccd60</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, color-stop(0, #fccd60), <span class="built_in">color-stop</span>(100%, #fbae12), <span class="built_in">color-stop</span>(100%, #2989d8), <span class="built_in">color-stop</span>(100%, #207cca));</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, #fccd60 0, #fbae12 100%, #2989d8 100%, #207cca 100%);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, #fccd60 0, #fbae12 100%, #2989d8 100%, #207cca 100%);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hocgin-money</span> &gt; <span class="selector-class">.money-reward</span> &gt; <span class="selector-class">.money-pay</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 100px);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 100px);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: top <span class="number">0.5s</span>, opacity <span class="number">0.4s</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Verdana, Tahoma, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.1em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#644812</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e6e6e6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hocgin-money</span> &gt; <span class="selector-class">.money-reward</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.money-pay</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hocgin-money</span> &gt; <span class="selector-class">.money-reward</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.money-pay</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 250px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hocgin-money</span> &gt; <span class="selector-class">.money-reward</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.money-pay</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(50% + 50px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存后，找到<code>主题目录</code>下<code>source/css/main.styl</code><strong>(注：别的主题可能不一样)</strong> 追加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// --------------------------------------------------</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_hocgin/money-customize-hocgin.css"</span>;</span><br></pre></td></tr></table></figure></p><p>最后，修改<code>主题配置文件</code> 追加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Customize args -- Hocgin</span><br><span class="line">pay_money:</span><br><span class="line">  enable: true</span><br><span class="line">  weixin_qcode: http://7xs6lq.com1.z0.glb.clouddn.com/img/un/ali.pay.500.png</span><br><span class="line">  alipay_qcode: http://7xs6lq.com1.z0.glb.clouddn.com/img/un/ali.pay.500.png</span><br></pre></td></tr></table></figure></p><h3 id="已知bug"><a href="#已知bug" class="headerlink" title="已知bug"></a>已知bug</h3><ol><li>因为没使用js(也不想使用)，安卓设备需要<code>长按</code>才能出现效果，而苹果设备无法显示效果，欢迎大家修复。┌|*´∀｀|┘</li></ol><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><a href="http://hocg.in">http://hocg.in</a></p><hr><h2 id="防止百度转码"><a href="#防止百度转码" class="headerlink" title="防止百度转码"></a>防止百度转码</h2><p><code>主题目录</code>下 <code>\layout\_partials\head.swig</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Cache-Control”</span> <span class="attr">content</span>=<span class="string">”no-transform”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Cache-Control”</span> <span class="attr">content</span>=<span class="string">”no-siteapp”</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="添加搜索功能-2016年06月04日"><a href="#添加搜索功能-2016年06月04日" class="headerlink" title="添加搜索功能 2016年06月04日"></a>添加搜索功能 <code>2016年06月04日</code></h2><ol><li>安装hexo数据生成插件</li></ol><blockquote><p>Json格式的，有利于自主编写(暂时只介绍原生支持的，如果想自己编写下面的可以不用看)</p></blockquote><p><a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm i -S hexo-generator-json-content</span><br></pre></td></tr></table></figure></p><blockquote><p>NexT 原生支持，不想折腾的可以使用</p></blockquote><p><a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></p><p><code>站点配置文件</code> 新增<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure></p><p>OK！</p><blockquote><p>待续ing</p></blockquote><hr><h2 id="结合服务器，实现自动部署"><a href="#结合服务器，实现自动部署" class="headerlink" title="结合服务器，实现自动部署"></a>结合服务器，实现自动部署</h2><hr><h2 id="多说css美化"><a href="#多说css美化" class="headerlink" title="多说css美化"></a>多说css美化</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是自己参照hexo进行私人订制的教程，也是实战的记录，感觉还不错，成品可参照本博客.. （如果我以后没换的话😶）&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://hocg.in/categories/Web/"/>
    
    
      <category term="HTML5" scheme="https://hocg.in/tags/HTML5/"/>
    
      <category term="Hexo" scheme="https://hocg.in/tags/Hexo/"/>
    
      <category term="CSS3" scheme="https://hocg.in/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>安装完Ubuntu后,我该做什么</title>
    <link href="https://hocg.in/2016/03/20/%E5%AE%89%E8%A3%85%E5%AE%8CUbuntu%E5%90%8E-%E6%88%91%E8%AF%A5%E5%81%9A%E4%BB%80%E4%B9%88/"/>
    <id>https://hocg.in/2016/03/20/安装完Ubuntu后-我该做什么/</id>
    <published>2016-03-20T06:34:20.000Z</published>
    <updated>2017-03-09T11:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇我对Ubuntu日常使用和优化的整理，也是一篇借鉴前人的文章，还有一些可能会遇到的疑难杂病的“偏方”，希望对你有帮助:)<br><strong>update</strong>: 新增<code>undistract-me</code>终端命令完成提醒插件<br><a id="more"></a></p><h2 id="yuan获取"><a href="#yuan获取" class="headerlink" title="yuan获取"></a>yuan获取</h2><p>官方列表： <a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8" target="_blank" rel="external">http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8</a><br>网易163： <a href="http://mirrors.163.com/.help/ubuntu.html" target="_blank" rel="external">http://mirrors.163.com/.help/ubuntu.html</a></p><hr><h2 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h2><blockquote><p>删除libreoffice</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove libreoffice-common</span><br></pre></td></tr></table></figure><blockquote><p>删除Amazon的链接s</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove unity-webapps-common</span><br></pre></td></tr></table></figure><blockquote><p>删掉基本不用的自带软件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install</span><br><span class="line">sudo apt-get remove onboard deja-dup</span><br></pre></td></tr></table></figure><blockquote><p>shang xia zuoyou</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove vim-common</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>monaco<code>苹果字体</code><br><a href="https://github.com/cstrap/monaco-font" target="_blank" rel="external">https://github.com/cstrap/monaco-font</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -kL https://raw.github.com/cstrap/monaco-font/master/install-font-ubuntu.sh | bash</span><br></pre></td></tr></table></figure></p><p>consolas<code>微软字体</code></p><hr><h2 id="Gnome3"><a href="#Gnome3" class="headerlink" title="Gnome3"></a>Gnome3</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="1-安装Gnome3桌面"><a href="#1-安装Gnome3桌面" class="headerlink" title="1.安装Gnome3桌面"></a>1.安装Gnome3桌面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo add-apt-repository ppa:gnome3-team/gnome3</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ppa-purge</span><br><span class="line">sudo ppa-purge ppa:gnome3-team/gnome3</span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line">sudo apt-get install gnome-themes-standard ubuntu-desktop gnome-shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br><span class="line">sudo apt-get install ppa-purge</span><br><span class="line">sudo ppa-purge ppa:gnome3-team/gnome3</span><br></pre></td></tr></table></figure><h4 id="2-Gnome3系统"><a href="#2-Gnome3系统" class="headerlink" title="2.Gnome3系统"></a>2.Gnome3系统</h4><p><a href="https://ubuntugnome.org/download/" target="_blank" rel="external">下载</a></p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><code>主题文件位置：~/.themes 或 /usr/share/themes</code></p><h4 id="1-Paper"><a href="#1-Paper" class="headerlink" title="1.Paper"></a>1.Paper</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下拉git</span></span><br><span class="line">git clone https://github.com/snwh/paper-gtk-theme.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行安装脚本</span></span><br><span class="line">sh ./install-gtk-theme.sh</span><br></pre></td></tr></table></figure><h4 id="2-Numix-Circle"><a href="#2-Numix-Circle" class="headerlink" title="2.Numix-Circle"></a>2.Numix-Circle</h4><blockquote><p>很赞</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-add-repository ppa:numix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install numix-icon-theme-circle</span><br></pre></td></tr></table></figure><h3 id="插件支持"><a href="#插件支持" class="headerlink" title="插件支持"></a>插件支持</h3><blockquote><p>gnome-tweak-tool Gnome3的调节软件<br>可直接管理插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p><code>插件下载网站: https://extensions.gnome.org/</code></p><ol><li>使用Chrome 插件</li><li>系统安装chrome-gnome-shell</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ne0sight/chrome-gnome-shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> trusty</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install chrome-gnome-shell</span><br></pre></td></tr></table></figure><p><strong>插件列表</strong></p><table><thead><tr><th>名称</th><th>描述</th><th>推荐</th></tr></thead><tbody><tr><td>Autohide battery</td><td>可以在电池充满的情况下隐藏电池图标</td><td>推荐</td></tr><tr><td>Battery status</td><td>可以显示当前电池电量以及可以使用的时间</td><td>推荐</td></tr><tr><td>Dash to dock</td><td>在屏幕左边显示一个快速启动条</td><td>推荐</td></tr><tr><td>Freon</td><td>显示当前磁盘，显卡，CPU等等温度</td><td>不推荐，推荐SysPeek</td></tr><tr><td>Lock Keys</td><td>显示当前的 Num Lock, Caps Lock 的状态</td><td>推荐</td></tr><tr><td>Refesh wifi connections</td><td>在 wifi 列表上显示一个刷新图标</td><td>推荐</td></tr><tr><td>status title bar</td><td>讲状态条上的标题改为当前窗口的标题</td><td>推荐</td></tr><tr><td>Coverflow Alt-Tab</td><td>类似WIN 7切换特效</td><td>太显眼，不推荐</td></tr><tr><td>OpenWeather</td><td>天气预报</td><td>推荐</td></tr><tr><td>NetSpeed</td><td>显示网速</td><td>不推荐，推荐SysPeek</td></tr><tr><td>system-monitor</td><td>显示当前系统信息</td><td>太显眼，不推荐</td></tr><tr><td>Dynamic Top Bar</td><td>在当前没有最大化窗口时使顶栏透明</td><td>推荐</td></tr><tr><td>Impatience</td><td>Gnome Shell 动画提速</td><td>推荐</td></tr><tr><td>Better Volume Indicator</td><td>透过鼠标滚轮操作更便捷地调整音量</td><td>推荐</td></tr><tr><td>Media player indicator</td><td>显示音乐播放器的状态</td><td>推荐</td></tr><tr><td>Workspaces-to-dock</td><td>将工作区转变为一个可自动隐藏的停靠栏</td><td>推荐</td></tr><tr><td>Panel OSD</td><td>修改通知显示位置</td><td>推荐</td></tr><tr><td>Clipboard Indicator</td><td>剪贴板指示器</td><td>推荐</td></tr><tr><td>Caffeine</td><td>禁止自动挂起或锁屏</td><td>推荐</td></tr><tr><td>Transmission Daemon Indicator</td><td>Transmission面板指示器</td><td>推荐，需要Transmission Daemon</td></tr><tr><td>Icon Hider</td><td>显示/隐藏顶栏图标</td><td>推荐</td></tr><tr><td>Top Panel Workspace Scroll</td><td>在顶栏上滚动鼠标中键来快速切换工作区。在topbar按住shift+滚轮</td><td>推荐</td></tr><tr><td>Drop Down Terminal</td><td>终端快捷方式</td><td>推荐</td></tr><tr><td>Windows Blur Effects</td><td>给未激活的窗口添加模糊效果</td><td>不推荐</td></tr><tr><td>Modern Calc</td><td>功能齐全的计算器扩展</td><td>没找到</td></tr><tr><td>EasyScreenCast</td><td>录屏工具</td><td>推荐</td></tr><tr><td>Place status indicator</td><td>快速访问一些文件夹</td><td>推荐，没装上</td></tr><tr><td>Removable drive menu</td><td>显示连接到电脑的usb设备</td><td>推荐</td></tr><tr><td>User themes</td><td>用来启用自定义的shell主题</td><td>推荐，没装上</td></tr><tr><td>Workspace indicator</td><td>在顶栏显示当前示工作区的序号</td><td>推荐</td></tr><tr><td>touchpad-indicator</td><td>插入鼠标时自动使触摸板失效</td><td>推荐</td></tr></tbody></table><hr><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.安装archibold</span></span><br><span class="line">curl -L -O http://archibold.io/sh/archibold</span><br><span class="line">chmod +x archibold</span><br><span class="line">sudo mv archibold /usr/bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.执行</span></span><br><span class="line">archibold login-background [壁纸的位置]</span><br></pre></td></tr></table></figure><p>此外还可以让桌面和锁屏界面使用动态壁纸，动态壁纸由一个xml文件构成，就像这样：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">background</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">starttime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2011<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">month</span>&gt;</span>11<span class="tag">&lt;/<span class="name">month</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">day</span>&gt;</span>24<span class="tag">&lt;/<span class="name">day</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hour</span>&gt;</span>7<span class="tag">&lt;/<span class="name">hour</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">minute</span>&gt;</span>00<span class="tag">&lt;/<span class="name">minute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">second</span>&gt;</span>00<span class="tag">&lt;/<span class="name">second</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">starttime</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">static</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>3600.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>picture1.jpg<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">static</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">type</span>=<span class="string">"overlay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>18000.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>picture1.jpg<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>/picture2.jpg<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">static</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>18000.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>picture2.jpg<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">static</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">type</span>=<span class="string">"overlay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>21600.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>picture2.jpg<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>picture1.jpg<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">background</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>简单解释以下这个xml文件的含义：</p><p><code>starttime</code>：这个部分规定了壁纸切换起始时间，设置成过去的某个时间即可(设置成2020年就要等到2020年才会有效果)<br><code>static</code>：这个部分表示在duration规定的时间(以秒为单位)中壁纸都是file中给定的那张图片<br><code>transition</code>：这个部分表示在duration规定的时间内壁纸从from中的图片切换到to中的图片你可以添加任意多个static+transition的组合，只需要最后一个transition切换回最初的static那张图片就可以循环更换壁纸了。  </p><p>那么如何启用这样的xml文件呢，单凭系统设置无法办到，我们需要使用dconf系统配置编辑器。<br>首先打开dconf编辑器，展开<code>org–gnome–desktop–background</code>这一项，可以看到其中的<code>picture-uri</code>修这一项的默认值是<code>file:///usr/share/backgrounds/gnome/adwaita-timed.xml</code>，这个就是你刚装好桌面是的默认壁纸啦，将其改成你的xml文件就可以了。<br>锁屏界面的壁纸更换方法也一样，只不过把<code>org–gnome–desktop–background</code>改成<code>org–gnome–desktop–screensaver</code>而已</p><hr><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="指令安装"><a href="#指令安装" class="headerlink" title="指令安装"></a>指令安装</h3><blockquote><p>命令面板小提示</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo -H pip3 install thefuck</span><br></pre></td></tr></table></figure><blockquote><p>科学上网 Client-SS</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 pip</span></span><br><span class="line">sudo pip install genpac</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载自动翻墙列表</span></span><br><span class="line">genpac -p "SOCKS5 127.0.0.1:1080" --gfwlist-proxy="SOCKS5 127.0.0.1:1080" --output="~/Documents/autoproxy.pac" --gfwlist-url="https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt" --user-rule-from="user-rules.txt"</span><br></pre></td></tr></table></figure><p><strong>添加开机启动</strong><br>command：<code>/usr/bin/ss-qt5</code></p><blockquote><p>屏幕截图 Shutter</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-get install Shutter</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 Shutter</span></span><br></pre></td></tr></table></figure><blockquote><p>音视频解码 ubuntu-restricted extras</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-get install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure><blockquote><p>终端命令执行完成提醒</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-get install undistract-me</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增如下两行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> . /usr/share/undistract-me/long-running.bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> notify_when_long_running_commands_finish_install</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生效</span></span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">sleep 11</span><br></pre></td></tr></table></figure><blockquote><p>GNOME MPV 代替VLC播放器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo add-apt-repository ppa:xuzhen666/gnome-mpv</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gnome-mpv</span><br></pre></td></tr></table></figure><blockquote><p>视频播放 VLC播放器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo add-apt-repository ppa:videolan/master-daily</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vlc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 vlc</span></span><br></pre></td></tr></table></figure><blockquote><p>Grub引导 Grub Customizer<br>可配置启动界面，启动项等</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo add-apt-repository ppa:danielrichter2007/grub-customizer</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install grub-customizer</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 Grub Customizer</span></span><br></pre></td></tr></table></figure><blockquote><p>Office WPS</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-get install wps-office</span><br></pre></td></tr></table></figure><blockquote><p>[小插件]指示器性能 SysPeek</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo add-apt-repository ppa:nilarimogard/webupd8  </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install syspeeka</span><br></pre></td></tr></table></figure><blockquote><p>Synapse 快速启动器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:synapse-core/testing</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install synapse</span><br></pre></td></tr></table></figure><blockquote><p>Uget一款下载工具，配合 aria2 插件使用效果出色<br>curl + area2 + axel</p></blockquote><p>地址：<a href="http://baike.renwuyi.com/2014-11/2153.html" target="_blank" rel="external">参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install uget</span><br></pre></td></tr></table></figure><blockquote><p>redshift类似 f.lux 的屏幕色温调整工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-get install redshift-gtk</span><br></pre></td></tr></table></figure><p><strong>添加开机启动</strong><br>command：<code>redshift-gtk -l 39.92:116.46 -t 5500:4500</code></p><blockquote><p>Go For It 一款整合了待办事项与计时器的生产力应用。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">sudo add-apt-repository ppa:mank319/go-for-it</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install go-for-it</span><br></pre></td></tr></table></figure><blockquote><p>Catfish 一款优雅迅捷的文件搜索工具<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-get install catfish</span><br></pre></td></tr></table></figure></p><p>神级命令行软件 Tmux <a href="http://www.wushxin.top/2016/03/28/%E4%BD%BF%E7%94%A8tmux.html" target="_blank" rel="external">说明</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure></p><p><code>cat</code>代码高亮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pip install pygments</span><br></pre></td></tr></table></figure></p></blockquote><p>配置<br>～/.bashrc<br>加入<code>alias cat=&#39;pygmentize -O style=monokai -f console256 -g&#39;</code></p><h3 id="软件包安装"><a href="#软件包安装" class="headerlink" title="软件包安装"></a>软件包安装</h3><p><a href="http://ubuntu-tweak.com/" target="_blank" rel="external">系统管理 UbuntuTweak</a><br><code>打开：搜索 Ubuntu Tweak</code><br><a href="https://www.jianguoyun.com" target="_blank" rel="external">同步软件 坚果云</a><br><code>打开：搜索 Nutstore</code><br><a href="https://github.com/LiuLang/bcloud-packages" target="_blank" rel="external">百度网盘桌面客户端 BCloud</a><br><a href="https://launchpad.net/indicator-stickynotes" target="_blank" rel="external">便签</a><br><a href="http://keepass.info/" target="_blank" rel="external">MarkDown编辑软件 HarooPad</a><br><a href="http://pad.haroopress.com/" target="_blank" rel="external">密码管理器 keepass2</a><br><a href="http://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="external">搜狗输入法</a><br><a href="http://cidian.youdao.com/multi.html#linuxAll" target="_blank" rel="external">有道词典</a><br><a href="http://www.vmware.com/products/workstation/" target="_blank" rel="external">VMware Workstation</a><br><a href="http://www.google.cn/chrome/browser/" target="_blank" rel="external">Chrome</a><br><a href="https://github.com/cosven/FeelUOwn" target="_blank" rel="external">网易音乐</a><br><a href="http://fabforce.net/dbdesigner4/" target="_blank" rel="external">数据库设计软件 DBdesigner4</a> - <a href="http://josemarfuregattideabreusilva.blogspot.com/2015/04/installing-dbdesigner-405-on-ubuntu.html" target="_blank" rel="external">问题1</a></p><hr><h3 id="听起来不错"><a href="#听起来不错" class="headerlink" title="听起来不错"></a>听起来不错</h3><ol><li>Deluge Bittorrent 客户端</li><li>Nutty网络监测工具。</li><li>Synaptic 新立得软件包管理器</li><li>UNetbootin启动盘制作工具</li><li>Gpick拾色器。</li><li>gpaint 微软画图</li><li>ddm 驱动管理器</li><li>Navicat <code>o(╯□╰)o 竟然是wine的</code></li><li>XMind</li></ol><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="关闭系统检测报告"><a href="#关闭系统检测报告" class="headerlink" title="关闭系统检测报告"></a>关闭系统检测报告</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/default/apport</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改enabled=0</span></span><br></pre></td></tr></table></figure><h3 id="开机自动开启数字键"><a href="#开机自动开启数字键" class="headerlink" title="开机自动开启数字键"></a>开机自动开启数字键</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install numlockx</span><br><span class="line">sudo vim /etc/gdm/Init/Default</span><br><span class="line"><span class="meta">#</span><span class="bash"> -----------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件最后<span class="built_in">exit</span> 0的前面添加：</span></span><br><span class="line">  if [ -x /usr/bin/numlockx ]; then</span><br><span class="line">      numlockx on</span><br><span class="line">  fi</span><br></pre></td></tr></table></figure><p>重启即可</p><h3 id="插入鼠标时自动使触摸板失效"><a href="#插入鼠标时自动使触摸板失效" class="headerlink" title="插入鼠标时自动使触摸板失效"></a>插入鼠标时自动使触摸板失效</h3><p>安装Touchpad Indicator (触摸板开关）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:atareao/atareao  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install touchpad-indicator</span><br></pre></td></tr></table></figure></p><p> 搜索 touchpad indicator</p><h3 id="遇到显示俩个输入法图标情况"><a href="#遇到显示俩个输入法图标情况" class="headerlink" title="遇到显示俩个输入法图标情况"></a>遇到显示俩个输入法图标情况</h3><p><code>有一定原因是自启项启动了一个</code></p><h3 id="黑屏"><a href="#黑屏" class="headerlink" title="黑屏"></a>黑屏</h3><p><code>95% 是和显卡驱动有关</code></p><h3 id="Chrome-每次打开都要求输入密码"><a href="#Chrome-每次打开都要求输入密码" class="headerlink" title="Chrome 每次打开都要求输入密码"></a>Chrome 每次打开都要求输入密码</h3><p>一、删除现在的密钥环<br>  视图-&gt;根据密码环 在密码区会有一个“登录”为名字的密钥环，右击将其删除。<br>二、添加新的密钥环<br>  终端输入seahorse打开管理密钥环的软件，文件-&gt;新建-&gt;密码和密钥-&gt;输入名字(这里是以”chrome”为例)。密码设置为空</p><h3 id="添加源安装后，not-fount-XX"><a href="#添加源安装后，not-fount-XX" class="headerlink" title="添加源安装后，not fount XX"></a>添加源安装后，not fount XX</h3><p>一、 试着访问该链接<br>二、如果可以手动找到该路径，那便可以修改<code>/etc/apt/source.list.d/</code>目录下你添加的安装源文件<br><strong>例如</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list.d/sogoupinyin.list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可修改链接部分。</span></span><br></pre></td></tr></table></figure></p><h3 id="网卡驱动-Realtek-RTL8723AE-无线网卡驱动"><a href="#网卡驱动-Realtek-RTL8723AE-无线网卡驱动" class="headerlink" title="网卡驱动 Realtek RTL8723AE 无线网卡驱动"></a>网卡驱动 <code>Realtek RTL8723AE 无线网卡驱动</code></h3><p><strong>第一种</strong>(闭源驱动)：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-firmware-nonfree</span><br></pre></td></tr></table></figure><p><strong>第二种</strong>(第三方驱动，PPA安装)：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hanipouspilot/rtlwifi</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install rtlwifi-new-dkms</span><br></pre></td></tr></table></figure><h3 id="当遇到产品无法输入中文的时候"><a href="#当遇到产品无法输入中文的时候" class="headerlink" title="当遇到产品无法输入中文的时候"></a>当遇到产品无法输入中文的时候</h3><p>先尝试卸载ibus，如果还是不可以试试在xxx.sh的启动脚本中添加如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMODIFIERS="@im=fcitx"</span><br><span class="line">export XMODIFIERS</span><br></pre></td></tr></table></figure><p>到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run the IDE.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>之前。<br><strong>通用</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/bin/ibus-daemon /usr/bin/ibus-daemon.fix</span><br></pre></td></tr></table></figure></p><h3 id="解决LC-CTYPE-cannot-change-locale-en-US-UTF-8-错误"><a href="#解决LC-CTYPE-cannot-change-locale-en-US-UTF-8-错误" class="headerlink" title="解决LC_CTYPE: cannot change locale (en_US.UTF-8) 错误"></a>解决<code>LC_CTYPE: cannot change locale (en_US.UTF-8)</code> 错误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加en_US.UTF-8</span></span><br><span class="line">locale-gen en_US.UTF-8</span><br></pre></td></tr></table></figure><h3 id="修复VMware故障，闪退"><a href="#修复VMware故障，闪退" class="headerlink" title="修复VMware故障，闪退"></a>修复<code>VMware</code>故障，闪退</h3><ol><li>下载<a href="http://7xs6lq.com1.z0.glb.clouddn.com/Uefi.priv" target="_blank" rel="external">Uefi.priv</a>、<a href="http://7xs6lq.com1.z0.glb.clouddn.com/fix.sh" target="_blank" rel="external">fix.sh</a>、<a href="http://7xs6lq.com1.z0.glb.clouddn.com/Uefi.der" target="_blank" rel="external">Uefi.der</a>至于同一目录.</li><li>执行  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh fix.sh</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇我对Ubuntu日常使用和优化的整理，也是一篇借鉴前人的文章，还有一些可能会遇到的疑难杂病的“偏方”，希望对你有帮助:)&lt;br&gt;&lt;strong&gt;update&lt;/strong&gt;: 新增&lt;code&gt;undistract-me&lt;/code&gt;终端命令完成提醒插件&lt;br&gt;
    
    </summary>
    
      <category term="OS" scheme="https://hocg.in/categories/OS/"/>
    
    
      <category term="Ubuntu" scheme="https://hocg.in/tags/Ubuntu/"/>
    
      <category term="Tips" scheme="https://hocg.in/tags/Tips/"/>
    
      <category term="Gnome" scheme="https://hocg.in/tags/Gnome/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用小记</title>
    <link href="https://hocg.in/2016/03/15/hexo-%E4%BD%BF%E7%94%A8/"/>
    <id>https://hocg.in/2016/03/15/hexo-使用/</id>
    <published>2016-03-15T13:31:42.000Z</published>
    <updated>2017-01-12T02:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>  这是一篇关于如何使用hexo的收集Box <strong>&gt;</strong> 不定期更新吧！<br>  <strong>update</strong> 2017年01月12日10:33:55<br><a id="more"></a></p><blockquote><p>参照 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">hexo 官方文档</a><br>参照 <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">next 主题</a><br>参照 <a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2" target="_blank" rel="external">next 主题 for github</a><br>参照 <a href="http://www.tuicool.com/articles/AfQnQjy/" target="_blank" rel="external">更多扩展使用</a></p></blockquote><h2 id="md文档头部"><a href="#md文档头部" class="headerlink" title="md文档头部"></a>md文档头部</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>有哪些layout呢，请到 scaffolds 目录下查看，这些文件名称就是layout名称</td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>description</td><td>添加本页描述</td><td>默认所有</td></tr><tr><td>photos</td><td>添加图片</td><td></td></tr></tbody></table><h2 id="hexo-基础命令"><a href="#hexo-基础命令" class="headerlink" title="hexo 基础命令"></a>hexo 基础命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 清除</span><br><span class="line"><span class="meta">$</span> hexo clean</span><br><span class="line"><span class="meta">#</span> 上传 GitHub</span><br><span class="line"><span class="meta">$</span> hexo deploy</span><br><span class="line"><span class="meta">#</span> 新建文章</span><br><span class="line"><span class="meta">$</span> hexo new "postName"</span><br><span class="line"><span class="meta">#</span> 新建页面</span><br><span class="line">hexo new page "pageName"</span><br><span class="line"><span class="meta">#</span> 生成静态页面至public目录</span><br><span class="line">hexo generate</span><br><span class="line"><span class="meta">#</span> 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo server</span><br><span class="line"><span class="meta">#</span> 将.deploy目录部署到GitHub</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="md-扩展"><a href="#md-扩展" class="headerlink" title=".md 扩展"></a>.md 扩展</h2><ol><li><p>扩大图片宽度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fi image-url, alt, title %&#125;</span><br></pre></td></tr></table></figure></li><li><p>显示 更多按钮</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上是摘要</span><br><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br><span class="line">以下是余下全文</span><br></pre></td></tr></table></figure></li><li><p>使用标签别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% cq %&#125; 标签别名 &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><ol><li>当你发布的<code>.md</code>文件中携带逗号<code>,</code>(已知)，在<code>多说</code>评论插件中将无法识别评论条数(就是文章顶部那个)<blockquote><p>借鉴办法：替换文件命名，将逗号已<code>_</code>或<code> </code>分隔</p></blockquote></li></ol><h2 id="换电脑后-如何迁移？"><a href="#换电脑后-如何迁移？" class="headerlink" title="换电脑后, 如何迁移？"></a>换电脑后, 如何迁移？</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 为了使用hexo d来部署到git上，需要安装</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">// 为了建立RSS订阅，需要安装</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">// 为了建立站点地图，需要安装</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><ul><li>可能会遇到 ‘./build/Release/DTraceProviderBindings’] code: ‘MODULE_NOT_FOUND’</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --no-optional</span><br></pre></td></tr></table></figure><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  这是一篇关于如何使用hexo的收集Box &lt;strong&gt;&amp;gt;&lt;/strong&gt; 不定期更新吧！&lt;br&gt;  &lt;strong&gt;update&lt;/strong&gt; 2017年01月12日10:33:55&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="https://hocg.in/categories/Other/"/>
    
    
      <category term="Hexo" scheme="https://hocg.in/tags/Hexo/"/>
    
  </entry>
  
</feed>
